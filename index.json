

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

[{"categories":null,"contents":"Initial clarifications This privacy policy concerns the SAMLSecurity blog and products or services offered there.\nYour personal information Information we collect from you We process some or all of the following types of information from you when you visit and use the website: If you contact us, We may keep a record of that correspondence. website analytics data of your usage and problems on the website including, but not limited to, traffic data, location data, errors, usage patterns.\nIn case a product or service is purchased, we collect information needed to deliver the product or service and information required by authorities for book keeping If you choose to subscribe to our mailing list, we collect email address to fulfill this service.\nUses made off your information We process your data in order to provide you with you with the service or product you are using or have requested, improve our service and fulfill requirements from authorities.\nLawful basis for processing When you contact us by email, as mentioned in point 1 in the list above, our lawful basis for processing is \u0026quot;legitimate interest\u0026quot; and the legitimate interest is to respond to any enquiries you have made.\nFor collecting analytics information, as mentioned in point 2 in the list above, our lawful basis for processing is \u0026quot;legitimate interest\u0026quot; for analytics data concerning errors or problems in the website, the legitimate interest is to maintain the service and correct any problems and errors. Other analytics data including usage patterns and statistics are only collected if a consent is given and process on the lawful basis of “concent”.\nIf you purchase a product or service as mentioned in point 3, our lawful basis for processing collected information is “performance of a contract” to be able to provide you with the product or service you purchased. For some off the information we also rely on “legal requirements” for processing data required by authorities for bookkeeping.\nIf you choose to sign up for a mailing list, as mentioned in point 4, you give your consent while doing so. Our lawful basis for processing this data is “consent”\nPurposes of processing We use information collected in the following ways:\n To allow you to make use of or get any service or product you have purchased or requested To answer enquiries you have made To provide you with information you have requested by signing up on a mailing list To comply with legal requirements To ensure that the application is working as intended and be able to improve it to the benefit of all users. To provide you with information and offers that you request from us or which We feel may interest you. We will not sell your data to third parties.  Disclosure of your information We may disclose your personal data to third parties service providers, agents, subcontractors and other associated organisations for the purposes of completing tasks and providing services to you on our behalf (e.g. transport of data, hosting and processing of analytics data).\nWe may also disclose your personal data to third parties:\n in the event that We sell or buy any business or assets, in which case We may disclose your personal data to the prospective seller or buyer of such business or assets; or if We or substantially all of our assets are acquired by a third party, in which case personal data held by us about our customers will be one of the transferred assets; or if We are under a duty to disclose or share your personal data in order to comply with any legal obligation, or in order to enforce or apply our Terms and Conditions and other agreements; or  Third party services The following services, used by us, may collect information about you to provide you with a service you have requested, products you have purchased or functionality you have consented to.\nGoogle analytics We use Google analytics to collect and process information about the usage of our website as described in the previous sections. If you want to know how Google protects this data and your privacy please visit the link below https://www.google.com/policies/privacy/partners/\nGoogle tag manager We use Google tag manager to deploy small pieces of code on our website to make Google Analytics and other services you consent to work. For more information visit the link below. https://support.google.com/tagmanager/answer/9323295\nPayhip We use Payhip to sell our books. Payhip manages payment and delivery of the books and collects information in order to do so. To learn more about what information Payhip collects and how they manage it, visit the link below. https://payhip.com/privacy\nProcessing of personal data Security We take appropriate measures to ensure that any personal data are kept secure.\n Secure transfer and access to the information collected. Limit access to information to personal that need it and to use this only in a manner needed for the purpose of processing.  Keeping your personal data up to date If your personal details change you can request to update them by contacting us by sending a request by email to the contact details below. Data will only be updated if it does not break any legal requirements we might have. If you have any questions about how we use data collected which relates to you, please contact us by sending a request by email to the contact details below.\nHow long we keep your personal data Where you have contacted us via e-mail, We will hold your contact and enquiry details for up to 1 years.\nAnalytics data is saved for up to 5 years\nYour rights According to General Data Protection Regulation you have certain rights, including:\n access to your personal data, require correction any incorrectness in your personal information held, require deletion of personal data in some cases, receive the personal data concerning you which you have provided, in a structured, commonly used and machine-readable format and may * share this data to an other parties in some cases, object at any time to direct marketing concerning you, object to automated decision making result in legal effects concerning you or significantly affect you, in some cases object to processing of your personal data, in some cases restrict processing of your personal data, claim compensation for damages resulting from us breaching data protection laws.  For more information your user rights and the cases where they apply, see the Guidance from the UK Information Commissioner's Office (ICO) on individual's rights under the General Data Protection Regulation. If you would like to exercise any of those rights, please send a request by email to the contact details at the bottom of the policy Please include:\n Information that can be used to identify you Proof of your identity and you ownership to the data concerned. What right you would like to exercise and on what data  Use of cookies A cookie is a small file of letters and numbers that is stored on to your computer when you visit a website. For further information, visit allaboutcookies.org. Our website uses cookies to distinguish you from other users of our website. This helps us to improve the website for the good of all users.\nBelow the cookies we use are described in more detail.\nThe cookies We use are:\n \u0026quot;Analytical\u0026quot; cookies. They allow us to recognise visitors and to see how they use the website. This helps us to improve website works, for example, by ensuring that users are finding what they are looking for easily. “Targeting and advertising” cookies. They allow us to understand what services and products you might be interested in and provide advertisement on these. \u0026quot;Strictly necessary\u0026quot; cookies. These are cookies that are required for the operation of our website. They include, for example, cookies that save any consent you have made to analytics and marketing. And cookies used for tracking errors on the website. Please note that third parties affiliates may also use cookies, over which We have no control.  How to manage cookies When you enter our website for the first time your are asked if you give your consent or not to allow the cookies above to be used to collect information.\nYou can choose to accept all, decline all but the strictly necessary or make your own custom choice of what to allow and not. This choice is saved using a cookie on your browser.\nIf you like you can change this consent at any time by clicking the consent settings link at the button of the website. There are also settings in your web browser and several browsers extensions that can be used to stop cookies from being used.\nPrivacy policies of other websites The Our Company website contains links to other websites. Our privacy policy applies only to our website, so if you click on a link to another website, you should read their privacy policy.\nChanges to this policy We reserve the right to modify this Policy at any time. The most current version of the policy is available on the SAMLSecurity.com website.\nContact Questions, comments and request can be directed to privacy@samlsecurity.com.\n","permalink":"https://rasmusson.github.io/privacy/","tags":null,"title":"Privacy and Cookie policy"},{"categories":null,"contents":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","permalink":"https://rasmusson.github.io/2015/07/a-guide-to-opensaml.html","tags":null,"title":""},{"categories":null,"contents":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","permalink":"https://rasmusson.github.io/a-guide-to-opensamlv2.html","tags":null,"title":""},{"categories":null,"contents":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","permalink":"https://rasmusson.github.io/a-guide-to-opensamlv3.html","tags":null,"title":""},{"categories":null,"contents":"","permalink":"https://rasmusson.github.io/archives/","tags":null,"title":""},{"categories":["OpenSAML"],"contents":"As you probably should know at this point, the SAML Assertion contains the description of a authenticated user and how it was authenticated. The assertion is generally signed to prevent manipulation but there are also cases where you would want to encrypt the assertion to prevent someone to see the information within. For example the assertion can be used to communicate personal information about the user such as social security number and address.\nAs most people reading my blog seem to be on the SP side of SAML I will explain how to decrypt an assertion.\nThe general method of encryption and subsequent decryption of a assertion uses two keys, one symmetric and on asymmetric. The symmetric key is generated during encryption and used to encrypt the actual assertion data. An asymmetric key, generally a SP key contained in the metadata, is then used to encrypt the symmetric key which is then stored in the XML together with the encrypted assertion.\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;saml2p:response destination=\u0026#34;http://localhost:8080/webprofile-ref-project/sp/consumer\u0026#34; id=\u0026#34;_bd4528ed60f7b8142c39ee800625972f\u0026#34; issueinstant=\u0026#34;2017-05-20T21:26:14.955Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 3 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt;TestIDP\u0026lt;/saml2:issuer\u0026gt; 4 \u0026lt;saml2p:status\u0026gt; 5 \u0026lt;saml2p:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;/\u0026gt; 6 \u0026lt;/saml2p:status\u0026gt; 7 \u0026lt;saml2:encryptedassertion xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 8 \u0026lt;xenc:encrypteddata xmlns:xenc=\u0026#34;http://www.w3.org/2001/04/xmlenc#\u0026#34; id=\u0026#34;_2b077c659cdb0187fb617362135c3d63\u0026#34; type=\u0026#34;http://www.w3.org/2001/04/xmlenc#Element\u0026#34;\u0026gt; 9 \u0026lt;xenc:encryptionmethod algorithm=\u0026#34;http://www.w3.org/2001/04/xmlenc#aes128-cbc\u0026#34;\u0026gt; 10 \u0026lt;ds:keyinfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 11 \u0026lt;xenc:encryptedkey id=\u0026#34;_24266af2ae292a886ee40085790ec5c4\u0026#34;\u0026gt; 12 \u0026lt;xenc:encryptionmethod algorithm=\u0026#34;http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\u0026#34;\u0026gt; 13 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;/\u0026gt; 14 \u0026lt;/xenc:encryptionmethod\u0026gt; 15 \u0026lt;xenc:cipherdata\u0026gt; 16 \u0026lt;xenc:ciphervalue\u0026gt;THE ENCRYPTED SYMMETRIC KEY\u0026lt;/xenc:ciphervalue\u0026gt; 17 \u0026lt;/xenc:cipherdata\u0026gt; 18 \u0026lt;/xenc:encryptedkey\u0026gt; 19 \u0026lt;/ds:keyinfo\u0026gt; 20 \u0026lt;xenc:cipherdata\u0026gt; 21 \u0026lt;xenc:ciphervalue\u0026gt;THE ASSERTION ENCRYPTED USING THE SYMMETRIC KEY\u0026lt;/xenc:ciphervalue\u0026gt; 22 \u0026lt;/xenc:cipherdata\u0026gt; 23 \u0026lt;/xenc:encryptionmethod\u0026gt; 24 \u0026lt;/xenc:encrypteddata\u0026gt; 25 \u0026lt;/saml2:encryptedassertion\u0026gt; 26\u0026lt;/saml2p:response\u0026gt; To decrypt the reverse of this is done. The asymmetric is used to decrypt the symmetric key, which is then used to decrypt the assertion.\nAd Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      Now for the OpenSAML part.\nFirst we get the assertion from the XML. The assertion is stored in a EncryptedAssertion object and is retrieved with the method getEncryptedAssertions() on the response instead of getAssertions() which is used otherwise.\n1StaticKeyInfoCredentialResolver keyInfoCredentialResolver 2 = new StaticKeyInfoCredentialResolver(SPCredentials.getCredential()); 3 4Decrypter decrypter 5 = new Decrypter(null, keyInfoCredentialResolver, new InlineEncryptedKeyResolver()); 6decrypter.setRootInNewDocument(true); 7 8decrypter.decrypt(encryptedAssertion); In this example a StaticKeyInfoCredentialResolver is used to point out the key that is used for decryption, in this case I have stored it in the static class SPCredentials. The InlineEncryptedKeyResolver is used to tell the decryptor that the symmetric encryption key can be found in the XML next to the encrypted assertion.\nThe decryptor returns a decrypted Assertion object. 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;saml2:assertion xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; id=\u0026#34;_96a918c84ff41a98781133414a7c930e\u0026#34; issueinstant=\u0026#34;2017-05-20T21:26:14.956Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 3 \u0026lt;saml2:issuer\u0026gt;TestIDP\u0026lt;/saml2:issuer\u0026gt; 4 \u0026lt;ds:signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 5 \u0026lt;ds:signedinfo\u0026gt; 6 \u0026lt;ds:canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 7 \u0026lt;ds:signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 8 \u0026lt;ds:reference uri=\u0026#34;#_96a918c84ff41a98781133414a7c930e\u0026#34;\u0026gt; 9 \u0026lt;ds:transforms\u0026gt; 10 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 11 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 12 \u0026lt;ec:inclusivenamespaces xmlns:ec=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34; prefixlist=\u0026#34;xsd\u0026#34;\u0026gt;\u0026lt;/ec:inclusivenamespaces\u0026gt; 13 \u0026lt;/ds:transform\u0026gt; 14 \u0026lt;/ds:transform\u0026gt; 15 \u0026lt;/ds:transforms\u0026gt; 16 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2001/04/xmlenc#sha256\u0026#34;\u0026gt; 17 \u0026lt;ds:digestvalue\u0026gt;UDJ762cOSK14nBjbFCq9a47x3WgSCJ1qZpeBYKdy5s0=\u0026lt;/ds:digestvalue\u0026gt; 18 \u0026lt;/ds:digestmethod\u0026gt; 19 \u0026lt;/ds:reference\u0026gt; 20 \u0026lt;/ds:signaturemethod\u0026gt; 21 \u0026lt;/ds:canonicalizationmethod\u0026gt; 22 \u0026lt;/ds:signedinfo\u0026gt; 23 \u0026lt;ds:signaturevalue\u0026gt; 24syb20Rjh1pDJTc6CY1nN3x1v8WNlG9lRf71A5ik3i97/A+q0NZCvoJLEBVM73K/U8hxo/hbHOmBs 257KkF4g3yYLVunRlm/tapnTESKqZ8v8SJZQcbY4xMzi0PUxiUJKBugiho114ijDPAYs+U1UZhXGHL 26zyHVd7XJYoOATKVdh3U= 27\u0026lt;/ds:signaturevalue\u0026gt; 28 \u0026lt;/ds:signature\u0026gt; 29 \u0026lt;saml2:subject\u0026gt; 30 \u0026lt;saml2:nameid format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; namequalifier=\u0026#34;Name qualifier\u0026#34; spnamequalifier=\u0026#34;SP name qualifier\u0026#34;\u0026gt;Some NameID value\u0026lt;/saml2:nameid\u0026gt; 31 \u0026lt;saml2:subjectconfirmation method=\u0026#34;urn:oasis:names:tc:SAML:2.0:cm:bearer\u0026#34;\u0026gt; 32 \u0026lt;saml2:subjectconfirmationdata inresponseto=\u0026#34;Made up ID\u0026#34; notbefore=\u0026#34;2017-05-18T21:26:14.957Z\u0026#34; notonorafter=\u0026#34;2017-05-22T21:26:14.957Z\u0026#34; recipient=\u0026#34;http://localhost:8080/webprofile-ref-project/sp/consumer\u0026#34;\u0026gt;\u0026lt;/saml2:subjectconfirmationdata\u0026gt; 33 \u0026lt;/saml2:subjectconfirmation\u0026gt; 34 \u0026lt;/saml2:subject\u0026gt; 35 \u0026lt;saml2:conditions notbefore=\u0026#34;2017-05-18T21:26:14.958Z\u0026#34; notonorafter=\u0026#34;2017-05-22T21:26:14.958Z\u0026#34;\u0026gt; 36 \u0026lt;saml2:audiencerestriction\u0026gt; 37 \u0026lt;saml2:audience\u0026gt;http://localhost:8080/webprofile-ref-project/sp/consumer\u0026lt;/saml2:audience\u0026gt; 38 \u0026lt;/saml2:audiencerestriction\u0026gt; 39 \u0026lt;/saml2:conditions\u0026gt; 40 \u0026lt;saml2:attributestatement\u0026gt; 41 \u0026lt;saml2:attribute name=\u0026#34;username\u0026#34;\u0026gt; 42 \u0026lt;saml2:attributevalue xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:type=\u0026#34;xsd:string\u0026#34;\u0026gt;bob\u0026lt;/saml2:attributevalue\u0026gt; 43 \u0026lt;/saml2:attribute\u0026gt; 44 \u0026lt;saml2:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 45 \u0026lt;saml2:attributevalue xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:type=\u0026#34;xsd:string\u0026#34;\u0026gt;999999999\u0026lt;/saml2:attributevalue\u0026gt; 46 \u0026lt;/saml2:attribute\u0026gt; 47 \u0026lt;/saml2:attributestatement\u0026gt; 48 \u0026lt;saml2:authnstatement authninstant=\u0026#34;2017-05-20T21:26:14.962Z\u0026#34;\u0026gt; 49 \u0026lt;saml2:authncontext\u0026gt; 50 \u0026lt;saml2:authncontextclassref\u0026gt;urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard\u0026lt;/saml2:authncontextclassref\u0026gt; 51 \u0026lt;/saml2:authncontext\u0026gt; 52 \u0026lt;/saml2:authnstatement\u0026gt; 53\u0026lt;/saml2:assertion\u0026gt;\n","permalink":"https://rasmusson.github.io/2017/05/decrypting-saml-assertion-in-opensaml-v3.html","tags":["SAML","OpenSAMLV3","Encryption","Assertion"],"title":"Decrypting a SAML Assertion in OpenSAML v3"},{"categories":["OpenSAML"],"contents":"Signing and sending a AuthnRequest in OpenSAML V3 is fortunately not that different from how it was done in OpenSAML V2.\nAs described in this post on AuthnRequests OpenSAML V2, the AuthnRequest is the SAML request that starts a typical SSO authentication process. This is the SP requesting the IDP to authenticate a user.\nAs in V2 the HTTPRedirectDeflateEncoder is used, the main difference lays in the message context.\nOne of the major changes between V2 and V3 is the message contexts. In version 2, the message contexts where basically one object containing general properties about the message and its destination. In V3 the message context concept has been expanded to be more flexible contain more information. In the new context structure there is a context object per purpose.\nIn my book A Guide to OpenSAML V3 I cover the use of the new message contexts in detail.\nTo sign and send a AuthnRequest, three contexts are needed.\nThe main context is created and the AuthnRequest is set.\n1MessageContext context = new MessageContext(); 2context.setMessage(authnRequest); The SAMLPeerEntityContext and SAMLEndpointContext are created and configured to point to the endpoint of the message.\n1SAMLPeerEntityContext peerEntityContext = context.getSubcontext(SAMLPeerEntityContext.class, true); 2SAMLEndpointContext endpointContext = peerEntityContext.getSubcontext(SAMLEndpointContext.class, true); 3endpointContext.setEndpoint(idpEndpoint); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      Next, the security parameters context is created and populated with signing information\n1SignatureSigningParameters signatureSigningParameters = new SignatureSigningParameters(); 2signatureSigningParameters.setSigningCredential(SPCredentials.getCredential()); 3signatureSigningParameters.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256); 4context.getSubcontext(SecurityParametersContext.class, true).setSignatureSigningParameters(signatureSigningParameters); Next, the HTTPRedirectDeflateEncoder is created and populated with context and the http request object.\n1HTTPRedirectDeflateEncoder encoder = new HTTPRedirectDeflateEncoder(); 2encoder.setMessageContext(context); 3encoder.setHttpServletResponse(httpServletResponse); Lastly the encoder is initialized and the message is encoded\n1encoder.initialize(); 2encoder.encode(); ","permalink":"https://rasmusson.github.io/2016/08/signing-and-sending-authnrequests-in.html","tags":["SAML","OpenSAMLV3","Digital signature"],"title":"Signing and Sending AuthnRequests in OpenSAML V3"},{"categories":["OpenSAML"],"contents":"Here is the happy news of the day. Verifying a signature in OpenSAML V3 is done almost identical to how it is done in V2, so the blog post on the process from OpenSAML V2 is still very much relevant and worth checking out.\nThe only difference between the two version is that the SignatureValidator is no longer instantiated. Instead the validate method of SignatureValidator is now static and takes both the credentials and the signature object.\nBelow is the code for verifying signatures in OpenSAML V3\n1SAMLSignatureProfileValidator profileValidator = new SAMLSignatureProfileValidator(); 2profileValidator.validate(assertion.getSignature()); 3SignatureValidator.validate(assertion.getSignature(), cred); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n     \n","permalink":"https://rasmusson.github.io/2016/08/verifying-signatures-with-opensaml-v3.html","tags":["SAML","OpenSAMLV3"],"title":"Verifying signatures with OpenSAML V3"},{"categories":["OpenSAML"],"contents":"As many of you know, version 2 of OpenSAML will officially reach its end of life at July 31 of 2016. This means that the library will not be receiving any new updates, not even critical security updates.\nBecause of this, everyone currently using version 2 of OpenSAML is strongly advised to migrate to OpenSAML version 3.\nIn light of this, I have done a fair amount of research on version 3 and am now releasing a new edition of A Guide to OpenSAML.\nThe new edition includes:\n Sample project updated for V3 Updated code and explanatory text New chapters on message handlers and message contexts A rudimentary migration guide from V2 to V3 (based on changes needed in the sample project)  For the convenience of those of you that have read my previous book and are just migrating to V3, I have provided a chapter in the beginning, summarising all the changes since the last edition.\nHave a closer look and buy the book on Payhip!\n","permalink":"https://rasmusson.github.io/2016/06/new-book-release-opensaml-version-3.html","tags":["SAML","OpenSAMLV3"],"title":"New book release: OpenSAML version 3"},{"categories":["OpenSAML"],"contents":"So, as those of you working with OpenSAML probably have noticed, the version 2 of the OpenSAML library is closing in on its end of life. After July 31st no more security maintenance will be done at this version. Those using is asked to move to version 3 of the library.\nI have had many questions on how to use the new version and unfortunately the documentation is not yet produced. I have started to dig into it and will post what I find out.\nThe first thing I noticed was a structure change in the maven setup. The library have been divided into many submodules as listed below. This makes the Javadoc a bit more hard to find but below are links the the javadoc for each module. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      I hope this is of help.\nopensaml-core\nopensaml-profile-api\nopensaml-profile-impl\nopensaml-soap-api\nopensaml-soap-impl\nopensaml-saml-api\nopensaml-saml-impl\nopensaml-xacml-api\nopensaml-xacml-impl\nopensaml-xacml-saml-api\nopensaml-xacml-saml-impl\nopensaml-messaging-api\nopensaml-messaging-impl\nopensaml-storage-api\nopensaml-storage-impl\nopensaml-security-api\nopensaml-security-impl\nopensaml-xmlsec-api\nopensaml-xmlsec-impl\nThe combined version Java doc is available here\nJava docs\n","permalink":"https://rasmusson.github.io/2016/04/opensaml-v3-javadocs.html","tags":["SAML","OpenSAMLV3"],"title":"OpenSAML V3 Javadocs"},{"categories":["SAML"],"contents":"I have been working with SAML for a while now and I have always used Firefox for debugging instead of my favorite browser, Chrome. Why? you ask. Because there is a plugin called SAML tracer on firefox that is excellent for viewing the SAML messages going across the browser. There have been no such plugin for Chrome.\nFinally I have decided to take things into my own hands and build one.\nAnd now it's done and here it is! SAML DevTools extension\nFeature summary  The extension adds a panel to the Developer Tools Shows all network requests for the current window SAML requests are highlighted in green for usability Can filter out SAML requests Show request and response details Displays syntax highlighted SAML message Custom syntax highlighting for SAML to allow for easier reading  ","permalink":"https://rasmusson.github.io/2015/10/saml-chrome-extension-published.html","tags":["SAML"],"title":"SAML Chrome Extension Published!"},{"categories":["OpenSAML"],"contents":"When a message is signed with a private key, the receiving end will need to verify the message using the corresponding public key/certificate. But in order to do this, the receiving end must have the certificate.\nThe certificate is transported in encoded form in a KeyInfo element. Below is a example\n1\u0026lt;ds:keyinfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 2 \u0026lt;ds:x509data\u0026gt; 3 \u0026lt;ds:x509certificate\u0026gt; 4 MIICizCCAfQCCQCY8tKaMc0BMjANBgkqhkiG9w0BAQUFADCBiTELMAkGA1UEBhMCTk8x 5 EjAQBgNVBAgTCVRyb25kaGVpbTEQMA4GA1UEChMHVU5JTkVUVDEOMAwGA1UECxMFRmVp 6 ZGUxGTAXBgNVBAMTEG9wZW5pZHAuZmVpZGUubm8xKTAnBgkqhkiG9w0BCQEWGmFuZHJl 7 YXMuc29sYmVyZ0B1bmluZXR0Lm5vMB4XDTA4MDUwODA5MjI0OFoXDTM1MDkyMzA5MjI0 8 OFowgYkxCzAJBgNVBAYTAk5PMRIwEAYDVQQIEwlUcm9uZGhlaW0xEDAOBgNVBAoTB1VO 9 SU5FVFQxDjAMBgNVBAsTBUZlaWRlMRkwFwYDVQQDExBvcGVuaWRwLmZlaWRlLm5vMSkw 10 JwYJKoZIhvcNAQkBFhphbmRyZWFzLnNvbGJlcmdAdW5pbmV0dC5ubzCBnzANBgkqhkiG 11 9w0BAQEFAAOBjQAwgYkCgYEAt8jLoqI1VTlxAZ2axiDIThWcAOXdu8KkVUWaN/SooO9O 12 0QQ7KRUjSGKN9JK65AFRDXQkWPAu4HlnO4noYlFSLnYyDxI66LCr71x4lgFJjqLeAvB/ 13 GqBqFfIZ3YK/NrhnUqFwZu63nLrZjcUZxNaPjOOSRSDaXpv1kb5k3jOiSGECAwEAATAN 14 BgkqhkiG9w0BAQUFAAOBgQBQYj4cAafWaYfjBU2zi1ElwStIaJ5nyp/s/8B8SAPK2T79 15 McMyccP3wSW13LHkmM1jwKe3ACFXBvqGQN0IbcH49hu0FKhYFM/GPDJcIHFBsiyMBXCh 16 pye9vBaTNEBCtU3KjjyG0hRT2mAQ9h+bkPmOvlEo/aH0xR68Z9hw4PF13w== 17 \u0026lt;/ds:x509certificate\u0026gt; 18 \u0026lt;/ds:x509data\u0026gt; 19 \u0026lt;/ds:keyinfo\u0026gt; There are many ways to give the receiving end the certificate. Two common methods is metadata and in the message.\nWhen using the metadata method the KeyInfo object is embedded in the metadata inside the KeyDescriptor element. When attaching KeyInfo to the SAML message the element is embedded in the Signature object.\nAd Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      To create and add a KeyInfo object and add it to a SAML message signature, add this call to SecurityHelper before generating the signature.\n1SecurityHelper.prepareSignatureParams(signature, IDPCredentials.getCredential(), 2 Configuration.getGlobalSecurityConfiguration(), null); This helper method does not only add a the key info but it also sets the\n Signature algorithm URI Canonicalization algorithm URI and HMAC output length (if applicable and a value is configured)  Customising the KeyInfo The above statement only uses the default configuration of for generating KeyInfo. To customise the KeyInfo you create your own instance of KeyInfoGeneratorFactory, set it up as preferred and use it in the statement.\nThe example below shows how to use a X509KeyInfoGeneratorFactory to create a KeyInfo with properties from the X509 certificate used as credential.\n1X509KeyInfoGeneratorFactory x509Factory = new X509KeyInfoGeneratorFactory(); 2x509Factory.setEmitEntityCertificate(true); 3x509Factory.setEmitEntityCertificateChain(true); 4x509Factory.setEmitX509IssuerSerial(true); 5x509Factory.setEmitX509SubjectName(true); 6 7Configuration.getGlobalSecurityConfiguration().getKeyInfoGeneratorManager().registerFactory(\u0026#34;x509emitingKeyInfoGenerator\u0026#34;, x509Factory); 8 9SecurityHelper.prepareSignatureParams(signature, SPCredentials.getCredential(), null, \u0026#34;x509emitingKeyInfoGenerator\u0026#34;); ","permalink":"https://rasmusson.github.io/2015/07/adding-keyinfo-to-saml-message.html","tags":["SAML","OpenSAMLV2"],"title":"Adding KeyInfo to a message in OpenSAML"},{"categories":["SAML"],"contents":"If you are just starting out trying to understand SAML you will come across the term SAML Assertion quite quickly. In this post or tutorial, I will try to explain to you what a SAML Assertion is and give you some examples on how they could look. This post mainly looks at the SAML Assertion in the perspective of the SAML Web Browser Profile. If you don't know what that is, have a look on my post about exactly that\nWhat is a SAML Assertion? The SAML Assertion is the main piece in the SAML puzzle. This is the object that the rest of SAML is build to safely build, transport and use.\nA SAML Assertion is basically a package with security information about a entity.(e.g. A user) issued from the Identity Provider(IdP) to the Service Provider(SP). When the user has authenticated with the IdP a SAML Assertion is sent to the SP with the IdPs information about that user.\nWhat does a SAML Assertion contain? The SAML Assertion contains some general information like, who sent it, what time it was sent and validity period of the assertion. The assertion also contains statements about a user. These come in three different types.\nAuthentication The authentication statement contains, not surprisingly, information about the authentication of the user. Mainly when and by what means the user was authenticated.\n1\u0026lt;saml:authnstatement 2 authninstant=\u0026#34;2010-11-04T14:04:30Z\u0026#34; 3 sessionindex=\u0026#34;s22428b07e56ce0dbd3f72237ce29c585541db5d01\u0026#34;\u0026gt; 4 \u0026lt;saml:authncontext\u0026gt; 5 \u0026lt;saml:authncontextclassref\u0026gt; 6 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 7 \u0026lt;/saml:authncontextclassref\u0026gt; 8 \u0026lt;/saml:authncontext\u0026gt; 9\u0026lt;/saml:authnstatement\u0026gt; Attribute The attribute statement can contain application specific attributes connected to the user, for example. Address, telephone number social security number.\n1\u0026lt;saml:attributestatement\u0026gt; 2 \u0026lt;saml:attribute name=\u0026#34;social\u0026#34;\u0026gt; 3 \u0026lt;saml:attributevalue 4 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 5 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 6 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 7 555501234 8 \u0026lt;/saml:attributevalue\u0026gt; 9 \u0026lt;/saml:attribute\u0026gt; 10 \u0026lt;saml:attribute name=\u0026#34;email\u0026#34;\u0026gt; 11 \u0026lt;saml:attributevalue 12 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 13 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 14 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 15 someone@example.com 16 \u0026lt;/saml:attributevalue\u0026gt; 17 \u0026lt;/saml:attribute\u0026gt; 18 \u0026lt;saml:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 19 \u0026lt;saml:attributevalue 20 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 21 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 22 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 23 546848134886 24 \u0026lt;/saml:attributevalue\u0026gt; 25 \u0026lt;/saml:attribute\u0026gt; 26\u0026lt;/saml:attributestatement\u0026gt; Authorization The authorization statement contains information about the users access rights to different resources. This statement can be used for basic authorization. For more advanced authorization cases I recommend taking a look at the XACML standard\n1\u0026lt;saml:authorizationdecisionstatement 2 decision=\u0026#34;Permit\u0026#34; 3 resource=\u0026#34;http://www.example.org/customers/getCustomers\u0026#34;\u0026gt; 4 \u0026lt;saml:action\u0026gt;Read\u0026lt;/saml:action\u0026gt; 5\u0026lt;/saml:authorizationdecisionstatement\u0026gt; What does a SAML Assertion look like? Here is an example on what a whole can look like.\n1\u0026lt;saml:assertion 2 id=\u0026#34;s2365479533bf942f8eaaa2c267f9bd4ff679ebc1f\u0026#34; 3 issueinstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 4 version=\u0026#34;2.0\u0026#34; 5 xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 6 \u0026lt;saml:issuer\u0026gt;IDP-alias\u0026lt;/saml:issuer\u0026gt; 7 \u0026lt;saml:subject\u0026gt; 8 \u0026lt;saml:nameid 9 format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; 10 namequalifier=\u0026#34;IDP-alias\u0026#34; 11 spnamequalifier=\u0026#34;my-alias\u0026#34;\u0026gt; 12 5VkzP/MZ1PMJ62o45/7DdFms9y7K 13 \u0026lt;/saml:nameid\u0026gt; 14 \u0026lt;saml:subjectconfirmation method=\u0026#34;urn:oasis:names:tc:SAML:2.0:cm:bearer\u0026#34;\u0026gt; 15 \u0026lt;saml:subjectconfirmationdata 16 inresponseto=\u0026#34;_bba7e8a2f7a7c51e339d614b2c2d1178\u0026#34; 17 notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34; 18 recipient=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34;\u0026gt; 19 \u0026lt;/saml:subjectconfirmationdata\u0026gt; 20 \u0026lt;/saml:subjectconfirmation\u0026gt; 21 \u0026lt;/saml:subject\u0026gt; 22 \u0026lt;saml:conditions notbefore=\u0026#34;2011-01-24T08:37:50Z\u0026#34; notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34;\u0026gt; 23 \u0026lt;saml:audiencerestriction\u0026gt; 24 \u0026lt;saml:audience\u0026gt;my-alias\u0026lt;/saml:audience\u0026gt; 25 \u0026lt;/saml:audiencerestriction\u0026gt; 26 \u0026lt;/saml:conditions\u0026gt; 27 \u0026lt;saml:authnstatement 28 authninstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 29 sessionindex=\u0026#34;s212cd7811734a92405b6ef8308a1b1a98e32e6f01\u0026#34;\u0026gt; 30 \u0026lt;saml:authncontext\u0026gt; 31 \u0026lt;saml:authncontextclassref\u0026gt; 32 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 33 \u0026lt;/saml:authncontextclassref\u0026gt; 34 \u0026lt;/saml:authncontext\u0026gt; 35 \u0026lt;/saml:authnstatement\u0026gt; 36 \u0026lt;saml:attributestatement\u0026gt; 37 \u0026lt;saml:attribute name=\u0026#34;social\u0026#34;\u0026gt; 38 \u0026lt;saml:attributevalue 39 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 40 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 41 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 42 555501234 43 \u0026lt;/saml:attributevalue\u0026gt; 44 \u0026lt;/saml:attribute\u0026gt; 45 \u0026lt;saml:attribute name=\u0026#34;email\u0026#34;\u0026gt; 46 \u0026lt;saml:attributevalue 47 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 48 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 49 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 50 someone@example.com 51 \u0026lt;/saml:attributevalue\u0026gt; 52 \u0026lt;/saml:attribute\u0026gt; 53 \u0026lt;saml:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 54 \u0026lt;saml:attributevalue 55 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 56 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 57 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 58 546848134886 59 \u0026lt;/saml:attributevalue\u0026gt; 60 \u0026lt;/saml:attribute\u0026gt; 61 \u0026lt;/saml:attributestatement\u0026gt; 62\u0026lt;/saml:assertion\u0026gt; ","permalink":"https://rasmusson.github.io/2015/07/what-is-saml-assertion.html","tags":["SAML"],"title":"What is a SAML Assertion?"},{"categories":["OpenSAML"],"contents":"After many late nights and tedious editing, I have finished my book on OpenSAML, based on my experiences working with the OpenSAML library. A Guide to OpenSAML is a short book that introduces SAML, the SAML Web Browser Profile and the use of OpenSAML.\nBuy the book on Payhip! The book has three parts, the first of which introduces SAML, SAML Web Browser Profile and OpenSAML. The next part goes deeper into explaining the Web Browser Profile more in detail and shows an example on how to implement it using OpenSAML. The last part explains and shows examples on how to use some of the security functions in OpenSAML, like signatures and encryption.\nThe SAML Web Browser Profile is flexible and can be used in many different ways. The book shows the SAML Web Browser Profile with the following configurations:\n SP initiated Single Sign-On Authentication request using HTTP Redirect Binding Assertion transported using HTTP Artifact Binding SAML Artifact transported using HTTP Redirect Binding Artifact resolution using SOAP Binding  The book explains the interaction from the Service Provider’s point of view. The implementation of the Identity Provider is not covered in this book.\nThe package contains the book in PDF format, three different e-reader formats(EPUB, MOBI, AZW3) and a sample project showing OpenSAML in action.\n","permalink":"https://rasmusson.github.io/2014/09/opensaml-book-release.html","tags":["SAML","OpenSAMLV2"],"title":"OpenSAML book release!"},{"categories":["OpenSAML"],"contents":"org.opensaml.xml.validation.ValidationException: Apache xmlsec IdResolver could not resolve the Element for id reference:\nThis is an example of a common exception that can be thrown when verifying a signature after decryption an object.\nTo avoid this, it is often enough to configure your Decryptor using the following setting before decrypting.\n1decrypter.setRootInNewDocument(true); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n     \n","permalink":"https://rasmusson.github.io/2014/05/exception-apache-xmlsec-idresolver.html","tags":["SAML","OpenSAMLV2"],"title":"Exception: Apache xmlsec IdResolver could not resolve the Element for id reference while decrypting"},{"categories":["OpenSAML"],"contents":"This is a common exception to beginners in using OpenSAML. A common mistake when starting to use the OpenSAML library is to not initialise the library. OpenSAML needs a couple of configuration files in order to work. The library is provided with a default set of these files that is sufficient for most uses. Before starting the use the library the configurations must be loaded. This is done using the bootstrap function.\n1try { 2 DefaultBootstrap.bootstrap(); 3} catch (ConfigurationException e) { 4 throw new RuntimeException(\u0026#34;Bootstrapping failed\u0026#34;); 5}  If you do not do this before you start using the library, you might run into exceptions like. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      1Exception in thread \u0026#34;main\u0026#34; java.lang.NullPointerException 2 at no.steras.opensaml.Main.main(Main.java:25) 3 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 4 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 5 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 6 at java.lang.reflect.Method.invoke(Method.java:601) 7 at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\n","permalink":"https://rasmusson.github.io/2014/05/nullpointer-exception-in-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Nullpointer exception in OpenSAML"},{"categories":["OpenSAML"],"contents":"When exchanging information with SAML it is highly recommended to sign and verify signatures on all messages. This to ensure the the sender really is how he says he is and that the information sent has not been manipulated during transport.\nEvery SAML object that implements the SignableXMLObject interface can be signed.\nThe signing of a SAML message is done in three steps. First, all the properties for the signature is put in a Signature object. Properties that can be set include singing credentials, algorithm and optionally a KeyInfo object. The KeyInfo object identifies what key should be used to verify the signature.\n1signature.setSigningCredential(credential); 2signature.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1); 3signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS); The Signature object is then added to the SAML object using the setSignature method. entityDescriptor.setSignature(signature); The second step is to marchal the object. This must be done before signing or else you will get a message like this. 1SEVERE: Unable to compute signature, Signature XMLObject does not have the XMLSignature created during marshalling.\n1Element element = Configuration 2 .getMarshallerFactory() 3 .getMarshaller(entityDescriptor) 4 .marshall(entityDescriptor); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      The third step is to perform the actual signing to produce a cryptographic signature, this is done with the Signer class.\n1Signer.signObject(signature); Here is how the signed object might look after signing and marshalling.\n1\u0026lt;md:entitiesdescriptor xmlns:md=\u0026#34;urn:oasis:names:tc:SAML:2.0:metadata\u0026#34;\u0026gt; 2 \u0026lt;ds:signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 3 \u0026lt;ds:signedinfo\u0026gt; 4 \u0026lt;ds:canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 5 \u0026lt;ds:signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 6 \u0026lt;ds:reference uri=\u0026#34;\u0026#34;\u0026gt; 7 \u0026lt;ds:transforms\u0026gt; 8 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 9 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 10 \u0026lt;/ds:transform\u0026gt; 11 \u0026lt;/ds:transform\u0026gt; 12 \u0026lt;/ds:transforms\u0026gt; 13 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;\u0026gt; 14 \u0026lt;ds:digestvalue\u0026gt;a3HbFE7e2n/x2yqDTKyXrQNaDHs=\u0026lt;/ds:digestvalue\u0026gt; 15 \u0026lt;/ds:digestmethod\u0026gt; 16 \u0026lt;/ds:reference\u0026gt; 17 \u0026lt;/ds:signaturemethod\u0026gt; 18 \u0026lt;/ds:canonicalizationmethod\u0026gt; 19 \u0026lt;/ds:signedinfo\u0026gt; 20 \u0026lt;ds:signaturevalue\u0026gt;b8cPqphGwZIvBy1DuEWoS/lhreiMp7WtcukC2TkXl2nRwuJ5i1TN+ifefxvsjs9ocQ4XAL6EVrXXaJvyRMkepuDYAFqYYGle4iPkl5XZpCDeMjTEt/T45f3etOdn5EGmNgA5MwUQxFTnERYkdNiN//r8BYuNfEKFNd+BqyVRjRWBbgywWRfSBBz8u1m4aysyeYcz9M72pI9YhC4QqRtXG7cght78Lt3JLUMDHKZMg9itvs1rPwItLFCzaJr57Q/V+nQ8uIb0bCUUrXZw9hGl5b3SYIuJLdHI0IDPt8YGpNa/yzVqnKOk5FvhASmMQur3/CbdCvRKr8yTpalW3zDgfw==\u0026lt;/ds:signaturevalue\u0026gt; 21\u0026lt;/ds:signature\u0026gt; 22\u0026lt;/md:entitiesdescriptor\u0026gt; ","permalink":"https://rasmusson.github.io/2012/11/signing-with-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Signing with OpenSAML"},{"categories":["OpenSAML"],"contents":"As the post about signing SAML messages discussed, it is very important to properly sign and verify messages in a SAML federation.\nWhen verifying a signature of a message it is recommended to first validate the message with a SAML profile validator. This to ensure that the signature follows the standard for XML signatures. Afterwords the cryptography validation of the signature is done by a SignatureValidator.\nPS. This validation only performs a cryptographic validation of the signature. This means that it validates that the message has not been changed since it was signed. It does however not check that the certificate used for signing is trusted. To confirm the trust of the certificate in OpenSAML, a trust engine must be used in the validation.\nThe most common method to confirm the trust of a key is to compare it to the key received in SAML Metadata. This is generally done as a configuration step when setting up a SAML federation. This post gives more information on SAML Metadata Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      Here is a full example of the cryptographic validation.\n1SAMLSignatureProfileValidator profileValidator = new SAMLSignatureProfileValidator(); 2profileValidator.validate(entityDescriptor.getSignature()); 3SignatureValidator sigValidator = new SignatureValidator(cred); 4sigValidator.validate(entityDescriptor.getSignature()); SignatureValidator is instantiated with a credential. in this case the credential basically contains the public key for the private key that was used to sign the message. The credential object can be obtained in a number of different ways. This post shows some methods in OpenSAML. If the public key was sent in the message, it is very important to validate that you trust the key.\n","permalink":"https://rasmusson.github.io/2012/11/verifying-signatures-with-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Verifying signatures with OpenSAML"},{"categories":["OpenSAML"],"contents":"One of my visitor found this public source code. The project a Danish project that implements a service provider using OpenSAML.\noiosaml\nThanks to Rholdan Ortiz!\nThere is also the Norwegian electronic voting system. This also implements a service provider.\nEvalg Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n     \n","permalink":"https://rasmusson.github.io/2012/11/opensaml-sample-code.html","tags":["SAML","OpenSAMLV2"],"title":"OpenSAML sample code"},{"categories":["SAML"],"contents":"What is it? The SAML Web Browser SSO Profile is one of the profiles defined in the SAML specification. As described in my introductory post on SAML, profiles describes how to fulfill a specific use-case using SAML.\nIn the realm of user authentication using SAML, the Web Browser Profile is very frequently used.\nThe use-case being described in the Web Browser Profile is how to authenticate a user that is using a web browser.\nHow does it work? Below is a description and figure of the flow in the profile. As always when using SAML, things can be done in a number of different ways. In the flow below I describe one common way, using the HTTP-Redirect binding for sending the AuthnRequest and the Artifact binding for sending the SAML Assertion.\nThe authentication process could be said to involve five steps\n User tries to get access - The process begins with a not authenticated user trying to get access to a protected part of the application (SP). Some form of filter is put in place to catch the user. The user is redirected to the Identity Provider(IdP) -When the filter detects a user who is not authenticated, the user is sent to the IdP using HTTP-Redirect. The user is authenticated - This step does not involve any interaction with the SP. The IdP has full responsibility for authenticating the user in a secure way. Authenticated user is sent back to the SP - When the authentication is successfully completed the user is sent back to the SP together with a SAML Artifact. The artifact is more or less a pointer to the user information at the IdP. The reason for using this method could be that it is considered to insecure to send the assertion via the browser. Request user information - When the SP receives the artifact it uses a web service at the IdP to exchange the artifact for a SAML Assertion. This is the actual proof of authentication  This is how the federation with SAML web profile works on a low level. This can be good to know when working with identity federation and especially when debugging.\nUsually when you set up a identity federation this is done with one of the many application available for this purpose, for example. OpenAM, OpenSAML and Oracle Access Manager.\n","permalink":"https://rasmusson.github.io/2012/05/saml-web-profile.html","tags":["SAML"],"title":"SAML Web Browser Profile"},{"categories":["OpenSAML"],"contents":"OpenSAML can be used to generate metadata. As with reading metadata, the library is pretty straight forward in relation to the metadata XML.\nThis is an example for generating a SP metadata file\nWe start by creating the EntityDescriptor, setting the EntityId and building the SSO descriptor.\n1EntityDescriptor spEntityDescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(EntityDescriptor.class); 2spEntityDescriptor.setEntityID(entityID); 3SPSSODescriptor spSSODescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(SPSSODescriptor.class); In the SSO descriptor we request how we want the communication signed and encrypted\n1spSSODescriptor.setWantAssertionsSigned(true); spSSODescriptor.setAuthnRequestsSigned(true); And what certificates we want to use\n1X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory(); 2keyInfoGeneratorFactory.setEmitEntityCertificate(true); 3KeyInfoGenerator keyInfoGenerator = keyInfoGeneratorFactory.newInstance(); 4 5 6KeyDescriptor encKeyDescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(KeyDescriptor.class); 7 8encKeyDescriptor.setUse(UsageType.ENCRYPTION); //Set usage 9 10// Generating key info. The element will contain the public key. The key is used to by the IDP to encrypt data 11try { 12 encKeyDescriptor.setKeyInfo(keyInfoGenerator.generate(X509Credential)); 13} catch (SecurityException e) { 14 log.error(e.getMessage(), e); 15} 16 17spSSODescriptor.getKeyDescriptors().add(encKeyDescriptor); 18 19KeyDescriptor signKeyDescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(KeyDescriptor.class); 20 21signKeyDescriptor.setUse(UsageType.SIGNING); //Set usage 22 23// Generating key info. The element will contain the public key. The key is used to by the IDP to verify signatures 24try { 25 signKeyDescriptor.setKeyInfo(keyInfoGenerator.generate(X509Credential)); 26} catch (SecurityException e) { 27 log.error(e.getMessage(), e); 28} 29 30spSSODescriptor.getKeyDescriptors().add(signKeyDescriptor); The keyInfoGenerator uses a X509Credential to generate the key info object with the public key. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      Setting what type of pseudonym federation we want with the IDP.\n1// Request transient pseudonym 2NameIDFormat nameIDFormat = SAMLUtil.buildSAMLObjectWithDefaultName(NameIDFormat.class); 3nameIDFormat.setFormat(\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34;); 4spSSODescriptor.getNameIDFormats().add(nameIDFormat); Setting location of services\n1AssertionConsumerService assertionConsumerService = SAMLUtil.buildSAMLObjectWithDefaultName(AssertionConsumerService.class); 2assertionConsumerService.setIndex(0); 3assertionConsumerService.setBinding(SAMLConstants.SAML2_ARTIFACT_BINDING_URI); 4 5// Setting address for our AssertionConsumerService 6assertionConsumerService.setLocation(assertionConsumerServiceURL); 7spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService); And finally we set SAML as supported protocol and generate the XML 1spSSODescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS); 2 3spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor); 4 5DocumentBuilder builder; 6DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 7 8builder = factory.newDocumentBuilder(); 9Document document = builder.newDocument(); 10Marshaller out = Configuration.getMarshallerFactory().getMarshaller(spEntityDescriptor); 11out.marshall(spEntityDescriptor, document); 12 13Transformer transformer = TransformerFactory.newInstance().newTransformer(); 14StringWriter stringWriter = new StringWriter(); 15StreamResult streamResult = new StreamResult(stringWriter); 16DOMSource source = new DOMSource(document); 17transformer.transform(source, streamResult); 18stringWriter.close(); 19String metadataXML = stringWriter.toString();\n","permalink":"https://rasmusson.github.io/2012/02/generating-metadata-with-opensaml.html","tags":["SAML","OpenSAMLV3"],"title":"Generating metadata with OpenSAML"},{"categories":["OpenSAML"],"contents":"OpenSAML have several methods for reading and parsings SAML metadata.\nMeta data is loaded using providers. For example\nFilesystemMetadataProvider - Used to load data from a file on the filesystem HTTPMetadataProvider - Used to load data from an Internet address\nHere is an example on how to load meta data using the FilesystemMetadataProvider.\n1FilesystemMetadataProvider idpMetaDataProvider = new FilesystemMetadataProvider(new File(\u0026#34;path to file\u0026#34;)); 2idpMetaDataProvider.setRequireValidMetadata(true); 3idpMetaDataProvider.setParserPool(new BasicParserPool()); 4idpMetaDataProvider.initialize(); 5EntityDescriptor idpEntityDescriptor = idpMetaDataProvider.getEntityDescriptor(\u0026#34;Some entity id\u0026#34;); The EntityDescriptor can then be used to extract data from the metadata. Here are some examples on how to use it. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n     \nSSO services 1SingleSignOnService redirectEndpoint = null; 2for (SingleSignOnService sss : idpEntityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleSignOnServices()) { 3 if (sss.getBinding().equals(SAMLConstants.SAML2_REDIRECT_BINDING_URI)) { 4 redirectEndpoint = sss; 5 } 6} ArtifactResolutionService 1for (ArtifactResolutionService ars : idpEntityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS) 2 .getArtifactResolutionServices()) { 3 if (ars.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 4 artifactResolutionServiceURL = ars.getLocation(); 5 } 6} The objects of OpenSAML metadata follows the structure of the metadata XML, so if you look at the XML it pretty easy to figure out how to read it with OpenSAML.\n","permalink":"https://rasmusson.github.io/2012/02/reading-metadata-with-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Reading metadata with OpenSAML"},{"categories":["SAML"],"contents":"Metadata is information used in the SAML protocol to expose the configuration of a SAML entity, like a SP or IdP. Metadata define things like what service is available, addresses and certificates. Metadata is defined in XML. A SP uses the Metadata to know how to communicate with the IdP and vise versa.\nMetadata is exchanged beetween the SP and the IDP. There is no protocol how the exchange is done, but there are no secret information in the metadata so the XML can be freely distributed by mail or published in clear text on the Internet. It is however highly recommended that the metadata is protected from unauthorized modification, this could be a good start on a Man-In-The-Middle attack. The integrity of the Metadata could be protected using for example digital signatures or by transporting the metadata using some secure channel(USB, VPN etc)\nA metadata file for a SAML Web Browser SSO Profile IdP could for example contain the following.\n Location of its Single Sing On service, Artifact Resolution Service and Single Logout Service. An ID identifying the provider. Signature of the metadata and public keys for verifying and encrypting further communication.  The file usually include information about if the IdP want the communication signed or encrypted.\nA metadata file for the SP would contain pretty much the same but instead of Artifact Resolution Service have the location of its Assertion Consumer Service.\nMetadata could contain lots of other information. For a full description have a look at the SAML specifications\nHere is an example of metadata from IdP and SP. Usually these files can be generated by the application handling the SAML comunication.\nIdP 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;md:EntityDescriptor 3 xmlns:md=\u0026#34;urn:oasis:names:tc:SAML:2.0:metadata\u0026#34; 4 validUntil=\u0026#34;2021-05-14T14:40:17Z\u0026#34; 5 cacheDuration=\u0026#34;PT1621435217S\u0026#34; 6 entityID=\u0026#34;exampleidp\u0026#34; 7 ID=\u0026#34;pfx15f5264e-2c11-4717-9e15-b301b1d6bfd9\u0026#34;\u0026gt; 8 \u0026lt;ds:Signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 9 \u0026lt;ds:SignedInfo\u0026gt; 10 \u0026lt;ds:CanonicalizationMethod Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 11 \u0026lt;ds:SignatureMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;/\u0026gt; 12 \u0026lt;ds:Reference URI=\u0026#34;#pfx15f5264e-2c11-4717-9e15-b301b1d6bfd9\u0026#34;\u0026gt; 13 \u0026lt;ds:Transforms\u0026gt; 14 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;/\u0026gt; 15 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 16 \u0026lt;/ds:Transforms\u0026gt; 17 \u0026lt;ds:DigestMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;/\u0026gt; 18 \u0026lt;ds:DigestValue\u0026gt;GNLMMU8+ofuHdjn7Lef7drkEnNk=\u0026lt;/ds:DigestValue\u0026gt; 19 \u0026lt;/ds:Reference\u0026gt; 20 \u0026lt;/ds:SignedInfo\u0026gt; 21 \u0026lt;ds:SignatureValue\u0026gt; 22=============== Meta data signature ============= 23 \u0026lt;/ds:SignatureValue\u0026gt; 24 \u0026lt;ds:KeyInfo\u0026gt; 25 \u0026lt;ds:X509Data\u0026gt; 26 \u0026lt;ds:X509Certificate\u0026gt; 27=============== Public certificate for meta data signature ============= 28 \u0026lt;/ds:X509Certificate\u0026gt; 29 \u0026lt;/ds:X509Data\u0026gt; 30 \u0026lt;/ds:KeyInfo\u0026gt; 31 \u0026lt;/ds:Signature\u0026gt; 32 \u0026lt;md:IDPSSODescriptor 33 WantAuthnRequestsSigned=\u0026#34;false\u0026#34; 34 protocolSupportEnumeration=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 35 \u0026lt;md:KeyDescriptor use=\u0026#34;signing\u0026#34;\u0026gt; 36 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 37 \u0026lt;ds:X509Data\u0026gt; 38 \u0026lt;ds:X509Certificate\u0026gt; 39=============== SP public certificate for verifying signatures ============= 40 \u0026lt;/ds:X509Certificate\u0026gt; 41 \u0026lt;/ds:X509Data\u0026gt; 42 \u0026lt;/ds:KeyInfo\u0026gt; 43 \u0026lt;/md:KeyDescriptor\u0026gt; 44 \u0026lt;md:KeyDescriptor use=\u0026#34;encryption\u0026#34;\u0026gt; 45 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 46 \u0026lt;ds:X509Data\u0026gt; 47 \u0026lt;ds:X509Certificate\u0026gt; 48=============== SP public certificate for encrypting ============= 49 \u0026lt;/ds:X509Certificate\u0026gt; 50 \u0026lt;/ds:X509Data\u0026gt; 51 \u0026lt;/ds:KeyInfo\u0026gt; 52 \u0026lt;/md:KeyDescriptor\u0026gt; 53 \u0026lt;md:SingleLogoutService 54 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026#34; 55 Location=\u0026#34;https://exampleidp.com/idp/singleSignOnService\u0026#34;/\u0026gt; 56 \u0026lt;md:NameIDFormat\u0026gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\u0026lt;/md:NameIDFormat\u0026gt; 57 \u0026lt;md:SingleSignOnService 58 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026#34; 59 Location=\u0026#34;https://exampleidp.com/idp/singleSignOnService\u0026#34;/\u0026gt; 60 \u0026lt;/md:IDPSSODescriptor\u0026gt; 61\u0026lt;/md:EntityDescriptor\u0026gt; SP 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;md:EntityDescriptor 3 xmlns:md=\u0026#34;urn:oasis:names:tc:SAML:2.0:metadata\u0026#34; 4 validUntil=\u0026#34;2021-05-14T15:02:56Z\u0026#34; 5 cacheDuration=\u0026#34;PT604800S\u0026#34; 6 entityID=\u0026#34;TestSP\u0026#34; 7 ID=\u0026#34;pfx92d25019-cd26-c6ff-465b-0751318a302b\u0026#34;\u0026gt; 8 \u0026lt;ds:Signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 9 \u0026lt;ds:SignedInfo\u0026gt; 10 \u0026lt;ds:CanonicalizationMethod Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 11 \u0026lt;ds:SignatureMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;/\u0026gt; 12 \u0026lt;ds:Reference URI=\u0026#34;#pfx92d25019-cd26-c6ff-465b-0751318a302b\u0026#34;\u0026gt; 13 \u0026lt;ds:Transforms\u0026gt; 14 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;/\u0026gt; 15 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 16 \u0026lt;/ds:Transforms\u0026gt; 17 \u0026lt;ds:DigestMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;/\u0026gt; 18 \u0026lt;ds:DigestValue\u0026gt; 19=============== Meta data signature digest ============= 20 \u0026lt;/ds:DigestValue\u0026gt; 21 \u0026lt;/ds:Reference\u0026gt; 22 \u0026lt;/ds:SignedInfo\u0026gt; 23 \u0026lt;ds:SignatureValue\u0026gt; 24=============== Meta data signature ============= 25 \u0026lt;/ds:SignatureValue\u0026gt; 26 \u0026lt;ds:KeyInfo\u0026gt; 27 \u0026lt;ds:X509Data\u0026gt; 28 \u0026lt;ds:X509Certificate\u0026gt; 29=============== Public certificate for meta data signature ============= 30 \u0026lt;/ds:X509Certificate\u0026gt; 31 \u0026lt;/ds:X509Data\u0026gt; 32 \u0026lt;/ds:KeyInfo\u0026gt; 33 \u0026lt;/ds:Signature\u0026gt; 34 \u0026lt;md:SPSSODescriptor 35 AuthnRequestsSigned=\u0026#34;true\u0026#34; 36 WantAssertionsSigned=\u0026#34;true\u0026#34; 37 protocolSupportEnumeration=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 38 \u0026lt;md:KeyDescriptor use=\u0026#34;signing\u0026#34;\u0026gt; 39 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 40 \u0026lt;ds:X509Data\u0026gt; 41 \u0026lt;ds:X509Certificate\u0026gt; 42=============== IdP public certificate for verifying signatures ============= 43 \u0026lt;/ds:X509Certificate\u0026gt; 44 \u0026lt;/ds:X509Data\u0026gt; 45 \u0026lt;/ds:KeyInfo\u0026gt; 46 \u0026lt;/md:KeyDescriptor\u0026gt; 47 \u0026lt;md:KeyDescriptor use=\u0026#34;encryption\u0026#34;\u0026gt; 48 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 49 \u0026lt;ds:X509Data\u0026gt; 50 \u0026lt;ds:X509Certificate\u0026gt; 51=============== IdP public certificate for encrypting ============= 52 \u0026lt;/ds:X509Certificate\u0026gt; 53 \u0026lt;/ds:X509Data\u0026gt; 54 \u0026lt;/ds:KeyInfo\u0026gt; 55 \u0026lt;/md:KeyDescriptor\u0026gt; 56 \u0026lt;md:SingleLogoutService 57 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026#34; 58 Location=\u0026#34;https://examplesp.com/sp/artifactConsumer\u0026#34;/\u0026gt; 59 \u0026lt;md:NameIDFormat\u0026gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\u0026lt;/md:NameIDFormat\u0026gt; 60 \u0026lt;md:AssertionConsumerService 61 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\u0026#34; 62 Location=\u0026#34;https://examplesp.com/sp/artifactConsumer\u0026#34; 63 index=\u0026#34;1\u0026#34;/\u0026gt; 64 \u0026lt;/md:SPSSODescriptor\u0026gt; 65\u0026lt;/md:EntityDescriptor\u0026gt; ","permalink":"https://rasmusson.github.io/2012/02/saml-metadata.html","tags":["SAML"],"title":"SAML metadata"},{"categories":["OpenSAML"],"contents":"Creating SAML objects This is implementations of some of the methods in the SAMLUtil class referenced in other examples.\nOpenSAML has a bit struggling way to create SAML objects using a factory pattern.\nThe normal way to create a SAML object is like this.\n1XMLObjectBuilderFactory builderFactory = Configuration.getBuilderFactory(); 2 3Assertion assertion = (Assertion)builderFactory 4 .getBuilder(Assertion.DEFAULT_ELEMENT_NAME) 5 .buildObject(Assertion.DEFAULT_ELEMENT_NAME); Normally the default name of the class is used so it seams redundant to write this out all the time. With generics in JavaSE6 we can make this a lot easier.\n1public static \u0026lt;T\u0026gt; T createSAMLObject(final Class\u0026lt;T\u0026gt; clazz) { 2 XMLObjectBuilderFactory builderFactory = Configuration.getBuilderFactory(); 3 4 QName defaultElementName = (QName)clazz.getDeclaredField(\u0026#34;DEFAULT_ELEMENT_NAME\u0026#34;).get(null); 5 T object = (T)builderFactory.getBuilder(defaultElementName).buildObject(defaultElementName); 6 7return object; 8} By putting something like this in a utility class we can now create our SAML objects like this\n1Assertion assertion = UtilityClass.createSAMLObject(Assertion.class); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      Logging The ability to in a nice way log the raw SAML messages i also very important, so I created my own logging method in a utility class. But after using it for a while I learned that I don't have to.\nThe OpenSAML library uses the log4j logging framework. By setting the threshold level, of the OpenSAML package ,to debug in the log4j properties file, you get all of the SAML messages to and from your application in your log file. You also get other useful information, so log4j is definitely the way to go.\n","permalink":"https://rasmusson.github.io/2011/04/convenience-methods-for-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Convenience methods for OpenSAML"},{"categories":["OpenSAML"],"contents":"For all cryptographic functions OpenSAML requires a Credential which is a basically a cryptographic key wrapped in an object. The Credential can contain either an symmetric key or an asymmetric key not both. The Credential can be created manually with BasicX509Credential and BasicCredential classes and then populated with the setters. But the preferred way is to use on of the many CredentialResolvers to create the credential for you. I will now show some examples of how creating credentials using the basic classes and two different resolvers.\nThe Basic classes has methods like SetPublicKey SetSecretKey SetEntityCertificate SetPrivateKey\nBy setting this you can manually create credentials\n1BasicCredential credential = new BasicCredential(); 2credential.setPublicKey(myJCEPublicKey); 3credential.setPrivateKey(myJCEPrivateKey); 4credential.setUsageType(UsageType.SIGNING); And now you have a credential to use with signing. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      The credential resolvers can do things easier for you by helping to extract the keys from for example a java key store(JKS) or metadata.\n1KeyStore keystore; 2keystore = KeyStore.getInstance(KeyStore.getDefaultType()); 3FileInputStream inputStream = new FileInputStream(\u0026#34;/path/to/my/JKS\u0026#34;); 4keystore.load(inputStream, \u0026#34;MyKeystorePassword\u0026#34;.toCharArray()); 5inputStream.close(); 6 7Map\u0026lt;String, String\u0026gt; passwordMap = new HashMap\u0026lt;String, String\u0026gt;(); 8passwordMap.put(\u0026#34;MyEntryID\u0026#34;), \u0026#34;MyEntryPassword\u0026#34;); 9KeyStoreCredentialResolver resolver = new KeyStoreCredentialResolver(keystore, passwordMap); 10 11Criteria criteria = new EntityIDCriteria(\u0026#34;MyEntryID\u0026#34;); 12CriteriaSet criteriaSet = new CriteriaSet(criteria); 13 14X509Credential credential = (X509Credential)resolver.resolveSingle(criteriaSet);  ","permalink":"https://rasmusson.github.io/2011/03/getting-credentials-in-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Getting credentials in OpenSAML"},{"categories":["OpenSAML"],"contents":"In my case the, after the sign on at the IdP is completed, the user is redirected to my `Assertion Consumer Service URL defined in meta data. The IdP sends an artifact back as a parameter.The artifact is a label pointing to the actual user data/login information(the assertion) at the IdP. The user data is not sent in the HTTP request of security reasons. Instead the consumer servlet send a Artifact Resolve Request over a SOAP back channel to get the data.\nHere is an example of a servlet sending ArtifactResolveRequest and receiving an ArtifactResolveResponse.\n1private Envelope sendArtifactResolve(final ArtifactResolve artifactResolve) throws SOAPException, SecurityException, CertificateEncodingException, 2 MarshallingException, SignatureException, IllegalAccessException { 3 Envelope envelope = SAMLUtil.wrapInSOAPEnvelope(artifactResolve); 4 5 BasicSOAPMessageContext soapContext = new BasicSOAPMessageContext(); 6 soapContext.setOutboundMessage(envelope); 7 HttpClientBuilder clientBuilder = new HttpClientBuilder(); 8 HttpSOAPClient soapClient = new HttpSOAPClient(clientBuilder.buildClient(), new BasicParserPool()); 9 10 String artifactResolutionServiceURL = null; 11 for (ArtifactResolutionService ars : SAMLMetaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS) 12 .getArtifactResolutionServices()) { 13 if (ars.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 14 artifactResolutionServiceURL = ars.getLocation(); 15 } 16 } 17 18 soapClient.send(artifactResolutionServiceURL, soapContext); 19 20 return (Envelope)soapContext.getInboundMessage(); 21} 22 23private ArtifactResolve generateArtifactResolve(final String artifactString) throws CertificateEncodingException, MarshallingException, SignatureException, IllegalArgumentException, java.lang.SecurityException, IllegalAccessException { 24 ArtifactResolve artifactResolve = SAMLUtil.buildSAMLObjectWithDefaultName(ArtifactResolve.class); 25 26 Issuer issuer = SAMLUtil.buildSAMLObjectWithDefaultName(Issuer.class); 27 issuer.setValue(EvoteProperties.getProperty(\u0026#34;SPEntityId\u0026#34;)); 28 artifactResolve.setIssuer(issuer); 29 artifactResolve.setIssueInstant(new DateTime()); 30 31 artifactResolveId = SAMLUtil.getSecureRandomIdentifier(); 32 artifactResolve.setID(artifactResolveId); 33 34 for (ArtifactResolutionService sss : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getArtifactResolutionServices()) { 35 if (sss.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 36 artifactResolve.setDestination(sss.getLocation()); 37 } 38 } 39 40 Artifact artifact = SAMLUtil.buildSAMLObjectWithDefaultName(Artifact.class); 41 artifact.setArtifact(artifactString); 42 artifactResolve.setArtifact(artifact); 43 44 return artifactResolve; 45 } Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      ArtifactResolveRequest sent: 1\u0026lt;saml2p:artifactresolve 2 destination=\u0026#34;http://myIDP.test.com:80/opensso/ArtifactResolver/metaAlias/idp1\u0026#34; 3 id=\u0026#34;_586f2345b514f6214b511f389e30ef60\u0026#34; 4 issueinstant=\u0026#34;2011-01-24T08:47:52.895Z\u0026#34; 5 version=\u0026#34;2.0\u0026#34; 6 xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 7 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 8 my-alias 9 \u0026lt;/saml2:issuer\u0026gt; 10 \u0026lt;saml2p:artifact\u0026gt; 11 AAQAAKHWNqF94IiJ1SjFRLxjyBBxq3RIkRN7/tJdnT2sFDU1tUtBRKJQMDE= 12 \u0026lt;/saml2p:artifact\u0026gt; 13\u0026lt;/saml2p:artifactresolve\u0026gt; This is the resulting ArtifactResponse in my case: 1\u0026lt;samlp:artifactresponse 2 destination=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34; 3 id=\u0026#34;s2df8548d497d8c779a1abddfad72adda2f06eefdd\u0026#34; 4 inresponseto=\u0026#34;_586f2345b514f6214b511f389e30ef60\u0026#34; 5 issueinstant=\u0026#34;2011-01-24T08:47:53Z\u0026#34; 6 version=\u0026#34;2.0\u0026#34; 7 xmlns:samlp=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 8 \u0026lt;saml:issuer xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 9 IDP-alias 10 \u0026lt;/saml:issuer\u0026gt; 11 \u0026lt;samlp:status\u0026gt; 12 \u0026lt;samlp:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;\u0026gt; 13 \u0026lt;/samlp:statuscode\u0026gt; 14 \u0026lt;/samlp:status\u0026gt; 15 \u0026lt;samlp:response 16 destination=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34; 17 id=\u0026#34;s23a356af812e879b3bfbbded4b62f000c7c8c27bb\u0026#34; 18 inresponseto=\u0026#34;_bba7e8a2f7a7c51e339d614b2c2d1178\u0026#34; 19 issueinstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 20 version=\u0026#34;2.0\u0026#34;\u0026gt; 21 \u0026lt;saml:issuer xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 22 IDP-alias 23 \u0026lt;/saml:issuer\u0026gt; 24 \u0026lt;samlp:status\u0026gt; 25 \u0026lt;samlp:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;\u0026gt; 26 \u0026lt;/samlp:statuscode\u0026gt; 27 \u0026lt;/samlp:status\u0026gt; 28 \u0026lt;saml:assertion 29 id=\u0026#34;s2365479533bf942f8eaaa2c267f9bd4ff679ebc1f\u0026#34; 30 issueinstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 31 version=\u0026#34;2.0\u0026#34; 32 xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 33 \u0026lt;saml:issuer\u0026gt; 34 IDP-alias 35 \u0026lt;/saml:issuer\u0026gt; 36 \u0026lt;saml:subject\u0026gt; 37 \u0026lt;saml:nameid 38 format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; 39 namequalifier=\u0026#34;IDP-alias\u0026#34; 40 spnamequalifier=\u0026#34;my-alias\u0026#34;\u0026gt; 41 5VkzP/MZ1PMJ62o45/7DdFms9y7K 42 \u0026lt;/saml:nameid\u0026gt; 43 \u0026lt;saml:subjectconfirmation method=\u0026#34;urn:oasis:names:tc:SAML:2.0:cm:bearer\u0026#34;\u0026gt; 44 \u0026lt;saml:subjectconfirmationdata 45 inresponseto=\u0026#34;_bba7e8a2f7a7c51e339d614b2c2d1178\u0026#34; 46 notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34; 47 recipient=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34;\u0026gt; 48 \u0026lt;/saml:subjectconfirmationdata\u0026gt; 49 \u0026lt;/saml:subjectconfirmation\u0026gt; 50 \u0026lt;/saml:subject\u0026gt; 51 \u0026lt;saml:conditions 52 notbefore=\u0026#34;2011-01-24T08:37:50Z\u0026#34; 53 notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34;\u0026gt; 54 \u0026lt;saml:audiencerestriction\u0026gt; 55 \u0026lt;saml:audience\u0026gt; 56 my-alias 57 \u0026lt;/saml:audience\u0026gt; 58 \u0026lt;/saml:audiencerestriction\u0026gt; 59 \u0026lt;/saml:conditions\u0026gt; 60 \u0026lt;saml:authnstatement 61 authninstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 62 sessionindex=\u0026#34;s212cd7811734a92405b6ef8308a1b1a98e32e6f01\u0026#34;\u0026gt; 63 \u0026lt;saml:authncontext\u0026gt; 64 \u0026lt;saml:authncontextclassref\u0026gt; 65 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 66 \u0026lt;/saml:authncontextclassref\u0026gt; 67 \u0026lt;/saml:authncontext\u0026gt; 68 \u0026lt;/saml:authnstatement\u0026gt; 69 \u0026lt;saml:attributestatement\u0026gt; 70 \u0026lt;saml:attribute name=\u0026#34;uid\u0026#34;\u0026gt; 71 \u0026lt;saml:attributevalue 72 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 73 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 74 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 75 03011700143 76 \u0026lt;/saml:attributevalue\u0026gt; 77 \u0026lt;/saml:attribute\u0026gt; 78 \u0026lt;saml:attribute name=\u0026#34;mail\u0026#34;\u0026gt; 79 \u0026lt;saml:attributevalue 80 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 81 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 82 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 83 something@test.com 84 \u0026lt;/saml:attributevalue\u0026gt; 85 \u0026lt;/saml:attribute\u0026gt; 86 \u0026lt;saml:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 87 \u0026lt;saml:attributevalue 88 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 89 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 90 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 91 546848134886 92 \u0026lt;/saml:attributevalue\u0026gt; 93 \u0026lt;/saml:attribute\u0026gt; 94 \u0026lt;/saml:attributestatement\u0026gt; 95 \u0026lt;/saml:assertion\u0026gt; 96 \u0026lt;/samlp:response\u0026gt; 97\u0026lt;/samlp:artifactresponse\u0026gt;\n","permalink":"https://rasmusson.github.io/2011/02/resolve-artifact-with-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Resolve an artifact with OpenSAML"},{"categories":["OpenSAML"],"contents":"To logout an user from the SP an LogoutRequest is sent. The data needed about the user is the SessionIndex and NameID from the data recived at login. I my case in the Assertion in the Artifact Resolve Response.\n1//IPR Ergogroup AS 2public static void doSynchronousLogout(final HttpSession sessionToLogout, final SAMLMetaData metaData) throws SOAPException, SecurityException, ValidationException, IllegalArgumentException, java.lang.SecurityException, IllegalAccessException, MarshallingException, SignatureException { 3 NameID nameId = (NameID)sessionToLogout.getAttribute(\u0026#34;SAMLNameID\u0026#34;); 4 String sessionIndex = (String)sessionToLogout.getAttribute(\u0026#34;SAMLSessionIndex\u0026#34;); 5 6 Body body = buildSAMLObjectWithDefaultName(Body.class); 7 8 LogoutRequest logoutRequest = genererateLogoutRequest(nameId, sessionIndex, metaData); 9 signLogoutRequest(logoutRequest); 10 body.getUnknownXMLObjects().add(logoutRequest); 11 nameId.detach(); 12 Envelope envelope = buildSAMLObjectWithDefaultName(Envelope.class); 13 envelope.setBody(body); 14 15 SAMLUtil.logSAMLObject(envelope); 16 17 BasicSOAPMessageContext soapContext = new BasicSOAPMessageContext(); 18 19 soapContext.setOutboundMessage(envelope); 20 21 HttpClientBuilder clientBuilder = new HttpClientBuilder(); 22 23 HttpSOAPClient soapClient = new HttpSOAPClient(clientBuilder.buildClient(), new BasicParserPool()); 24 25 String sloServiceURL = null; 26 for (SingleLogoutService sls : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices()) { 27 if (sls.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 28 sloServiceURL = sls.getLocation(); 29 } 30 } 31 soapClient.send(sloServiceURL, soapContext); 32 33 Envelope soapResponse = (Envelope)soapContext.getInboundMessage(); 34 35 SAMLUtil.logSAMLObject(soapResponse); 36 37 validateSLOResponse(soapResponse, logoutRequest.getID()); 38 verifySLOResponseSignature(soapResponse); 39 processSLOResponse(soapResponse); 40 41} 42 43 44private static LogoutRequest genererateLogoutRequest(final NameID nameId, final String sessionIndex, final SAMLMetaData metaData) throws IllegalArgumentException, java.lang.SecurityException, IllegalAccessException { 45 LogoutRequest logoutRequest = buildSAMLObjectWithDefaultName(LogoutRequest.class); 46 47 logoutRequest.setID(SAMLUtil.getSecureRandomIdentifier()); 48 49 for (SingleLogoutService sls : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices()) { 50 if (sls.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 51 logoutRequest.setDestination(sls.getLocation()); 52 } 53 } 54 55 logoutRequest.setIssueInstant(new DateTime()); 56 57 Issuer issuer = buildSAMLObjectWithDefaultName(Issuer.class); 58 issuer.setValue(EvoteProperties.getProperty(\u0026#34;SPEntityId\u0026#34;)); 59 logoutRequest.setIssuer(issuer); 60 61 SessionIndex sessionIndexElement = buildSAMLObjectWithDefaultName(SessionIndex.class); 62 63 sessionIndexElement.setSessionIndex(sessionIndex); 64 logoutRequest.getSessionIndexes().add(sessionIndexElement); 65 66 logoutRequest.setNameID(nameId); 67 return logoutRequest; 68} Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      LogoutRequest sent:\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;saml2p:logoutrequest xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; destination=\u0026#34;http://myIDP.test.com:80/opensso/IDPSloSoap/metaAlias/idp1\u0026#34; id=\u0026#34;_b39909314c537670d58b60136d98ce5f\u0026#34; issueinstant=\u0026#34;2011-01-20T18:57:09.144Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 3 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt;my-alias 4\u0026lt;/saml2:issuer\u0026gt; 5 \u0026lt;ds:signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 6 \u0026lt;ds:signedinfo\u0026gt; 7 \u0026lt;ds:canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 8 \u0026lt;ds:signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 9 \u0026lt;ds:reference uri=\u0026#34;#_b39909314c537670d58b60136d98ce5f\u0026#34;\u0026gt; 10 \u0026lt;ds:transforms\u0026gt; 11 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 12 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 13\t\u0026lt;/ds:transform\u0026gt; 14 \u0026lt;/ds:transform\u0026gt; 15 \u0026lt;/ds:transforms\u0026gt; 16 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;\u0026gt; 17 \u0026lt;ds:digestvalue\u0026gt;Sn7qX8Yf4Pcs6SLl4Yn0NyEx6P0=\u0026lt;/ds:digestvalue\u0026gt; 18 \u0026lt;/ds:digestmethod\u0026gt; 19 \u0026lt;/ds:reference\u0026gt; 20 \u0026lt;/ds:signaturemethod\u0026gt; 21 \u0026lt;/ds:canonicalizationmethod\u0026gt; 22 \u0026lt;/ds:signedinfo\u0026gt; 23 \u0026lt;ds:signaturevalue\u0026gt;cE3wgjeM+45uk/XVNQl+1NZKeRwRzFnJN9xaL/36vnXqu6eLBqs8eqdQ2a+yY9UkZz0gU1NrTqUMQgIANw1WfkL2a+sxQqqu2p4ggXKNwHiMWbyfPEUkxQM4wSwr3ECObjyVqrgPDA+4TiDyqPj2NBtZGo8WU3fvpOGQkQN19f0=\u0026lt;/ds:signaturevalue\u0026gt; 24 \u0026lt;ds:keyinfo xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemalocation=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 25 \u0026lt;ds:x509data\u0026gt; 26 \u0026lt;ds:x509certificate\u0026gt;CERT/ds:x509certificate\u0026gt; 27 \u0026lt;/ds:x509data\u0026gt; 28 \u0026lt;/ds:keyinfo\u0026gt; 29 \u0026lt;/ds:signature\u0026gt; 30 \u0026lt;saml:nameid xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; namequalifier=\u0026#34;idporten\u0026#34; spnamequalifier=\u0026#34;steras-idporten\u0026#34;\u0026gt;puEYi51x6aylfgXbBJTLSTTxOqck\u0026lt;/saml:nameid\u0026gt; 31 \u0026lt;saml2p:sessionindex\u0026gt;s2ce6f528812bbf545358af381cc864c575e9cb901\u0026lt;/saml2p:sessionindex\u0026gt; 32\u0026lt;/saml2p:logoutrequest\u0026gt; This is the resulting LogoutResponse in my case:\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 3\u0026lt;samlp:logoutresponse xmlns:samlp=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; id=\u0026#34;sbf42f25f0d38af69316533b7b3ea46d509585e32\u0026#34; inresponseto=\u0026#34;_b39909314c537670d58b60136d98ce5f\u0026#34; issueinstant=\u0026#34;2011-01-20T18:57:09Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 4 \u0026lt;saml:issuer xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt;idp-alias 5\u0026lt;/saml:issuer\u0026gt; 6 \u0026lt;signature xmlns=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 7 \u0026lt;signedinfo\u0026gt; 8 \u0026lt;canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 9 \u0026lt;signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 10 \u0026lt;reference uri=\u0026#34;#sbf42f25f0d38af69316533b7b3ea46d509585e32\u0026#34;\u0026gt; 11 \u0026lt;transforms\u0026gt; 12 \u0026lt;transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 13 \u0026lt;transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 14\t\u0026lt;/transform\u0026gt; 15 \u0026lt;/transform\u0026gt; 16 \u0026lt;/transforms\u0026gt; 17 \u0026lt;digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;\u0026gt; 18 \u0026lt;digestvalue\u0026gt;CDFFLlD2FX8fjlPJLKpJZRusnx0=\u0026lt;/digestvalue\u0026gt; 19 \u0026lt;/digestmethod\u0026gt; 20 \u0026lt;/reference\u0026gt; 21 \u0026lt;/signaturemethod\u0026gt; 22 \u0026lt;/canonicalizationmethod\u0026gt; 23 \u0026lt;/signedinfo\u0026gt; 24 \u0026lt;signaturevalue\u0026gt; 25cKgVEfLR48x7urpH+TV+V1gHYnVhc/ErkMhwp17rjAMfjHKHk0EPgH2+aOV7Z83udbfr0RPKF5Zd 26Mg0zq1KIm29RsqUsUYNKKNiYPlEkBIoHPcc2AhftpA/VNRjea7q2W9+y6XV2YWjzGnArrfflv1KM 271t5C89Vz/VB0jQdJvMU= 28\u0026lt;/signaturevalue\u0026gt; 29 \u0026lt;/signature\u0026gt; 30 \u0026lt;samlp:status\u0026gt; 31 \u0026lt;samlp:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;\u0026gt; 32\u0026lt;/samlp:statuscode\u0026gt; 33 \u0026lt;samlp:statusmessage\u0026gt; 34Request is done successfully 35\u0026lt;/samlp:statusmessage\u0026gt; 36 \u0026lt;/samlp:status\u0026gt; 37\u0026lt;/samlp:logoutresponse\u0026gt; ","permalink":"https://rasmusson.github.io/2011/02/single-log-out-with-opensaml.html","tags":["SAML","OpenSAMLV2"],"title":"Single Log Out with OpenSAML"},{"categories":["OpenSAML"],"contents":"In this post I will show you how to start the SAML Single sign-on process by sending a authentication request using OpenSAML. The process starts with a redirect from the SP(The one wanting to authenticate someone) to the IdP(The one authenticating). To start the authentication the SP sends a SAML AuthnRequest as parameter in the redirect. The AuthnRequest message identifies the SP and can contain information about how the SP wants the user to be authenticated. Here is an example how to send the AuthnRequest using OpenSAML. The example uses the HTTPRedirectDeflateEncoder to encode, sign and redirect which makes everything way easier, especially considering encoding and signing. 1//IPR Ergogroup AS 2public void doAuthenticationRedirect(final HttpServletResponse response, final HttpSession currentSession, final String gotoURL, final SAMLMetaData metaData) throws IllegalArgumentException, SecurityException, IllegalAccessException { 3 AuthnRequest authnRequest = generateAuthnRequest(metaData); 4 5 SAMLUtil.logSAMLObject(authnRequest); 6 7 // Save the request ID to session for future validation 8 currentSession.setAttribute(\u0026#34;AuthnRequestID\u0026#34;, authnRequest.getID()); 9 currentSession.setAttribute(\u0026#34;goto\u0026#34;, gotoURL); 10 11 HttpServletResponseAdapter responseAdapter = new HttpServletResponseAdapter(response, true); 12 BasicSAMLMessageContext\u0026lt;SAMLObject, AuthnRequest, SAMLObject\u0026gt; context = new BasicSAMLMessageContext\u0026lt;SAMLObject, AuthnRequest, SAMLObject\u0026gt;(); 13 context.setPeerEntityEndpoint(getEndpointFromMetaData()); 14 context.setOutboundSAMLMessage(authnRequest); 15 context.setOutboundSAMLMessageSigningCredential(getSigningCredential()); 16 context.setOutboundMessageTransport(responseAdapter); 17 18 HTTPRedirectDeflateEncoder encoder = new HTTPRedirectDeflateEncoder(); 19 20 try { 21 encoder.encode(context); 22 } catch (MessageEncodingException e) { 23 logger.error(e.getMessage(), e); 24 } 25 } 26 27 private AuthnRequest generateAuthnRequest(final SAMLMetaData metaData) throws IllegalArgumentException, SecurityException, IllegalAccessException { 28 29 AuthnRequest authnRequest = SAMLUtil.buildSAMLObjectWithDefaultName(AuthnRequest.class); 30 31 authnRequest.setForceAuthn(true); 32 authnRequest.setIsPassive(false); 33 authnRequest.setIssueInstant(new DateTime()); 34 for (SingleSignOnService sss : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleSignOnServices()) { 35 if (sss.getBinding().equals(SAMLConstants.SAML2_REDIRECT_BINDING_URI)) { 36 authnRequest.setDestination(sss.getLocation()); 37 } 38 } 39 authnRequest.setProtocolBinding(SAMLConstants.SAML2_ARTIFACT_BINDING_URI); 40 41 String deployURL = getDeployURL(); 42 if (deployURL.charAt(deployURL.length() - 1) == \u0026#39;/\u0026#39;) { 43 deployURL = deployURL.substring(0, deployURL.length() - 1); 44 } 45 authnRequest.setAssertionConsumerServiceURL(deployURL + SAMLMetaData.CONSUMER_PATH); 46 47 authnRequest.setID(SAMLUtil.getSecureRandomIdentifier()); 48 49 Issuer issuer = SAMLUtil.buildSAMLObjectWithDefaultName(Issuer.class); 50 issuer.setValue(getSPEntityId()); 51 authnRequest.setIssuer(issuer); 52 53 NameIDPolicy nameIDPolicy = SAMLUtil.buildSAMLObjectWithDefaultName(NameIDPolicy.class); 54 nameIDPolicy.setSPNameQualifier(getSPEntityId()); 55 nameIDPolicy.setAllowCreate(true); 56 nameIDPolicy.setFormat(\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34;); 57 58 authnRequest.setNameIDPolicy(nameIDPolicy); 59 60 RequestedAuthnContext requestedAuthnContext = SAMLUtil.buildSAMLObjectWithDefaultName(RequestedAuthnContext.class); 61 requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.MINIMUM); 62 63 AuthnContextClassRef authnContextClassRef = SAMLUtil.buildSAMLObjectWithDefaultName(AuthnContextClassRef.class); 64 authnContextClassRef.setAuthnContextClassRef(\u0026#34;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\u0026#34;); 65 66 requestedAuthnContext.getAuthnContextClassRefs().add(authnContextClassRef); 67 authnRequest.setRequestedAuthnContext(requestedAuthnContext); 68 69 return authnRequest; 70 } Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n      Resulting AuthnRequest\n1\u0026lt;saml2p:authnrequest 2 assertionconsumerserviceurl=\u0026#34;https://mySP.test.com/saml/consumer\u0026#34; 3 destination=\u0026#34;http://myIDP.test.com:80/opensso/SSORedirect/metaAlias/idp\u0026#34; 4 forceauthn=\u0026#34;true\u0026#34; 5 id=\u0026#34;_07dfa23f929c647c0b4503e8c13a04f7\u0026#34; 6 ispassive=\u0026#34;false\u0026#34; 7 issueinstant=\u0026#34;2011-01-20T12:43:52.208Z\u0026#34; 8 protocolbinding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\u0026#34; 9 version=\u0026#34;2.0\u0026#34; 10 xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 11 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 12 my-alias 13 \u0026lt;/saml2:issuer\u0026gt; 14 \u0026lt;saml2p:nameidpolicy 15 allowcreate=\u0026#34;true\u0026#34; 16 format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; 17 spnamequalifier=\u0026#34;my-alias\u0026#34;\u0026gt; 18 \u0026lt;saml2p:requestedauthncontext comparison=\u0026#34;minimum\u0026#34;\u0026gt; 19 \u0026lt;saml2:authncontextclassref xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 20 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 21 \u0026lt;/saml2:authncontextclassref\u0026gt; 22 \u0026lt;/saml2p:requestedauthncontext\u0026gt; 23 \u0026lt;/saml2p:nameidpolicy\u0026gt; 24\u0026lt;/saml2p:authnrequest\u0026gt; ","permalink":"https://rasmusson.github.io/2011/01/redirect-with-authnrequest.html","tags":["SAML","OpenSAMLV2"],"title":"Redirect with AuthnRequest"},{"categories":["SAML"],"contents":"The past few weeks I’ve been trying to understand how the SAML protocol works. I’m planing to write a couple of posts about SAML in the future so first, here is a short introduction in SAML.\nSAML is “an XML framework for exchanging authentication and authorization information.”\nSo basically its a big XML schema.\nSAML is built up of four main specifications. Assertions, protocols, bindings and profiles.\nAssertions, the information This is the actual information being sent, such as credentials, profile information and authorization decisions.\n1\u0026lt;saml:Assertion xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; ID=\u0026#34;560f83e350ff2cabfa02345ee59153ba\u0026#34; IssueInstant=\u0026#34;2010-11-22T14:30:30.728Z\u0026#34; Version=\u0026#34;2.0\u0026#34;\u0026gt; 2 \u0026lt;saml:Issuer\u0026gt;me\u0026lt;/saml:Issuer\u0026gt; 3 \u0026lt;saml:Subject\u0026gt; 4 \u0026lt;saml:NameID\u0026gt;harold_dt\u0026lt;/saml:NameID\u0026gt; 5 \u0026lt;/saml:Subject\u0026gt; 6 \u0026lt;saml:AuthnStatement AuthnInstant=\u0026#34;2010-11-04T14:04:30Z\u0026#34; SessionIndex=\u0026#34;s22428b07e56ce0dbd3f72237ce29c585541db5d01\u0026#34;\u0026gt; 7 \u0026lt;saml:AuthnContext\u0026gt; 8 \u0026lt;saml:AuthnContextClassRef\u0026gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 9 \u0026lt;/saml:AuthnContextClassRef\u0026gt; 10 \u0026lt;/saml:AuthnContext\u0026gt; 11 \u0026lt;/saml:AuthnStatement\u0026gt; 12\u0026lt;/saml:Assertion\u0026gt; \u0026lt;saml:Issuer\u0026gt; The entity sending the assertion. \u0026lt;saml:Subject\u0026gt; The identity the assertion is about \u0026lt;saml:NameID\u0026gt; The identities unique identifier \u0026lt;saml:AuthnStatement\u0026gt; Authentication information, here only authentication method, PasswordProtectedTransport. Aka login was don with username and password.\nProtocol, processing Is a packaging of the assertions that defines how the assertion should be creates and processed\nBinding, the transport Defines how the messages are transported in a standard communication protocol for example SOAP, ie wrapping an assertion in a SOAP envelope.\n1\u0026lt;soap-env:Envelope xmlns:soap-env=\u0026#34;http://schemas.xmlsoap.org/soap/envelope/\u0026#34;\u0026gt; 2 \u0026lt;soap-env:Body\u0026gt; 3 \u0026lt;!-- Assertion --\u0026gt; 4 \u0026lt;/soap-env:Body\u0026gt; 5\u0026lt;/soap-env:Envelope\u0026gt; Profiles, putting it together The profiles define describes on a higher level how the different parts should be used to solve a task. For example the Web browser profile describes how authentications is done from a web browser.\nFor detailed information on the SAML protocol have a look at the different documents from OASIS here\nThe management and technical overviews are good next steps\nManagement Overview\nTechnical Overview\nTo really dig in deep have a look at the raw SAML specs here\n","permalink":"https://rasmusson.github.io/2010/11/short-introduction-to-saml.html","tags":["SAML"],"title":"A short introduction to SAML"},{"categories":null,"contents":"This is the first edition on the subject of OpenSAML and covers OpenSAML version 2. It will guide you trough the basics of Single Sing-on with SAML and how to set up a Service Provider using OpenSAML.\nThis book will give you\n A basic understanding of Single Sign-On with OpenSAML Running sample code to try things out A walk though of steps needed to implement SSO in OpenSAML Usage of popular bindings and usefull security features  ","permalink":"","tags":null,"title":"A Guide to OpenSAML V2"},{"categories":null,"contents":"This is my latest book on the subject of OpenSAML. It will guide you trough the basics of Single Sing-on with SAML and how to set up a Service Provider using OpenSAML.\nThis book will give you\n A basic understanding of Single Sign-On with OpenSAML A migration guide for migrating from OpenSAML V2 to V3 Running sample code to try things out A walk though of steps needed to implement SSO in OpenSAML Usage of popular bindings and useful security features  If you are looking for my previous book on OpenSAML V2 you will find it here.\n","permalink":"","tags":null,"title":"A Guide to OpenSAML V3"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` ... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] ```\n","permalink":"https://rasmusson.github.io/search/search/","tags":null,"title":"Search Results"}]