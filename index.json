[{"body":"","link":"https://blog.samlsecurity.com/","section":"","tags":null,"title":""},{"body":"","link":"https://blog.samlsecurity.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://blog.samlsecurity.com/tags/index/","section":"tags","tags":null,"title":"Index"},{"body":"","link":"https://blog.samlsecurity.com/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://blog.samlsecurity.com/tags/saml/","section":"tags","tags":null,"title":"SAML"},{"body":"","link":"https://blog.samlsecurity.com/categories/saml/","section":"categories","tags":null,"title":"SAML"},{"body":"In this post we will have a look on the uses and disadvantages of unsolicited responses in the context of SAML.\nSolicited and unsolicited responses So what is a solicited or unsolicited response? Simply put, a solicited response is a response you asked for, as opposed to a unsolicited response that arrives without you asking for it.\nIn the context of SAML, a unsolicited response is a SAML authentication response received from the IdP without the SP first having sent an authentication request.\nThis is allowed in SAML and is also known as IdP initiated authentication, as opposed to SP initiated authentication, when the SP initiated authentication by sending the authentication request.\nIn order to keep track of this in SAML, when the SP sends a request to the IdP, SP saves the Id of the request. When the IdP send the authentication response back includes the id for the request it responds to in a an attribute, InResponseTo\n1\u0026lt;samlp:Response xmlns:samlp=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; 2 ID=\u0026#34;de8b79c37092487aa7f9c5cb6c5a542a\u0026#34; 3 InResponseTo=\u0026#34;id-5PGmWNaR9dLIoTGOf\u0026#34; 4 Version=\u0026#34;2.0\u0026#34; 5 IssueInstant=\u0026#34;2023-12-02T13:17:14.765Z\u0026#34; 6 Destination=\u0026#34;http://localhost:5000/acs\u0026#34;\u0026gt; 7... 8\u0026lt;/samlp:Response\u0026gt; When the SP receives the response it verifies that the InResponseTo id in the response is the same as the request it sent, ensuring that the response is actually an response to the request that was sent.\nIn a IdP initiated authentication, the IdP start the authentication itself and send a ready SAML Response with the authenticated user without the SP asking for it.\nThis is a topic a dive deep into in my book on SAML. Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nCommon reasons to use unsolicited responses The reason to choose to use unsolicited response flow is often that it makes for a simple login flow for the user in some cases. Lets say that you have a IdP that acts as a kind of portal site, where users enter, login and then choose a app to use. And lets say these apps apps are SAML SPs. If using unsolicited response the IdP only need to create a SAML response and send it with the user when it is redirected to the chosen app.\nIf you where to use the normal request response flow here the user would first be redirected to the app, the redirected back to the IdP with a SAML request and lastly redirected back to the app again, now with a solicited SAML response.\nAnother reason this might be used is that because it allows the SP to be completely stateless as it does not need to save the request Ids while writing for for the SAML responses to com back.\nChallenges and Disadvantages of IdP-Initiated Authentication Cross-Site Request Forgery (XSRF) Vulnerability: IdP-initiated SSO is susceptible to XSRF attacks, where an attacker can trick a user into logging into the attacker’s account. For example, the attacker can post a valid SAML response to a public webpage, which is then used to trick users into logging into the attacker’s account. This vulnerability is mitigated in SP-initiated SSO, where the SP ensures that the authentication response corresponds to a specific request.\nDeep Linking Problems: Deep linking refers to linking directly to a specific resource on a website. With IdP-initiated SSO, if a user wants to access a specific page on the SP without being authenticated, the process becomes cumbersome. The user must first authenticate via the IdP and then navigate to the desired resource, often requiring custom modifications that undermine SAML’s standardization.\nInflexible Authentication Behavior: SP-initiated SSO allows the SP to specify various authentication requirements through the AuthnRequest. These can include user identifier formats, re-authentication requirements, and preferred authentication methods (e.g., MFA). IdP-initiated authentication lacks this flexibility, making it harder to enforce tailored security measures for different resources.\nConclusion While IdP-initiated authentication offers a straightforward approach, its disadvantages often outweigh its simplicity. The lack of standardization, susceptibility to XSRF attacks, issues with deep linking, and inflexible authentication behavior make SP-initiated SSO the preferred method. Nonetheless, understanding IdP-initiated authentication is essential for making informed decisions about your authentication strategy and mitigating potential risks when its use is unavoidable. Always strive to use SP-initiated authentication where possible to leverage its security and interoperability benefits.\n","link":"https://blog.samlsecurity.com/post/unsolicited-response/","section":"post","tags":["SAML"],"title":"Solicited and unsolicited responses in SAML"},{"body":"","link":"https://blog.samlsecurity.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://blog.samlsecurity.com/tags/pysaml/","section":"tags","tags":null,"title":"PySAML"},{"body":"PySAML2 is a powerful Python library designed to streamline the integration of the Security Assertion Markup Language (SAML) protocol into Python applications. As a widely used standard for exchanging authentication and authorization data between parties, SAML ensures secure and seamless user authentication across disparate systems.\nIn this quick tutorial we will look at the how to set up a simple SAML Service provider using PySAML to talk to mocksaml.dev as IdP.\nIntroduction First lets quickly look into some of the basics of SAML and PySAML.\nQuick recap on SAML SAML serves as a foundation for enabling Single Sign-On (SSO) capabilities, allowing users to access multiple applications through a single set of credentials. It facilitates secure exchanges of authentication and authorization data between an identity provider (IdP) and a service provider (SP).\nThe primary components of a SAML transaction include:\nIdentity Provider (IdP): Manages user identities and authentication processes. Service Provider (SP): Hosts the applications/services users want to access. The SP requests a user to be authenticated by the IdP and get a Authentication Response back as a proof authentication.\nHow PySAML2 Simplifies Authentication PySAML2 abstracts the complexities of SAML protocols, providing a Python-based framework to seamlessly integrate SAML-based authentication into applications. It empowers developers to:\nEffortlessly Implement SAML: With PySAML2, developers can focus on application logic while the library handles the intricate SAML protocol details. Enable Secure Authentication: Ensure secure and reliable authentication mechanisms, meeting the stringent security requirements of modern applications. Facilitate Interoperability: PySAML2 adheres to the SAML standard, ensuring compatibility and interoperability across various identity providers and service providers. Key Benefits of PySAML2 Robust Security Measures: PySAML2 incorporates robust security features, including encryption and digital signatures, to fortify authentication processes. Flexible Integration: Seamlessly integrate SAML-based authentication into Flask, Django, and other Python frameworks. Comprehensive Protocol Support: Support for SAML 2.0 and its various profiles, enabling comprehensive SSO capabilities. Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nDigging in The PySAML sample below is a minimal sample of a PySAML usage, with all the shortcuts, just to get PySAML up andd running as simple as possible so showcase it. For example\nNo signatures are done or required Unsolicited responses are allowed No encryption or anything All of this can pose security problems and should be addressed in anything used for more than a demo like this. Those topics is or will be covered in the rest of my series on PySAML.\nTo setup this small sample we will look att three parts of the typical PySAML application\nService configuration: the configuration defining the service PySAML is running. In this case the SP. Metadata: The metadata of the part we are talking to. In this case the mocksaml.dev IdP The python application code using PySAML Now PySAML it self does not itself handle any redirection of use or receiving of responses. It just does the base work of SAML. To make this a bit more of a complete sample I use flask to be the web server and handle this.\nPrerequisites Before digging in to PySAML2 into your Flask application, ensure you have the following prerequisites installed:\nFlask Framework: PySAML2 integrates seamlessly with Flask. Install Flask by running pip install flask. xmlsec1 Library: For cryptographic operations, install xmlsec1 based on your system requirements. On Ubuntu/Debian, use sudo apt-get install xmlsec1. PySAML itself: Install by running pip install pysaml2\nService configuration The first part we will look at here is the service configuration\n1from saml2.config import Config 2from saml2 import config as saml_config 3from saml2.saml import NAMEID_FORMAT_UNSPECIFIED 4 5# SP Configuration 6SP_CONFIG = { 7 \u0026#34;entityid\u0026#34;: \u0026#34;urn:example:sp\u0026#34;, 8 \u0026#34;service\u0026#34;: { 9 \u0026#34;sp\u0026#34;: { 10 \u0026#34;want_response_signed\u0026#34;: False, 11 \u0026#34;want_assertions_signed\u0026#34;: False, 12 \u0026#34;name_id_format\u0026#34;: NAMEID_FORMAT_UNSPECIFIED, 13 \u0026#34;endpoints\u0026#34;: { 14 \u0026#34;assertion_consumer_service\u0026#34;: [ 15 (\u0026#34;http://localhost:8000/acs\u0026#34;, saml_config.BINDING_HTTP_POST) 16 ] 17 }, 18 \u0026#34;allow_unsolicited\u0026#34;: True, 19 \u0026#34;require_signed_assertion\u0026#34;: False, 20 \u0026#34;require_signed_response\u0026#34;: False 21 } 22 23 }, 24 \u0026#34;metadata\u0026#34;: { 25 \u0026#34;local\u0026#34;: [\u0026#34;metadata.xml\u0026#34;] 26 } 27} The service configuration above shows a simple example of the configuration of the service run by PySAML. For simplicity and demoing we say that we don't want or require signing. 1\u0026#34;service\u0026#34;: { 2 \u0026#34;sp\u0026#34;: { 3 \u0026#34;want_response_signed\u0026#34;: False, 4 \u0026#34;want_assertions_signed\u0026#34;: False, 5... 6 \u0026#34;require_signed_assertion\u0026#34;: False, 7 \u0026#34;require_signed_response\u0026#34;: False, We also defines that it is ok with unsolicited responses. 1\u0026#34;allow_unsolicited\u0026#34;: True\nThe endpoint definition tells the IdP where to send the resulting authentication response 1\u0026#34;endpoints\u0026#34;: { 2 \u0026#34;assertion_consumer_service\u0026#34;: [ 3 (\u0026#34;http://localhost:8000/acs\u0026#34;, saml_config.BINDING_HTTP_POST) 4 ] 5}\nand we refer to our IdP Metadata in the metadata.xml explained in the next section. 1\u0026#34;metadata\u0026#34;: { 2 \u0026#34;local\u0026#34;: [\u0026#34;metadata.xml\u0026#34;] 3}\nIdP Metadata Next lets look at the IdP metadata describing the mocksaml IdP\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;md:EntityDescriptor xmlns:md=\u0026#34;urn:oasis:names:tc:SAML:2.0:metadata\u0026#34; cacheDuration=\u0026#34;PT1701351683S\u0026#34; entityID=\u0026#34;samlmock.dev\u0026#34;\u0026gt; 3 \u0026lt;md:IDPSSODescriptor WantAuthnRequestsSigned=\u0026#34;false\u0026#34; protocolSupportEnumeration=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 4 \u0026lt;md:NameIDFormat\u0026gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\u0026lt;/md:NameIDFormat\u0026gt; 5 \u0026lt;md:SingleSignOnService Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026#34; Location=\u0026#34;https://samlmock.dev/idp\u0026#34;/\u0026gt; 6 \u0026lt;/md:IDPSSODescriptor\u0026gt; 7\u0026lt;/md:EntityDescriptor\u0026gt; The XML above shows a typical example of a simple metadata for a IdP. The IdP, in this case accepts authentication requests that are not signed, do for simplicity's sake we use a metadata without keys and with the attribute 1WantAuthnRequestsSigned=\u0026#34;false\u0026#34;, that states that the IdP does not want it singed.\nOther than that it mainly says that the binding HTTP Redirect should be used to send the authentication request.\nApplication code Now finally lets look at the application code doing the lifting\n1from sp_config import SP_CONFIG 2 3config = saml_config.Config() 4config.load(SP_CONFIG) 5app = Flask(__name__) 6sp = Saml2Client(config=config) Some basic initiation. We loud our service configuration in SP_CONFIG and initiate a SAML2 client from it. Also initiate the flask app\n1@app.route(\u0026#39;/login\u0026#39;) 2def login(): 3 request_id, authn_request = sp.prepare_for_authenticate() 4 headers = dict(authn_request[\u0026#39;headers\u0026#39;]) 5 return redirect(headers[\u0026#39;Location\u0026#39;]) A simple endpoint in flask that creates the authentication response and then redirects the user to the IdP along with it.\n1@app.route(\u0026#39;/acs\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 2def acs(): 3 authn_response = sp.parse_authn_request_response(request.form[\u0026#39;SAMLResponse\u0026#39;], saml_config.BINDING_HTTP_POST) 4 print(authn_response) 5 return redirect(\u0026#39;/success\u0026#39; if authn_response else \u0026#39;/error\u0026#39;) A flask endpoint acting as the Assertion Consumer Service, receiving the Authentication Response from IdP, when the user is sent back. The SAML Response is send as a form parameter in a POST request. The SAML response is printed to the console The user is then redirected to the success page\n1@app.route(\u0026#39;/success\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 2def success(): 3 return \u0026#34;\u0026lt;h1\u0026gt;Authentication successful!\u0026lt;/h1\u0026gt;\u0026#34; The final success page indicating that the user was successfully authenticated.\nAd Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nGet it on Github and try it out! The full sample code is available on Github at https://github.com/rasmusson/pysaml-samples under intro/\nJust clone it, run it, go nuts!\n1apt-get install xmlsec1 2pip install flask 3pip install pysaml2 4 5git clone https://github.com/rasmusson/pysaml-samples.git 6cd intro 7 8python sp_server.py ","link":"https://blog.samlsecurity.com/post/pysaml-intro/","section":"post","tags":["SAML","pySAML"],"title":"Quick first introduction to PySAML"},{"body":"","link":"https://blog.samlsecurity.com/categories/opensaml/","section":"categories","tags":null,"title":"OpenSAML"},{"body":"","link":"https://blog.samlsecurity.com/tags/opensaml4/","section":"tags","tags":null,"title":"OpenSAML4"},{"body":"In the best of worlds it's not often you need to look into the actual XML of a SAML message. In the real world however, when troubleshooting a problem, there is often leads to be found by looking at the XML of the SAML message.\nLets have a look on how to go about doing that in OpenSAML 4.\nFirst let's create a OpenSAML object so we have something to print.\n1AuthnRequest authnRequest = buildAuthnRequest(); 2 3private static AuthnRequest buildAuthnRequest() { 4\tAuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); 5\tauthnRequest.setIssueInstant(Instant.now()); 6\tauthnRequest.setDestination(MESSAGE_RECEIVER_ENDPOINT); 7\tauthnRequest.setProtocolBinding(SAMLConstants.SAML2_ARTIFACT_BINDING_URI); 8\tauthnRequest.setAssertionConsumerServiceURL(ASSERTION_CONSUMER_ENDPOINT); 9\tauthnRequest.setID(OpenSAMLUtils.generateSecureRandomId()); 10\tauthnRequest.setIssuer(buildIssuer()); 11\tauthnRequest.setNameIDPolicy(buildNameIdPolicy()); 12 13\treturn authnRequest; 14} 15 16private static NameIDPolicy buildNameIdPolicy() { 17\tNameIDPolicy nameIDPolicy = OpenSAMLUtils.buildSAMLObject(NameIDPolicy.class); 18\tnameIDPolicy.setAllowCreate(true); 19 20\tnameIDPolicy.setFormat(NameIDType.TRANSIENT); 21 22\treturn nameIDPolicy; 23} 24 25private static Issuer buildIssuer() { 26\tIssuer issuer = OpenSAMLUtils.buildSAMLObject(Issuer.class); 27\tissuer.setValue(ISSUER); 28 29\treturn issuer; 30} Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nNext, lets do the magic to convert the object to a string.\n1Marshaller out = XMLObjectProviderRegistrySupport.getMarshallerFactory().getMarshaller(authnRequest); 2out.marshall(authnRequest); 3Element element = authnRequest.getDOM(); 4String xmlString = SerializeSupport.prettyPrintXML(element); 5 6System.out.println(xmlString); In the snipped above this the OpenSAML XMLObjectProviderRegistrySupport is used to convert the OpenSAML object to a XML element. The OpenSAML SerializeSupport helper class is then used to format the element as a pretty printed indented string.\nGet it on Github! The full sample code is available on Github at https://github.com/rasmusson/OpenSAML-sample-code under opensaml-prettyprint\nJust clone it, run it, go nuts!\n1git clone https://github.com/rasmusson/OpenSAML-sample-code/ 2cd opensaml-prettyprint 3mvn compile exec:java -Dexec.mainClass=\u0026#34;no.steras.opensamlSamples.prettyprint.Prettyprint\u0026#34; The pretty printed object is printed to the console.\n","link":"https://blog.samlsecurity.com/post/prettyprint-opensaml/","section":"post","tags":["SAML","OpenSAML4"],"title":"Pretty printing OpenSAML Objects"},{"body":"Building on my blog on using SAML in a SPA lets dig into a problem many seem to encounter when using keycloak and which to have i more or less like a transparent broker or proxy for authentication.\nThe setup Lets take the setup in the post Authenticating a React SPA towards a SAML IdP as any example. This sets up a simple integration between a React Javascript SPA and a ADFS SAML IdP. As the React SPA does not talk SAML but OIDC, we are using Keycloak as a broker to translate between the two protocols.\nsequenceDiagram participant Application participant Keycloak SP participant ADFS IdP Application-\u003e\u003eKeycloak SP: OIDC request Keycloak SP-\u003e\u003eADFS IdP: SAML request ADFS IdP-\u003e\u003eKeycloak SP: SAML response Keycloak SP-\u003e\u003eApplication: OIDC response The problem Now if you don't do any special configuration of the Authentications flows of Keycloak, when a user authenticates for the first time, they will be asked to update their profile, on the \u0026quot;Update account information\u0026quot; page like the one below, before continuing to the service.\nIn many cases you do not want the user to se this dialog, but just be redirected straight to the service after authentication.\nAd Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nDisabling the \u0026quot;Update account information\u0026quot; page Under Authentication -\u0026gt; Flows in Keycloak admin, behaviors like this can be controlled. For this case we want to edit the \u0026quot;First Broker Login\u0026quot; flow. This controls different steps that is done when a user authenticated for the first time when using Keycloak as a broker.\nSelect \u0026quot;First broker login\u0026quot; flow and click disable for the first step named \u0026quot;Review Profile\u0026quot;\nTo configure the IdP redirection and disabling of the profile review in Keycloak CLI 1reviewProfileExecution=$(kcadm.sh get /authentication/flows/first%20broker%20login/executions -r oidcrealm | jq -r \u0026#39;.[] | (select(.alias == \u0026#34;review profile config\u0026#34;) | .requirement) |= \u0026#34;DISABLED\u0026#34; | select(.alias == \u0026#34;review profile config\u0026#34;)\u0026#39;) 2kcadm.sh update authentication/flows/first%20broker%20login/executions -r oidcrealm -f - \u0026lt;\u0026lt; EOF 3$reviewProfileExecution 4EOF\nAfter this user will be directed straight to the service without being shown the \u0026quot;\u0026quot; dialog.\n","link":"https://blog.samlsecurity.com/post/keycloak-transparent/","section":"post","tags":["SAML"],"title":"Disabling \"Update account information\" dialog when brokering using Keycloak"},{"body":"The SAML metadata XML in ADFS is exposed at this URL 1https://\u0026lt;your-adfs-server\u0026gt;/FederationMetadata/2007-06/FederationMetadata.xml\nThe ADFS Metadata is where the ADFS exposes all endpoint, certificates and other information needed by someone setting up a SAML integration with ADFS. ADFS exposes its Metadata XML on the URL mentioned above.\nTo export the SAML metadata XML to use when setting up your SAML integration with ADFS, simply browse to the URL and download the file.\nYou can also use something like wget or curl to obtain it.\n1wget https://\u0026lt;your-adfs-server\u0026gt;/FederationMetadata/2007-06/FederationMetadata.xml 1curl -O https://\u0026lt;your-adfs-server\u0026gt;/FederationMetadata/2007-06/FederationMetadata.xml Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\n","link":"https://blog.samlsecurity.com/post/matadata-location/","section":"post","tags":["SAML"],"title":"ADFS SAML Metadata URL"},{"body":" In this tutorial we will look at how to authenticate user from a typical SPA in React using a SAML IdP, in this case ADFS. This is done using a Keycloak server to act as a broker and translate between OIDC and SAML. I will show the necessary configuration needed and as a cherry on top show you how to automate the whole setup.\nThe problem with SAML in SPA in browser application “No, you can’t use SAML in a Single Page Application.”\n“SAML is old. Why don’t you just change to OIDC.”\nI have seen many questions on the subject and this is most often the kind of answers you find if you start looking around on how to let you users login to SAML IdP from SPAs like React or Angular.\nIt is true that you can't use SAML directly from the SPA running in the browser. This is because SAML relies heavily on public/private key pairs of the parties involved to do message signing and encryption and a SPA in the browser can not give the protection needed for these.\nSAML also involves other mechanisms like automatically posting forms that does not translate well to a in browser application.\nIn conclusion, SAML was not designed to be used for things like SPAs. It was designed for a classic, old school, thick backend server - client setup. OIDC on the other hand is a more modern protocol that fit this use case perfectly.\nHowever, the reality is that many organizations have relied on SAML for along time and it is not unusual to see this being the only supported protocol for the existing identity provider.\nBrokered authentication using Keycloak One way to solve this dilemma is to use a broker authentication pattern.\nInstead of just using OIDC or just using SAML, the SPA uses OIDC, the IdP uses SAML and we place Keycloak as a broker between to translate.\nsequenceDiagram participant Application participant Keycloak SP participant ADFS IdP Application-\u003e\u003eKeycloak SP: 1. OIDC request Keycloak SP-\u003e\u003eADFS IdP: 2. SAML request ADFS IdP-\u003e\u003eKeycloak SP: 3. SAML response Keycloak SP-\u003e\u003eApplication: 4. OIDC response The SPA in the browser redirects the user with an OIDC request to Keycloak Keycloak receives the user and request, crafts a SAML request and send it and the user to ADFS IdP for authentication Ones the user is authenticated ADFS send a SAML response and user back to Keycloak. Keycloak receives the SAML response, interprets it and uses it to craft a OIDC response and respond to the original OIDC request from the React SPA. Setting it up When I prepared this, I created configuration and scripts in Vagrant to set up the a demo environment automatically. The automated setup is available here on Github. At the end of the article I have some more information on how to use it.\nWhile walking through the configuration I will show how to configure everything in the UI interfaces as well as using the command line.\nBelow we will look on the four steps needed\nSetting up Keycloak to use OIDC towards React SPA Setting up the React demo application SAML integration between ADFS and Keycloak Configure brokering between OIDC and SAML Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nSetting up Keycloak to use OIDC towards React SPA Provided you have set up your Keycloak, lets dive in and configure OIDC!\nBrowse to https://keycloak:8443/auth/admin/ and login as admin.\nCreate a realm for the OIDC integration\nCreate a client for the React SPA. On the first screen, just input a name for the client and click create.\nOn this next screen add a redirect URL for your SPA. In my case Im setting up a demo React app below with redirect URL \u0026quot;http://react:3000\u0026quot;\nUnder Web Origins, type a plus sign. Do not click the plus sign, but type a plus sign in the field. This will add all your redirect URLs in allowed origins and avoid CORS problems.\nNow lets configure the client to use PKCE. This is best practice when working with SPAs and other applications that can not protect a secret key.\nMake sure \u0026quot;Access Type\u0026quot; is set to public and that \u0026quot;Standard Flow Enabled\u0026quot; is set to On.\nNext expand the Advanced settings and set \u0026quot;Proof Key for Code Exchange Code Challenge Method\u0026quot; to S256\nTo do this using the Keycloak CLI 1kcadm.sh create realms -s realm=oidcrealm -s enabled=true 2 3kcadm.sh create clients -r oidcrealm -f - \u0026lt;\u0026lt; EOF 4{\u0026#34;clientId\u0026#34; : \u0026#34;oidc-client\u0026#34;, \u0026#34;redirectUris\u0026#34;: [\u0026#34;http://react:3000\u0026#34;], \u0026#34;webOrigins\u0026#34;: [\u0026#34;+\u0026#34;], \u0026#34;standardFlowEnabled\u0026#34;: true, \u0026#34;publicClient\u0026#34;: true, \u0026#34;attributes\u0026#34;: {\u0026#34;pkce.code.challenge.method\u0026#34;:\u0026#34;S256\u0026#34;}} 5EOF\nSetting up the React demo application Now its time to configure the React application to authenticate users using OIDC. In this tutorial I'm using my own OIDC demo app. The application is available here on Github How to set up another app will vary depending on what framework you are using, but you will need to get and configure the OIDC endpoint for Keycloak. For our current setup the endpoint will be these\nauthorizeEndpoint: https://keycloak:8443/auth/realms/oidcrealm/protocol/openid-connect/auth tokenEndpoint: https://keycloak:8443/auth/realms/oidcrealm/protocol/openid-connect/token logoutEndpoint: https://keycloak:8443/auth/realms/oidcrealm/protocol/openid-connect/logout To configure the React demo app, clone the repo and run npm install.\n1git clone https://github.com/rasmusson/react-oidc-pkce-demo 2cd react-oidc-pkce-demo 3npm install Now open src/SecuredApp.js and edit the configuration in AuthService to match your endpoints, client name and redirect URI. In our case it will look like this.\n1const authService = new AuthService({ 2 clientId: \u0026#39;oidc-client\u0026#39;, 3 authorizeEndpoint: \u0026#39;https://keycloak:8443/auth/realms/oidcrealm/protocol/openid-connect/auth\u0026#39;, 4 tokenEndpoint: \u0026#39;https://keycloak:8443/auth/realms/oidcrealm/protocol/openid-connect/token\u0026#39;, 5 logoutEndpoint: \u0026#39;https://keycloak:8443/auth/realms/oidcrealm/protocol/openid-connect/logout\u0026#39;, 6 redirectUri: \u0026#39;http://react:3000\u0026#39;, 7 scopes: [\u0026#39;openid\u0026#39;], 8}); Next start the React app\n1npm start To test that the OIDC integration works fine, lets create a test user in Keycloak and authenticate.\nSave and then, set a password for the user as below\nI disable temporary password as this is for demo purposes.\nTo create the test user using Keycloak CLI 1kcadm.sh create users -r oidcrealm -s username=test -s enabled=true -o --fields id,username 2kcadm.sh set-password -r oidcrealm --username test --new-password test\nBrowse to where your React app is running, in my case http://react:3000/ and click the Login button\nLogin using the new test user\nYou should get a JWT token with user information as a result.\nAd Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nSAML integration between ADFS and Keycloak Next step is to set up a authentication provider in Keycloak to authenticate users against the ADFS IdP.\nIn Keycloak, create a new SAML authentication provider\nConfiguration may differ in different environments. In this demo we will set the following\nSync Mode: Import - Meaning we import the user data coming from the IdP ones, when the user is first authenticated. Single Sign-On Service URL: https://adfs.devel/adfs/ls/ - Where our ADFS endpoint for SSO is. Single Logout Service URL: https://adfs.devel/adfs/ls/ - Where our ADFS endpoint for SLO is. Want AuthnRequests Signed: On - To sign authentication request and especially singing single logout requests which is mandatory by default in ADFS. NameID Policy Format: Email - This is how we will identify users To configure the SAML IdP using Keycloak CLI 1kcadm.sh create identity-provider/instances -r oidcrealm -s alias=saml -s providerId=saml -s enabled=true -s config.wantAuthnRequestsSigned=true -s config.allowedClockSkew=10 -s \u0026#39;config.useJwksUrl=\u0026#34;true\u0026#34;\u0026#39; -s config.singleSignOnServiceUrl=https://adfs.devel/adfs/ls/ -s config.singleLogoutServiceUrl=https://adfs.devel/adfs/ls/ -s config.nameIDPolicyFormat=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress -s config.signatureAlgorithm=RSA_SHA256\nConfigure Keycloak as relaying party in ADFS When setting up Keycloak as a SP in ADFS, we need to import Metadata. The metadata contains connection and communication information that ADFS needs.\nFirst lets download the metadata from Keycloak. At the ADFS server, browse to https://keycloak:8443/auth/realms/oidcrealm/broker/saml/endpoint/descriptor. Click through the HTTPS warnings and download the file.\nOpen up ADFS administration, and add a relying party. Choose Claims aware. Use the option \u0026quot;Import data about the relying party from a file\u0026quot; and browse to you file.\nNormally the metadata is simplest imported by using the option \u0026quot;Import data about the relying party published online or on a local network\u0026quot; to let ADFS fetch the metadata directly from Keycloak. This requires the TLS trust is setup correctly. I have not bothered to do that for this demo so I use this method instead.\nSet a name, for example Keycloak\nNext we set which users are allowed to authenticate thought the integration. As this is a demo, we make it simple and set it to everyone. Select \u0026quot;Permit everyone\u0026quot;\nThen click next, next and finish\nAfter you finish, the dialog \u0026quot;Edit Claims Issuance Policy for Keycloak\u0026quot; should open. Here we configure what information will be sent to Keycloak together with the user when it has been authenticated. In Keycloak we configured the user to be identified by email, so now we must configure ADFS to send the email address of the authenticated user.\nFirst we create a rule to get a the email as a claim.\nSelect \u0026quot;Send LDAP Attributes as Claims\u0026quot;. Set a name for the issuance rule, select Active Directory as store. Under LDAP attribute choose \u0026quot;Email addresses\u0026quot; and set \u0026quot;Email address\u0026quot; as Outgoing claim type\nNext, we create a rule to transform and set the email claim as NameID in the SAML response. Select \u0026quot;Transform an incoming claim\u0026quot;\nAs \u0026quot;Incoming Claim type\u0026quot; set email address and as \u0026quot;Outgoing Claim type\u0026quot; set Name ID and Email as \u0026quot;Outgoing name ID format\u0026quot;\nTo configure the Keycloak relying party on ADFS using PowerShell, first disable HTTPS verification if you have not yet set up TLS trust between Keycloak and ADFS 1[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\nCreate and configure relying party 1Add-ADFSRelyingPartyTrust -Name \u0026#39;keycloak\u0026#39; -MetadataURL \u0026#39;https://keycloak:8443/auth/realms/oidcrealm/broker/saml/endpoint/descriptor\u0026#39; -IssuanceAuthorizationRules @\u0026#39; 2@RuleTemplate = \u0026#34;AllowAllAuthzRule\u0026#34; 3 =\u0026gt; issue(Type = \u0026#34;http://schemas.microsoft.com/authorization/claims/permit\u0026#34;, Value = \u0026#34;true\u0026#34;); 4\u0026#39;@ -IssuanceTransformRules @\u0026#39; 5@RuleTemplate = \u0026#34;LdapClaims\u0026#34; 6@RuleName = \u0026#34;Email Attribute\u0026#34; 7c:[Type == \u0026#34;http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\u0026#34;, Issuer == \u0026#34;AD AUTHORITY\u0026#34;] =\u0026gt; issue(store = \u0026#34;Active Directory\u0026#34;, types = (\u0026#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\u0026#34;), query = \u0026#34;;mail;{0}\u0026#34;, param = c.Value); 8 9@RuleTemplate = \u0026#34;MapClaims\u0026#34; 10@RuleName = \u0026#34;Email ad nameid\u0026#34; 11c:[Type == \u0026#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\u0026#34;] =\u0026gt; issue(Type =\u0026#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\u0026#34;, Issuer = c.Issuer, OriginalIssuer = c.OriginalIssuer, Value = c.Value, ValueType = c.ValueType, Properties[\u0026#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format\u0026#34;] = \u0026#34;urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\u0026#34;); 12\u0026#39;@\nAnd while we are in the Windows server, lets create a test user in AD to test the final setup when we are done.\nOpen the Active Directory Users and Computers tool and create a new user. After creating the user, make sure to open the user properties and add an email address.\nTo add the user using PowerShell, first disable complex passwords to let use a simple password for testing 1secedit /export /cfg C:\\secconfig.cfg 2 (gc C:\\secconfig.cfg).replace(\u0026#34;PasswordComplexity = 1\u0026#34;, \u0026#34;PasswordComplexity = 0\u0026#34;).replace(\u0026#34;MinimumPasswordLength = 7\u0026#34;, \u0026#34;MinimumPasswordLength = 0\u0026#34;) | Out-File C:\\secconfig.cfg 3 secedit /configure /db C:\\Windows\\security\\local.sdb /cfg C:\\secconfig.cfg /areas SECURITYPOLICY 4 rm -force C:\\secconfig.cfg -confirm:$false\nNow lets create the user 1Import-Module ActiveDirectory 2New-ADUser -SamAccountName test2 -GivenName Test -Surname User -Name \u0026#34;Test User\u0026#34; -Email \u0026#34;test@test.com\u0026#34;` 3 -Path \u0026#34;CN=Users,DC=windomain,DC=local\u0026#34; ` 4 -AccountPassword (ConvertTo-SecureString \u0026#39;test\u0026#39; -AsPlainText -Force) -Enabled $true\nConfigure brokering between OIDC and SAML To make use of the configured SAML IdP to authenticate the user from the React SPA, we need to configure two things in Keycloak.\nIdentity Provider Redirector - To direct the user to ADFS IdP Authentication flow - To handle the SAML result from ADFS Configure the redirector Configure the redirector under Authentication in the menu in the Keycloak web ui. Set an alias and under Default Identity Provider, set the name chosen when creating the SAML authentication provider in earlier steps.\nTransparent brokering The default behavior of Keycloak in brokering mode is that the a new user is asked to update their user profile in Keycloak a first authentication. If you want to have the brokering in Keycloak to be totally transparent, this can be disabled in the \u0026quot;First broker login\u0026quot; authentication flow.\nUnder Authentication, select \u0026quot;First broker login\u0026quot; flow and click disable for the first step named \u0026quot;Review Profile\u0026quot;\nTo configure the IdP redirection and disabling of the profile review in Keycloak CLI 1idpRedirector=$(kcadm.sh get /authentication/flows/browser/executions -r oidcrealm | jq -r \u0026#39;.[] | select(.providerId == \u0026#34;identity-provider-redirector\u0026#34;).id\u0026#39;) 2kcadm.sh create /authentication/executions/$idpRedirector/config -r oidcrealm -s config.defaultProvider=saml -s alias=straight_to_saml 3 4reviewProfileExecution=$(kcadm.sh get /authentication/flows/first%20broker%20login/executions -r oidcrealm | jq -r \u0026#39;.[] | (select(.alias == \u0026#34;review profile config\u0026#34;) | .requirement) |= \u0026#34;DISABLED\u0026#34; | select(.alias == \u0026#34;review profile config\u0026#34;)\u0026#39;) 5kcadm.sh update authentication/flows/first%20broker%20login/executions -r oidcrealm -f - \u0026lt;\u0026lt; EOF 6$reviewProfileExecution 7EOF Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nLet's test it Browse to the React test applications and click Login\nLogin in ADFS as the test user created earlier\nYou now get authenticated to the application and the React test application shows the content of the JWT token in the OIDC authentication response\nFully automated demo To make it easy to try this out and play around, I have published my fully Automated demo of this here Github. The demo is based on vagrant, spinning up different virtual machines in virtual box for ADFS, Keycloak and the React app.\nTo start the demo first install the prerequisites listed in the GitHub page. Then spin everything up 1vagrant up keycloak adfs react\nGo grab lunch. It takes some time =) Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\n","link":"https://blog.samlsecurity.com/post/saml-for-react-spa/","section":"post","tags":["SAML"],"title":"Authenticating a React SPA towards a SAML IdP"},{"body":"One of the most important things in SAML communication is signing. Digital signatures allow the receiver of a message to be sure that the message has not changed since it was sent by the sender. If not for digital signatures someone in the middle of the SAML communication could for example change what user was authenticated in the SAML assertion from the IdP.\nDigital signatures are also used to authenticate the sender sending a message.\nGetting credentials for signing and verification In the examples below we use credentials, being keys and certificates used for signing and verification. Lets first have a look on ways to get the credentials.\nIn OpenSAML 4 and other versions of OpenSAML, credentials are read using credential resolvers that resolve credentials from a source based on defined criterion. There are different credential resolvers that fetch credentials from different places. Two popular resolvers are KeyStoreCredentialResolver and MetadataCredentialResolver.\nKeyStoreCredentialResolver KeyStoreCredentialResolver resolves credentials from a Java keystore file. The KeyStoreCredentialResolver takes a KeyStore object and a map containing the passwords for the entries in the key store.\nFirst read the create a KeyStore object from a Java key store file. 1KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType()); 2InputStream inputStream = this.getClass().getResourceAsStream(pathToKeyStore); 3keystore.load(inputStream, keyStore\tPassword.toCharArray()); 4inputStream.close();\nCreate KeyStoreCredentialResolver and resolve the a credential based on criteria 1Map\u0026lt;String, String\u0026gt; passwordMap = new HashMap\u0026lt;String, String\u0026gt;(); 2passwordMap.put(ENTITY_ID, KEY_STORE_ENTRY_PASSWORD); 3 4KeyStoreCredentialResolver resolver = new KeyStoreCredentialResolver(keystore, passwordMap); 5 6Criterion criterion = new EntityIdCriterion(ENTITY_ID); 7CriteriaSet criteriaSet = new CriteriaSet(); 8criteriaSet.add(criterion); 9Credential cred = resolver.resolveSingle(criteriaSet); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nThe criteria used above represents the entity id of the party that we are fetching credentials for. The resolver will fetch entries in the JKS with the same name as the entity id.\nIn the examples above the following command was used to produce the keystore.\n1keytool -keystore senderKeystore.jks -genkey -keyalg RSA -alias sender.example.com MetadataCredentialResolver Another popular resolver is the MetadataCredentialResolver. This resolved public keys as credentials from SAML Metadata.\nFirst create and initialize the FilesystemMetadataResolver to get the metadata file. 1File metadataFile = new File(getClass().getClassLoader().getResource(SENDER_METADATA_PATH).toURI()); 2 3final FilesystemMetadataResolver metadataResolver = new FilesystemMetadataResolver(metadataFile); 4metadataResolver.setId(metadataResolver.getClass().getCanonicalName()); 5metadataResolver.setParserPool(OpenSAMLUtils.getParserPool()); 6metadataResolver.initialize();\nCreate and init MetadataCredentialResolver. A RoleDescriptorResolver and KeyInfoCredentialResolver is added to find the right entity id in the metadata file and extract the keys. 1final MetadataCredentialResolver metadataCredentialResolver = new MetadataCredentialResolver(); 2 3final PredicateRoleDescriptorResolver roleResolver = new PredicateRoleDescriptorResolver(metadataResolver); 4 5final KeyInfoCredentialResolver keyResolver = DefaultSecurityConfigurationBootstrap .buildBasicInlineKeyInfoCredentialResolver(); 6 7metadataCredentialResolver.setKeyInfoCredentialResolver(keyResolver); 8metadataCredentialResolver.setRoleDescriptorResolver(roleResolver); 9 10metadataCredentialResolver.initialize(); 11roleResolver.initialize();\nFinally, resolve the public key from metadata using criterion. 1CriteriaSet criteriaSet = new CriteriaSet(); 2criteriaSet.add(new UsageCriterion(UsageType.SIGNING)); 3criteriaSet.add(new EntityRoleCriterion(SPSSODescriptor.DEFAULT_ELEMENT_NAME)); 4criteriaSet.add(new ProtocolCriterion(SAMLConstants.SAML20P_NS)); 5criteriaSet.add(new EntityIdCriterion(SENDER_ENTITY_ID)); 6 7Credential credential = metadataCredentialResolver.resolveSingle(criteriaSet);\nSigning messages OpenSAML is a very low level library forcing the developer to do a lot themselves, for example signing messages.\nMessage signing in OpenSAML 4 is done using message handlers. Message handlers can do a lot of the surrounding work needed before sending a message or after receiving one. This work can for example be signing and verifying digital signatures, validating time validity of a message and checking that the message was intended for the receiver.\nSigning is done using the SAMLOutboundProtocolMessageSigningHandler, but It also needs information about how to sign. This information is stored in a message context SecurityParametersContext containing signature signing parameters.\nFirst lets create the signature signing parameters 1SignatureSigningParameters signingParameters = new SignatureSigningParameters(); 2signingParameters.setSigningCredential(getSenderSigningCredential()); 3signingParameters.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256); 4signingParameters.setSignatureReferenceDigestMethod(SignatureConstants.ALGO_ID_DIGEST_SHA256); 5signingParameters.setSignatureCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nAnd add it to the message context 1MessageContext context = new MessageContext(); 2context.getSubcontext(SecurityParametersContext.class, true) 3.setSignatureSigningParameters(signingParameters);\nAnd finally sign the message using SAMLOutboundProtocolMessageSigningHandler 1SAMLOutboundProtocolMessageSigningHandler handler = new SAMLOutboundProtocolMessageSigningHandler(); 2handler.setSignErrorResponses(false); 3handler.initialize(); 4handler.invoke(context);\nThe SAMLOutboundProtocolMessageSigningHandler will calculate a signature based on the parameters in the SignatureSigningParameters and add the signature to the XML message.\nValidating signatures In OpenSAML many features are manual and dependent on that the developer uses them, this is also true for both signing and verifying signatures. If verification is not done in your use of OpenSAML, you will simply go ahead and use the message without having verified the message, leading to all kinds of security issues.\nThere are several ways to verify a signature in OpenSAML. The most straightforward and easy to understand is using SignatureValidator\nFirst the signature is checked to follow certain security rules of the SAML signature format. The signature is then cryptographically verified against a credential. 1SAMLSignatureProfileValidator profileValidator = new SAMLSignatureProfileValidator(); 2profileValidator.validate(message.getSignature()); 3SignatureValidator.validate(message.getSignature(), credential);\nThis works well but involves writing extra code for different things, for example getting the certificate to use for validation\nA more modern approach as introduced in OpenSAML 3 and also in OpenSAML 4 is to use message handlers.\nVerifying signatures using message handler and trust engine The SAMLProtocolMessageXMLSignatureSecurityHandler is used to verify signatures. As with the message handler for signing messages, this one also needs information in the message context saying how to verify the signature.\nFor signature verification in message handlers, the whole logic for verifying signatures is delegated to a trust engine which encapsulates this.\nTrust engines is a more advanced way of verifying signatures that uses credential resolvers, key key info in the message and the trust engine's own logic to evaluate the signature.\nThere are two trust engines supplied in OpenSAML 4, ExplicitKeySignatureTrustEngine and PKIXSignatureTrustEngine. ExplicitKeySignatureTrustEngine validates a signature if the key used to sign a message is one of a number of trusted certificates.\nPKIXSignatureTrustEngine is a different beast in that it does not require a key to be the exact same key that you have, but instead validates trust using PKI. Meaning, the certificate used for signing is considered trusted if it is signed by a certificate you trust. We will not dig into PKIXSignatureTrustEngine right now but focus on ExplicitKeySignatureTrustEngine.\nThe abstract trust engine works like this.\nUse the KeyInfo resolver to get the KeyInfo object from the signature. The KeyInfo object is used to tell the receiver what key was used. The trust engine tries to validate the signature using the supplied key inside the KeyInfo object. If validation was successful. The trust engine gets all credentials it trusts for this sender and validates that the key inside KeyInfor is one of these. If it is not possible to get a key from key info it tries to verify the signature using any of the trusted credentials. Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nOk let's look on how to use all of this\nCreate the ExplicitKeySignatureTrustEngine with a MetadataCredentialResolver and the default KeyInfoCredentialResolver 1KeyInfoCredentialResolver keyInfoResolver = DefaultSecurityConfigurationBootstrap 2.buildBasicInlineKeyInfoCredentialResolver(); 3ExplicitKeySignatureTrustEngine trustEngine = new ExplicitKeySignatureTrustEngine(metadataCredentialResolver, keyInfoResolver);\nSet the trust engine in the SecurityParametersContext 1SignatureValidationParameters validationParameters = new SignatureValidationParameters(); 2validationParameters.setSignatureTrustEngine(trustEngine); 3 4SecurityParametersContext secParamsContext = context.getSubcontext(SecurityParametersContext.class, true); 5secParamsContext.setSignatureValidationParameters(validationParameters);\nAdd other required message contexts and run the handler to verify the message 1SAMLPeerEntityContext peerEntityContext = context.getSubcontext(SAMLPeerEntityContext.class, true); 2peerEntityContext.setEntityId(SENDER_ENTITY_ID); 3peerEntityContext.setRole(SPSSODescriptor.DEFAULT_ELEMENT_NAME); 4 5SAMLProtocolContext protocolContext = context.getSubcontext(SAMLProtocolContext.class, true); 6protocolContext.setProtocol(SAMLConstants.SAML20P_NS); 7 8SAMLProtocolMessageXMLSignatureSecurityHandler signatureValidationHanlder = new SAMLProtocolMessageXMLSignatureSecurityHandler(); 9signatureValidationHanlder.invoke(context);\n!!!!!!!! WARNING !!!!!!! It is very important to understand that the SAMLProtocolMessageXMLSignatureSecurityHandler does not throw any exception if the message is not signed only if the verification of an existing signature failed. If the message handler was able to verify a signature it writes this information to the message context and it must then be checked for example like this. 1if (!peerEntityContext.isAuthenticated()) { 2throw new SecurityException(\u0026#34;Message not signed\u0026#34;); 3}\nGet it on Github! The full running sample is availible on Github at https://github.com/rasmusson/OpenSAML-sample-code under opensaml-signing-and-verification\nJust clone it, run it, go nuts! 1git clone https://github.com/rasmusson/OpenSAML-sample-code/ 2cd opensaml-signing-and-verification 3mvn tomcat:run\nAll messages are printed in the console\nBrowse to http://localhost:8080/opensaml-signing-and-verification/senderPage\n","link":"https://blog.samlsecurity.com/2012/11/verifying-signatures-with-opensaml.html","section":"post","tags":["SAML","OpenSAML4"],"title":"Signing and verifying signatures with OpenSAML 4"},{"body":"Metadata can be said to be where SAML starts. Exchanging metadata between IdP and SP sets up the initial configuration and trust between the two that is later used to authenticate users. For a beginner this can be a quite abstract step, but in this article I will make everything clear.\nThe Metadata is a XML document contain many things. For example end points to be used to authenticate users, bindings(transportation methods) supported, requirements on signing. Also and very important, public keys and certificates that is used to establish trust. More on trust further down. Full specification of SAML metadata is located here\nWhen a SP decides to start using a IdP for authenticating users, the first thing that is done is to exchange metadata. The SP sends it metadata to the IdP and the IdP send its metadata to the SP.\nThe exchange can be done in different ways, but two popular is to either send it using email or to expose it on a web page on the SP or IdP service.\nOnes exchanged, the SP and IdP both use this metadata in their systems for further communication.\nAd Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nWhen the SP wants to authenticate a users, it send the user to the end point specified in the IdP metadata, using a binding also specified in the IdP metadata. Ones the IdP has finished authenticating the user it send the user back to the SP, to the end point specified in the SP metadata, using a binding specified in the SP metadata.\nHow signing of messages is done is also specified in the metadata.\nSo as you see the metadata is the specification of how the two parties can integrate with another and should contain the data needed to that start working together.\nTrust Trust between the SP and IdP is vitally important for many reasons in SAML. First, the more implicit trust is important to understand.\nOnes a SP sets up a integration to a IdP, it leaves all responsibility for authenticating a user to the IdP. The SP just sends a redirect to the user browser and then it goes to the IdP. How authentication then is done is up to the IdP (with some influence from the SP in the authentication request). The next thing that SP sees is the user coming back with a response from the IdP saying who the user is. Because of this it is important for the SP the trust the IdP to correctly authenticate users.\nThe other trust is the cryptographic trust between SP and IdP. In the exchanged metadata, there is also contained certificated and public keys for each party. Some for singing and some for encryptions. Theses are then used to secure all message transport between SP and IdP.\nWhen the SP send the authentication request to the IdP together with the users. It usually signs it. It does so with its private key for the corresponding key in the metadata. When the IdP received the used and authentication request, it verifies the signature with the public key in the metadata previously sent from the SP.\nSame thing, when the IdP responds. IdP signs response with its private key. SP verified with IdP public key in metadata.\nThis way both parties can cryptographically trust that the message received was from the expected sender.\n","link":"https://blog.samlsecurity.com/post/matadata-exchange-trust/","section":"post","tags":["SAML"],"title":"Metadata exchange and trust"},{"body":"SAML messages can be sent using different methods, called bindings. There are four main standard bindings being used today, HTTP Redirect, HTTP POST, HTTP Artifact and SOAP.\nThis tutorial will walk you through how to send a message, specifically a authentication request, using HTTP POST in OpenSAML.\nThe HTTP POST binding The Redirect binding explained here is a popular method of sending messages which relies on HTTP Redirects. A problem with the redirect binding is that the message is send inside URL parameters and URL parameters can not hold large amounts of data. This makes it suitable for SAML authentication request, which is quite small, but less suitable for large messages like SAML responses. The POST binding gives a solution to this.\nThe HTTP POST binding uses input fields in a HTML form to send SAML messages.\nWhen the SP or IdP want to send a message it responds to the current user with a HTML page with the SAML message encoded in a input field in a form. When the browser receives the HTML page a JavaScript or meta tag makes the browser automatically submit the form to the recipient of the message . When the user arrives with its submitted form at the receiver of the message, the receiver will pick the message from the request parameters and parse the message. The HTML form explained A typical POST binding HTML page look like this.\n1\u0026lt;html\u0026gt; 2 \u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;/head\u0026gt; 5 \u0026lt;body onload=\u0026#34;document.forms[0].submit()\u0026#34;\u0026gt; 6 \u0026lt;noscript\u0026gt; 7 \u0026lt;p\u0026gt; 8 \u0026lt;strong\u0026gt;Note:\u0026lt;/strong\u0026gt; Since your browser does not support JavaScript, 9 you must press the Continue button once to proceed. 10 \u0026lt;/p\u0026gt; 11 \u0026lt;/noscript\u0026gt; 12 \u0026lt;form action=\u0026#34;http://localhost:8080/opensaml-http-post/receiverPage\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; 13 \u0026lt;div\u0026gt; 14\u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;RelayState\u0026#34; value=\u0026#34;teststate\u0026#34;/\u0026gt; 15\u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;SAMLRequest\u0026#34; value=\u0026#34;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJUaGUgc2hvdWxkIGJlIHRoZSBlbmRwb2ludCB0aGF0IHNob3VsZCByZWNpZXZlIHRoZSByZXN1bHQgb2YgdGhlIGF1dGhlbnRpY2F0aW9uIiBEZXN0aW5hdGlvbj0iaHR0cDovL2xvY2FsaG9zdDo4MDgwL29wZW5zYW1sLWh0dHAtcG9zdC9yZWNlaXZlclBhZ2UiIElEPSJfODczNjcwZDBlNmZiYTI0MDkzOWIwYjQ5OTJiOGRlMzEiIElzc3VlSW5zdGFudD0iMjAyMS0xMC0xNlQxODo0OTowOC4wODBaIiBQcm90b2NvbEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpIVFRQLUFydGlmYWN0IiBWZXJzaW9uPSIyLjAiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPlRoaXMgc2hvdWxkIGJlIHRoZSBzZW5kZXIgZW50aXR5SWQ8L3NhbWwyOklzc3Vlcj48c2FtbDJwOk5hbWVJRFBvbGljeSBBbGxvd0NyZWF0ZT0idHJ1ZSIgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDp0cmFuc2llbnQiLz48L3NhbWwycDpBdXRoblJlcXVlc3Q+\u0026#34;/\u0026gt; 16 \u0026lt;/div\u0026gt; 17 \u0026lt;noscript\u0026gt; 18 \u0026lt;div\u0026gt; 19 \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Continue\u0026#34;/\u0026gt; 20 \u0026lt;/div\u0026gt; 21 \u0026lt;/noscript\u0026gt; 22 \u0026lt;/form\u0026gt; 23 \u0026lt;/body\u0026gt; 24\u0026lt;/html\u0026gt; There are two fields used in this binding\nSAMLRequest/SAMResponse - The encoded, unsigned message RelayState - The relay state, sent in the original request and send back in the response Sending a message using OpenSAML 4 Because this binding is creating a webpage, OpenSAML uses Apache Velocity. The velocity library must be included in the Maven Pom. If not you will get the following errror\n1java.lang.RuntimeException: net.shibboleth.utilities.java.support.component.ComponentInitializationException: VelocityEngine must be supplied Add this to pom.xml 1\u0026lt;dependency\u0026gt; 2 \u0026lt;groupId\u0026gt;org.apache.velocity\u0026lt;/groupId\u0026gt; 3 \u0026lt;artifactId\u0026gt;velocity-engine-core\u0026lt;/artifactId\u0026gt; 4 \u0026lt;version\u0026gt;${velocity.version}\u0026lt;/version\u0026gt; 5\u0026lt;/dependency\u0026gt;\nAd Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nCreating message contexts to set the message, relay state and receiving end point. Creating Velocity engine to handle web site creation. 1MessageContext context = new MessageContext(); 2 3context.setMessage(authnRequest); 4 5SAMLBindingContext bindingContext = context.getSubcontext(SAMLBindingContext.class, true); 6bindingContext.setRelayState(\u0026#34;teststate\u0026#34;); 7 8SAMLPeerEntityContext peerEntityContext = context.getSubcontext(SAMLPeerEntityContext.class, true); 9 10SAMLEndpointContext endpointContext = peerEntityContext.getSubcontext(SAMLEndpointContext.class, true); 11endpointContext.setEndpoint(URLToEndpoint(MESSAGE_RECEIVER_ENDPOINT)); 12 13VelocityEngine velocityEngine = new VelocityEngine(); 14velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADERS, \u0026#34;classpath\u0026#34;); 15velocityEngine.setProperty(\u0026#34;classpath.resource.loader.class\u0026#34;, 16\t\u0026#34;org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\u0026#34;); 17velocityEngine.init(); Initializing HTTPPostEncoder, setting context and Velocity engine and sending the message. 1HTTPPostEncoder encoder = new HTTPPostEncoder(); 2 3encoder.setMessageContext(context); 4encoder.setHttpServletResponse(httpServletResponse); 5encoder.setVelocityEngine(velocityEngine); 6 7encoder.initialize(); 8encoder.encode();\nReceiving a message using OpenSAML 4 Using HTTPPostDecoder to decode the received message from the HTTPServletRequest\n1HTTPPostDecoder decoder = new HTTPPostDecoder(); 2decoder.setHttpServletRequest(req); 3 4decoder.initialize(); 5decoder.decode(); 6 7MessageContext messageContext = decoder.getMessageContext(); 8authnRequest = (AuthnRequest) messageContext.getMessage(); Get it on Github! The full running sample is available on Github at https://github.com/rasmusson/OpenSAML-sample-code under opensaml-http-post\nJust clone it, run it, go nuts!\n1git clone https://github.com/rasmusson/OpenSAML-sample-code/ 2cd opensaml-http-post 3mvn tomcat:run All messages are printed in the console\nBrowse to http://localhost:8080/opensaml-http-post/postPage\nSummary In this post we have looked at.\nThe basics of the HTTP Post binding Sending a message using OpenSAML 4 Receiving a message using OpenSAML 4 ","link":"https://blog.samlsecurity.com/post/post-binding-opensaml-4/","section":"post","tags":["SAML","OpenSAML4"],"title":"Using HTTP POST binding in OpenSAML 4"},{"body":"","link":"https://blog.samlsecurity.com/tags/opensamlv2/","section":"tags","tags":null,"title":"OpenSAMLV2"},{"body":"This article discusses singing and sending in OpenSAML 2. If you're looking for an article on OpenSAML 4, you will find it here and if you're looking for an article on OpenSAML 3, you will find it here\nIn this post I will show you how to start the SAML Single sign-on process by sending a authentication request using OpenSAML. The process starts with a redirect from the SP(The one wanting to authenticate someone) to the IdP(The one authenticating). To start the authentication the SP sends a SAML AuthnRequest as parameter in the redirect. The AuthnRequest message identifies the SP and can contain information about how the SP wants the user to be authenticated. Here is an example how to send the AuthnRequest using OpenSAML. The example uses the HTTPRedirectDeflateEncoder to encode, sign and redirect which makes everything way easier, especially considering encoding and signing. 1//IPR Ergogroup AS 2public void doAuthenticationRedirect(final HttpServletResponse response, final HttpSession currentSession, final String gotoURL, final SAMLMetaData metaData) throws IllegalArgumentException, SecurityException, IllegalAccessException { 3 AuthnRequest authnRequest = generateAuthnRequest(metaData); 4 5 SAMLUtil.logSAMLObject(authnRequest); 6 7 // Save the request ID to session for future validation 8 currentSession.setAttribute(\u0026#34;AuthnRequestID\u0026#34;, authnRequest.getID()); 9 currentSession.setAttribute(\u0026#34;goto\u0026#34;, gotoURL); 10 11 HttpServletResponseAdapter responseAdapter = new HttpServletResponseAdapter(response, true); 12 BasicSAMLMessageContext\u0026lt;SAMLObject, AuthnRequest, SAMLObject\u0026gt; context = new BasicSAMLMessageContext\u0026lt;SAMLObject, AuthnRequest, SAMLObject\u0026gt;(); 13 context.setPeerEntityEndpoint(getEndpointFromMetaData()); 14 context.setOutboundSAMLMessage(authnRequest); 15 context.setOutboundSAMLMessageSigningCredential(getSigningCredential()); 16 context.setOutboundMessageTransport(responseAdapter); 17 18 HTTPRedirectDeflateEncoder encoder = new HTTPRedirectDeflateEncoder(); 19 20 try { 21 encoder.encode(context); 22 } catch (MessageEncodingException e) { 23 logger.error(e.getMessage(), e); 24 } 25 } 26 27 private AuthnRequest generateAuthnRequest(final SAMLMetaData metaData) throws IllegalArgumentException, SecurityException, IllegalAccessException { 28 29 AuthnRequest authnRequest = SAMLUtil.buildSAMLObjectWithDefaultName(AuthnRequest.class); 30 31 authnRequest.setForceAuthn(true); 32 authnRequest.setIsPassive(false); 33 authnRequest.setIssueInstant(new DateTime()); 34 for (SingleSignOnService sss : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleSignOnServices()) { 35 if (sss.getBinding().equals(SAMLConstants.SAML2_REDIRECT_BINDING_URI)) { 36 authnRequest.setDestination(sss.getLocation()); 37 } 38 } 39 authnRequest.setProtocolBinding(SAMLConstants.SAML2_ARTIFACT_BINDING_URI); 40 41 String deployURL = getDeployURL(); 42 if (deployURL.charAt(deployURL.length() - 1) == \u0026#39;/\u0026#39;) { 43 deployURL = deployURL.substring(0, deployURL.length() - 1); 44 } 45 authnRequest.setAssertionConsumerServiceURL(deployURL + SAMLMetaData.CONSUMER_PATH); 46 47 authnRequest.setID(SAMLUtil.getSecureRandomIdentifier()); 48 49 Issuer issuer = SAMLUtil.buildSAMLObjectWithDefaultName(Issuer.class); 50 issuer.setValue(getSPEntityId()); 51 authnRequest.setIssuer(issuer); 52 53 NameIDPolicy nameIDPolicy = SAMLUtil.buildSAMLObjectWithDefaultName(NameIDPolicy.class); 54 nameIDPolicy.setSPNameQualifier(getSPEntityId()); 55 nameIDPolicy.setAllowCreate(true); 56 nameIDPolicy.setFormat(\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34;); 57 58 authnRequest.setNameIDPolicy(nameIDPolicy); 59 60 RequestedAuthnContext requestedAuthnContext = SAMLUtil.buildSAMLObjectWithDefaultName(RequestedAuthnContext.class); 61 requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.MINIMUM); 62 63 AuthnContextClassRef authnContextClassRef = SAMLUtil.buildSAMLObjectWithDefaultName(AuthnContextClassRef.class); 64 authnContextClassRef.setAuthnContextClassRef(\u0026#34;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\u0026#34;); 65 66 requestedAuthnContext.getAuthnContextClassRefs().add(authnContextClassRef); 67 authnRequest.setRequestedAuthnContext(requestedAuthnContext); 68 69 return authnRequest; 70 } Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nResulting AuthnRequest\n1\u0026lt;saml2p:authnrequest 2 assertionconsumerserviceurl=\u0026#34;https://mySP.test.com/saml/consumer\u0026#34; 3 destination=\u0026#34;http://myIDP.test.com:80/opensso/SSORedirect/metaAlias/idp\u0026#34; 4 forceauthn=\u0026#34;true\u0026#34; 5 id=\u0026#34;_07dfa23f929c647c0b4503e8c13a04f7\u0026#34; 6 ispassive=\u0026#34;false\u0026#34; 7 issueinstant=\u0026#34;2011-01-20T12:43:52.208Z\u0026#34; 8 protocolbinding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\u0026#34; 9 version=\u0026#34;2.0\u0026#34; 10 xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 11 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 12 my-alias 13 \u0026lt;/saml2:issuer\u0026gt; 14 \u0026lt;saml2p:nameidpolicy 15 allowcreate=\u0026#34;true\u0026#34; 16 format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; 17 spnamequalifier=\u0026#34;my-alias\u0026#34;\u0026gt; 18 \u0026lt;saml2p:requestedauthncontext comparison=\u0026#34;minimum\u0026#34;\u0026gt; 19 \u0026lt;saml2:authncontextclassref xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 20 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 21 \u0026lt;/saml2:authncontextclassref\u0026gt; 22 \u0026lt;/saml2p:requestedauthncontext\u0026gt; 23 \u0026lt;/saml2p:nameidpolicy\u0026gt; 24\u0026lt;/saml2p:authnrequest\u0026gt; ","link":"https://blog.samlsecurity.com/2011/01/redirect-with-authnrequest-opensaml2.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Redirect with AuthnRequest"},{"body":"This article discusses singing and sending in OpenSAML 4. If you're looking for an article on OpenSAML 3, you will find it here and if you're looking for an article on OpenSAML 2, you will find it here\nSAML messages can be sent using different methods, called bindings. There are four main standard bindings being used today, HTTP Redirect, HTTP POST, HTTP Artifact and SOAP.\nThis tutorial will walk you through how to send a message, specifically a authentication request, using HTTP Redirect in OpenSAML.\nThe HTTP Redirect binding The Redirect binding uses the function of HTTP Redirects the transport messages between SP and IdP with the use of the user browser.\nWhen the SP or IdP want to send a message it responds to the current user with a HTTP Redirect to the receiver, with the encoded message in an URL parameter. When the browser receives the redirect, it redirects the user to the receiver. When the user arrives at the receiver of the message, the receiver will pick the message from the URL parameter and parses the message. URL parameters explained A typical redirect URL can look like this. 1http://localhost:8080/opensaml-http-redirect/receiverPage?SAMLRequest=fZJNb9swDIb%2FiqC744%2FagSvEKbwGxQJ0Q9C6PewyqDJdC5AlT6TT9t9PzsfQ9ZCLAIqv%2BFIPubp5Hwzbg0ftbMXTRcIZWOVabV8r%2FtTcRSW%2FWa9QDiYbRT1Rbx%2FgzwRILDy0KI6Zik%2FeCidRo7ByABSkxGP9415ki0SM3pFTznBWI4KnYHXrLE4D%2BEfwe63g6eG%2B4k0PDHs3mZa9AKMQgW1Hpy2FQNI550Fp2B8FHnAyxFx3iGRoDyxpJWcLzjahTW0PQcV7olHEsXFKmt4hiTIpk9iNYOcvRHM68tDqUJ7icIAOVHbyFTjbbir%2BW0nVdUVbpGVxnVxflV3X5UVxVaqlass0nWWIE2wtkrRU8SzJ0ihNonTZpLnIl6LIFlme%2F%2BJsd8LxTdsj5kvsXo4iFN%2BbZhfVAV4nFXH2fB5ZEPHTgMShA%2F95MpeLy%2FM4%2BLrpNX6hjwF%2FqDYTpY9tu4o%2Fm%2FzbiZ%2Bh6nazc0arD1Yb495uPUiCipOfApU75wdJl%2FuYb3QbdQepIC8t6mDL4%2FXJ9P%2FVW%2F8F\u0026amp;RelayState=teststate\nThere are four URL parameters used in the binding\nSAMLRequest/SAMResponse - The encoded, unsigned message RelayState - The relaystate, sent in the original request and send back in the response SigAlg - The algorithm used for signing Signature - Calculated signature The authentication request is often the first message send when authenticating a user user SAML. This is true when the recommended approach of SP initiated SSO is used and the SP is the one that requests a user to be authenticated by the IdP.\nSending a message using OpenSAML 4 Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nCreating message contexts to set the message, relaystate and receiving endpoint. 1MessageContext context = new MessageContext(); 2context.setMessage(authnRequest); 3 4SAMLBindingContext bindingContext = context.getSubcontext(SAMLBindingContext.class, true); 5bindingContext.setRelayState(\u0026#34;teststate\u0026#34;); 6 7SAMLPeerEntityContext peerEntityContext = context.getSubcontext(SAMLPeerEntityContext.class, true); 8SAMLEndpointContext endpointContext = peerEntityContext.getSubcontext(SAMLEndpointContext.class, true); 9endpointContext.setEndpoint(URLToEndpoint(MESSAGE_RECEIVER_ENDPOINT));\nCreating, initializing and sending the message using HTTPRedirectDeflateEncoder. 1HTTPRedirectDeflateEncoder encoder = new HTTPRedirectDeflateEncoder(); 2encoder.setMessageContext(context); 3encoder.setHttpServletResponse(httpServletResponse); 4 5encoder.initialize(); 6encoder.encode();\nReceiving a message using OpenSAML 4 Using HTTPRedirectDeflateDecoder to decode the received message from the HTTPServletRequest\n1HTTPRedirectDeflateDecoder decoder = new HTTPRedirectDeflateDecoder(); 2decoder.setHttpServletRequest(req); 3 4decoder.initialize(); 5decoder.decode(); 6MessageContext messageContext = decoder.getMessageContext(); 7authnRequest = (AuthnRequest) messageContext.getMessage(); Get it on Github! The full running sample is availible on Github at https://github.com/rasmusson/OpenSAML-sample-code under opensaml-http-redirect\nJust clone it, run it, go nuts!\n1git clone https://github.com/rasmusson/OpenSAML-sample-code/ 2cd opensaml-http-redirect 3mvn tomcat:run All messages are printed in the console\nBrowse to http://localhost:8080/opensaml-http-redirect/redirectPage\nSummary In this post we have looked on.\nThe basics of the HTTP redirect binding Sending a message using OpenSAML 4, Receiving a message using OpenSAML 4 ","link":"https://blog.samlsecurity.com/2011/01/redirect-with-authnrequest.html","section":"post","tags":["SAML","OpenSAML4"],"title":"Using HTTP Redirect binding in OpenSAML 4"},{"body":"So you have a application in Java and you have come to the realization that you need to support SAML to allow Single Sing-On of your users. Searching for SAML and Java you quickly end up in the OpenSAML library.\nIn this tutorial I will explain the basics of OpenSAML to get you as a beginner started. When starting to look on OpenSAML it is easy to feel daunted due to lack of documentation and guides. I how this tutorial will put you on the right track.\nOpenSAML is a software library that helps you to work with the SAML framework, including\nCreating SAML messages, such as assertions, authentication request and response messages, Single LogOut messages and much more Sending messages using SAML bindings including HTTP POST, HTTP Redirect, HTTP Artifact and SOAP bindings Cryptographic signing and verifying messages Encrypting and decrypting messages Much, much more Starting out with the code This is just a small example on how to get started and do something with OpenSAML. I have loads more on the blog.\nAd Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nDependencies To begin with, lets add OpenSAML to your project. OpenSAML has several different libraries and the others might be needed depending on how you use the library. But for this tutorial the below dependencies in Maven is enough.\n1\u0026lt;properties\u0026gt; 2\t\u0026lt;opensaml.version\u0026gt;3.2.0\u0026lt;/opensaml.version\u0026gt; 3\u0026lt;/properties\u0026gt; 4\u0026lt;dependencies\u0026gt; 5\t\u0026lt;dependency\u0026gt; 6\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 7\t\u0026lt;artifactId\u0026gt;opensaml-core\u0026lt;/artifactId\u0026gt; 8\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 9\t\u0026lt;/dependency\u0026gt; 10\t\u0026lt;dependency\u0026gt; 11\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 12\t\u0026lt;artifactId\u0026gt;opensaml-saml-api\u0026lt;/artifactId\u0026gt; 13\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 14\t\u0026lt;/dependency\u0026gt; 15\t\u0026lt;dependency\u0026gt; 16\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 17\t\u0026lt;artifactId\u0026gt;opensaml-saml-impl\u0026lt;/artifactId\u0026gt; 18\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 19\t\u0026lt;/dependency\u0026gt; 20\t\u0026lt;dependency\u0026gt; 21\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 22\t\u0026lt;artifactId\u0026gt;opensaml-messaging-api\u0026lt;/artifactId\u0026gt; 23\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 24\t\u0026lt;/dependency\u0026gt; 25\t\u0026lt;dependency\u0026gt; 26\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 27\t\u0026lt;artifactId\u0026gt;opensaml-messaging-impl\u0026lt;/artifactId\u0026gt; 28\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 29\t\u0026lt;/dependency\u0026gt; 30\t\u0026lt;dependency\u0026gt; 31\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 32\t\u0026lt;artifactId\u0026gt;opensaml-soap-api\u0026lt;/artifactId\u0026gt; 33\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 34\t\u0026lt;/dependency\u0026gt; 35\t\u0026lt;dependency\u0026gt; 36\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 37\t\u0026lt;artifactId\u0026gt;opensaml-soap-impl\u0026lt;/artifactId\u0026gt; 38\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 39\t\u0026lt;/dependency\u0026gt; 40\t\u0026lt;dependency\u0026gt; 41\t\u0026lt;groupId\u0026gt;ch.qos.logback\u0026lt;/groupId\u0026gt; 42\t\u0026lt;artifactId\u0026gt;logback-core\u0026lt;/artifactId\u0026gt; 43\t\u0026lt;version\u0026gt;1.1.7\u0026lt;/version\u0026gt; 44\t\u0026lt;/dependency\u0026gt; 45\t\u0026lt;dependency\u0026gt; 46\t\u0026lt;groupId\u0026gt;ch.qos.logback\u0026lt;/groupId\u0026gt; 47\t\u0026lt;artifactId\u0026gt;logback-classic\u0026lt;/artifactId\u0026gt; 48\t\u0026lt;version\u0026gt;1.1.7\u0026lt;/version\u0026gt; 49\t\u0026lt;/dependency\u0026gt; 50\t\u0026lt;dependency\u0026gt; 51\t\u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; 52\t\u0026lt;artifactId\u0026gt;javax.servlet-api\u0026lt;/artifactId\u0026gt; 53\t\u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; 54\t\u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; 55\t\u0026lt;/dependency\u0026gt; 56\t\u0026lt;dependency\u0026gt; 57\t\u0026lt;groupId\u0026gt;commons-logging\u0026lt;/groupId\u0026gt; 58\t\u0026lt;artifactId\u0026gt;commons-logging\u0026lt;/artifactId\u0026gt; 59\t\u0026lt;version\u0026gt;1.2\u0026lt;/version\u0026gt; 60\t\u0026lt;/dependency\u0026gt; 61\t\u0026lt;/dependencies\u0026gt; 62\t\u0026lt;repositories\u0026gt; 63\t\u0026lt;repository\u0026gt; 64\t\u0026lt;id\u0026gt;shib-release\u0026lt;/id\u0026gt; 65\t\u0026lt;url\u0026gt;https://build.shibboleth.net/nexus/content/repositories/releases\u0026lt;/url\u0026gt; 66\t\u0026lt;/repository\u0026gt; 67\u0026lt;/repositories\u0026gt; Bootstrapping To start using OpenSAML, you first always need to initiate the library. If you do not do this you will get the following error when trying to use it.\n1An exception occured while executing the Java class. Cannot invoke \u0026#34;org.opensaml.core.xml.config.XMLObjectProviderRegistry.getBuilderFactory()\u0026#34; because the return value of \u0026#34;org.opensaml.core.config.ConfigurationService.get(java.lang.Class)\u0026#34; is null Ok, so first lets define and register a parser pool\n1XMLObjectProviderRegistry registry = new XMLObjectProviderRegistry(); 2ConfigurationService.register(XMLObjectProviderRegistry.class, registry); 3registry.setParserPool(getParserPool()); The ParserPool is the pool of instances used for XML processing and the initiation of the parser pool is the main point of configuration for XML processing. Below is a typical secure configuration of the a parsing pool\n1BasicParserPool parserPool = new BasicParserPool(); 2parserPool.setMaxPoolSize(100); 3parserPool.setCoalescing(true); 4parserPool.setIgnoreComments(true); 5parserPool.setIgnoreElementContentWhitespace(true); 6parserPool.setNamespaceAware(true); 7parserPool.setExpandEntityReferences(false); 8parserPool.setXincludeAware(false); 9 10final Map\u0026lt;String, Boolean\u0026gt; features = new HashMap\u0026lt;String, Boolean\u0026gt;(); 11features.put(\u0026#34;http://xml.org/sax/features/external-general-entities\u0026#34;, Boolean.FALSE); 12features.put(\u0026#34;http://xml.org/sax/features/external-parameter-entities\u0026#34;, Boolean.FALSE); 13features.put(\u0026#34;http://apache.org/xml/features/disallow-doctype-decl\u0026#34;, Boolean.TRUE); 14features.put(\u0026#34;http://apache.org/xml/features/validation/schema/normalized-value\u0026#34;, Boolean.FALSE); 15features.put(\u0026#34;http://javax.xml.XMLConstants/feature/secure-processing\u0026#34;, Boolean.TRUE); 16 17parserPool.setBuilderFeatures(features); 18 19parserPool.setBuilderAttributes(new HashMap\u0026lt;String, Object\u0026gt;()); 20 21parserPool.initialize(); Lastly lets initialize the OpenSAML library.\n1InitializationService.initialize(); In previous versions of OpenSAML this was done using DefaultBootstrap.bootstrap() but in recent version this is no longer the case\nFirst shot - Creating a authentication request This is just a small example on how to use OpenSAML. I have loads of posts and guides on how to do more.\nThe following creates a SAML authentication request\n1private static AuthnRequest buildAuthnRequest() { 2\tAuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); 3\tauthnRequest.setIssueInstant(Instant.now()); 4\tauthnRequest.setDestination(IPD_SSO_DESTINATION); 5\tauthnRequest.setProtocolBinding(SAMLConstants.SAML2_ARTIFACT_BINDING_URI); 6\tauthnRequest.setAssertionConsumerServiceURL(SP_ASSERTION_CONSUMER_SERVICE_URL); 7\tauthnRequest.setID(OpenSAMLUtils.generateSecureRandomId()); 8\tauthnRequest.setIssuer(buildIssuer()); 9\tauthnRequest.setNameIDPolicy(buildNameIdPolicy()); 10\t11\treturn authnRequest; 12} 13\t14private static NameIDPolicy buildNameIdPolicy() { 15\tNameIDPolicy nameIDPolicy = OpenSAMLUtils.buildSAMLObject(NameIDPolicy.class); 16\tnameIDPolicy.setAllowCreate(true); 17\tnameIDPolicy.setFormat(NameIDType.TRANSIENT); 18 19\treturn nameIDPolicy; 20} 21 22private static Issuer buildIssuer() { 23\tIssuer issuer = OpenSAMLUtils.buildSAMLObject(Issuer.class); 24\tissuer.setValue(SP_ISSUED_ID); 25 26\treturn issuer; 27} Resulting in the following AuthnRequest XML\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; 2\u0026lt;saml2p:AuthnRequest xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; 3\tAssertionConsumerServiceURL=\u0026#34;https://sp.example.com/assertionConsumerService\u0026#34; 4\tDestination=\u0026#34;https://idp.example.com/singleSingOnService\u0026#34; 5\tID=\u0026#34;_bba9213612c50821d391aa3f95462bad\u0026#34; 6\tIssueInstant=\u0026#34;2021-10-09T21:06:57.064Z\u0026#34; 7\tProtocolBinding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\u0026#34; Version=\u0026#34;2.0\u0026#34;\u0026gt; 8 \u0026lt;saml2:Issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 9 IssuerEntityId 10 \u0026lt;/saml2:Issuer\u0026gt; 11 \u0026lt;saml2p:NameIDPolicy 12 AllowCreate=\u0026#34;true\u0026#34; 13 Format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34;/\u0026gt; 14\u0026lt;/saml2p:AuthnRequest\u0026gt; Get it on Github! The full running sample is available on Github at https://github.com/rasmusson/OpenSAML-sample-code under getting-started-authnrequest\nJust check out, run and go nuts\n1git clone https://github.com/rasmusson/OpenSAML-sample-code/ 2cd OpenSAML-sample-code/getting-started-authnrequest 3mvn compile exec:java -Dexec.mainClass=\u0026#34;com.samlsecurity.opensamlSamples.gettingStartedAuthnrequest.GenAuthnRequest\u0026#34; Summary In this post we have looked on the very basics.\nAdding OpenSAML to you project Initializing OpenSAML and, Producing your first SAML message This was a very simple, minimal first example on how to use OpenSAML. On this blog you will find lots of more examples and explanations on beginner level as well as more advanced fringe cases.\nNext step Check out The Big OpenSAML Guide with links pointing to all relevant article and resources you need to continue building the OpenSAML.\n","link":"https://blog.samlsecurity.com/post/getting-started-opensaml-v3/","section":"post","tags":["SAML","OpenSAML3"],"title":"Getting started with OpenSAML 3"},{"body":"So you have a application in Java and you have come to the realization that you need to support SAML to allow Single Sing-On of your users. Searching for SAML and Java you quickly end up in the OpenSAML library.\nIn this tutorial I will explain the basics of OpenSAML to get you as a beginner started. When starting to look on OpenSAML it is easy to feel daunted due to lack of documentation and guides. I how this tutorial will put you on the right track.\nOpenSAML is a software library that helps you to work with the SAML framework, including\nCreating SAML messages, such as assertions, authentication request and response messages, Single LogOut messages and much more Sending messages using SAML bindings including HTTP POST, HTTP Redirect, HTTP Artifact and SOAP bindings Cryptographic signing and verifying messages Encrypting and decrypting messages Much, much more As you are surely staring to understand, OpenSAML is a very powerful and flexible library. This does however dome with some important caveats.\nThe OpenSAML library works on a very low level. Meaning you have to do a lot of stuff yourself. When you use OpenSAML for SAML communication you will more or less be creating all parts of your messages by hand, choosing what should be included. This also means that if you forget something, or implement something incorrectly, like verifying digital signatures, it will not be done and you risk opening up security holes in your code.\nTo be able to create a working and secure SSO service using OpenSAML you should be very familiar with the SAML specification. The specification does not only specify how SAML messages should look but also have thorough rules describing how messages must be validated and processed. In this post I explain the SAML specifications further\nStarting out with the code This is just a small example on how to get started and do something with OpenSAML. I have loads more on the blog.\nAd Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nDependencies To begin with, lets add OpenSAML to your project. OpenSAML has several different libraries and the others might be needed depending on how you use the library. But for this tutorial the below dependencies in Maven is enough.\n1\u0026lt;properties\u0026gt; 2\t\u0026lt;opensaml.version\u0026gt;4.1.1\u0026lt;/opensaml.version\u0026gt; 3\t\u0026lt;xmlsectool.version\u0026gt;3.0.0\u0026lt;/xmlsectool.version\u0026gt; 4\u0026lt;/properties\u0026gt; 5\u0026lt;dependencies\u0026gt; 6\t\u0026lt;dependency\u0026gt; 7\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 8\t\u0026lt;artifactId\u0026gt;opensaml-core\u0026lt;/artifactId\u0026gt; 9\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 10\t\u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt; 11\t\u0026lt;/dependency\u0026gt; 12\t\u0026lt;dependency\u0026gt; 13\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 14\t\u0026lt;artifactId\u0026gt;opensaml-saml-api\u0026lt;/artifactId\u0026gt; 15\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 16\t\u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt; 17\t\u0026lt;/dependency\u0026gt; 18\t\u0026lt;dependency\u0026gt; 19\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 20\t\u0026lt;artifactId\u0026gt;opensaml-saml-impl\u0026lt;/artifactId\u0026gt; 21\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 22\t\u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt; 23\t\u0026lt;/dependency\u0026gt; 24\t\u0026lt;dependency\u0026gt; 25\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 26\t\u0026lt;artifactId\u0026gt;opensaml-soap-api\u0026lt;/artifactId\u0026gt; 27\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 28\t\u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt; 29\t\u0026lt;/dependency\u0026gt; 30\t\u0026lt;dependency\u0026gt; 31\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 32\t\u0026lt;artifactId\u0026gt;opensaml-xmlsec-api\u0026lt;/artifactId\u0026gt; 33\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 34\t\u0026lt;/dependency\u0026gt; 35\t\u0026lt;dependency\u0026gt; 36\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 37\t\u0026lt;artifactId\u0026gt;opensaml-security-api\u0026lt;/artifactId\u0026gt; 38\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 39\t\u0026lt;/dependency\u0026gt; 40\t\u0026lt;dependency\u0026gt; 41\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 42\t\u0026lt;artifactId\u0026gt;opensaml-security-impl\u0026lt;/artifactId\u0026gt; 43\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 44\t\u0026lt;/dependency\u0026gt; 45\t\u0026lt;dependency\u0026gt; 46\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 47\t\u0026lt;artifactId\u0026gt;opensaml-profile-api\u0026lt;/artifactId\u0026gt; 48\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 49\t\u0026lt;/dependency\u0026gt; 50\t\u0026lt;dependency\u0026gt; 51\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 52\t\u0026lt;artifactId\u0026gt;opensaml-profile-impl\u0026lt;/artifactId\u0026gt; 53\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 54\t\u0026lt;/dependency\u0026gt; 55\t\u0026lt;dependency\u0026gt; 56\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 57\t\u0026lt;artifactId\u0026gt;opensaml-messaging-api\u0026lt;/artifactId\u0026gt; 58\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 59\t\u0026lt;/dependency\u0026gt; 60\t\u0026lt;dependency\u0026gt; 61\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 62\t\u0026lt;artifactId\u0026gt;opensaml-messaging-impl\u0026lt;/artifactId\u0026gt; 63\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 64\t\u0026lt;/dependency\u0026gt; 65\t\u0026lt;dependency\u0026gt; 66\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 67\t\u0026lt;artifactId\u0026gt;opensaml-storage-impl\u0026lt;/artifactId\u0026gt; 68\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 69\t\u0026lt;/dependency\u0026gt; 70\t\u0026lt;dependency\u0026gt; 71\t\u0026lt;groupId\u0026gt;org.opensaml\u0026lt;/groupId\u0026gt; 72\t\u0026lt;artifactId\u0026gt;opensaml-xmlsec-impl\u0026lt;/artifactId\u0026gt; 73\t\u0026lt;version\u0026gt;${opensaml.version}\u0026lt;/version\u0026gt; 74\t\u0026lt;/dependency\u0026gt; 75\t\u0026lt;dependency\u0026gt; 76\t\u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; 77\t\u0026lt;artifactId\u0026gt;javax.servlet-api\u0026lt;/artifactId\u0026gt; 78\t\u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; 79\t\u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; 80\t\u0026lt;/dependency\u0026gt; 81\t\u0026lt;dependency\u0026gt; 82\t\u0026lt;groupId\u0026gt;net.shibboleth.tool\u0026lt;/groupId\u0026gt; 83\t\u0026lt;artifactId\u0026gt;xmlsectool\u0026lt;/artifactId\u0026gt; 84\t\u0026lt;version\u0026gt;${xmlsectool.version}\u0026lt;/version\u0026gt; 85\t\u0026lt;/dependency\u0026gt; 86\t\u0026lt;dependency\u0026gt; 87\t\u0026lt;groupId\u0026gt;commons-logging\u0026lt;/groupId\u0026gt; 88\t\u0026lt;artifactId\u0026gt;commons-logging\u0026lt;/artifactId\u0026gt; 89\t\u0026lt;version\u0026gt;1.2\u0026lt;/version\u0026gt; 90\t\u0026lt;/dependency\u0026gt; 91\u0026lt;/dependencies\u0026gt; 92\u0026lt;repositories\u0026gt; 93\t\u0026lt;repository\u0026gt; 94\t\u0026lt;id\u0026gt;shib-release\u0026lt;/id\u0026gt; 95\t\u0026lt;url\u0026gt;https://build.shibboleth.net/nexus/content/repositories/releases\u0026lt;/url\u0026gt; 96\t\u0026lt;/repository\u0026gt; 97\u0026lt;/repositories\u0026gt; Bootstrapping To start using OpenSAML, you first always need to initiate the library. If you do not do this you will get the following error when trying to use it.\n1Exception in thread \u0026#34;main\u0026#34; java.lang.NullPointerException: Cannot invoke \u0026#34;org.opensaml.core.xml.XMLObjectBuilder.buildObject(javax.xml.namespace.QName)\u0026#34; because the return value of \u0026#34;org.opensaml.core.xml.XMLObjectBuilderFactory.getBuilder(javax.xml.namespace.QName)\u0026#34; is null 2\tat com.samlsecurity.opensamlSamples.gettingStartedAuthnrequest.OpenSAMLUtils.buildSAMLObject(OpenSAMLUtils.java:42) 3\tat com.samlsecurity.opensamlSamples.gettingStartedAuthnrequest.GenAuthnRequest.buildAuthnRequest(GenAuthnRequest.java:91) 4\tat com.samlsecurity.opensamlSamples.gettingStartedAuthnrequest.GenAuthnRequest.main(GenAuthnRequest.java:37) Ok, so first lets define and register a parser pool\n1XMLObjectProviderRegistry registry = new XMLObjectProviderRegistry(); 2ConfigurationService.register(XMLObjectProviderRegistry.class, registry); 3registry.setParserPool(getParserPool()); The ParserPool is the pool of instances used for XML processing and the initiation of the parser pool is the main point of configuration for XML processing. Below is a typical secure configuration of the a parsing pool\n1BasicParserPool parserPool = new BasicParserPool(); 2parserPool.setMaxPoolSize(100); 3parserPool.setCoalescing(true); 4parserPool.setIgnoreComments(true); 5parserPool.setIgnoreElementContentWhitespace(true); 6parserPool.setNamespaceAware(true); 7parserPool.setExpandEntityReferences(false); 8parserPool.setXincludeAware(false); 9 10final Map\u0026lt;String, Boolean\u0026gt; features = new HashMap\u0026lt;String, Boolean\u0026gt;(); 11features.put(\u0026#34;http://xml.org/sax/features/external-general-entities\u0026#34;, Boolean.FALSE); 12features.put(\u0026#34;http://xml.org/sax/features/external-parameter-entities\u0026#34;, Boolean.FALSE); 13features.put(\u0026#34;http://apache.org/xml/features/disallow-doctype-decl\u0026#34;, Boolean.TRUE); 14features.put(\u0026#34;http://apache.org/xml/features/validation/schema/normalized-value\u0026#34;, Boolean.FALSE); 15features.put(\u0026#34;http://javax.xml.XMLConstants/feature/secure-processing\u0026#34;, Boolean.TRUE); 16 17parserPool.setBuilderFeatures(features); 18parserPool.setBuilderAttributes(new HashMap\u0026lt;String, Object\u0026gt;()); 19 20try { 21\tparserPool.initialize(); 22} catch (ComponentInitializationException e) { 23\tlogger.error(e.getMessage(), e); 24} Lastly lets initialize the OpenSAML library.\n1InitializationService.initialize(); First shot - Creating a authentication request This is just a small example on how to use OpenSAML. I have loads of posts and guides on how to do more.\nThe following creates a SAML authentication request\n1private static AuthnRequest buildAuthnRequest() { 2\tAuthnRequest authnRequest = OpenSAMLUtils.buildSAMLObject(AuthnRequest.class); 3\tauthnRequest.setIssueInstant(new DateTime()); 4\tauthnRequest.setDestination(IPD_SSO_DESTINATION); 5\tauthnRequest.setProtocolBinding(SAMLConstants.SAML2_ARTIFACT_BINDING_URI); 6\tauthnRequest.setAssertionConsumerServiceURL(SP_ASSERTION_CONSUMER_SERVICE_URL); 7\tauthnRequest.setID(OpenSAMLUtils.generateSecureRandomId()); 8\tauthnRequest.setIssuer(buildIssuer()); 9\tauthnRequest.setNameIDPolicy(buildNameIdPolicy()); 10\t11\treturn authnRequest; 12} 13\t14private static NameIDPolicy buildNameIdPolicy() { 15\tNameIDPolicy nameIDPolicy = OpenSAMLUtils.buildSAMLObject(NameIDPolicy.class); 16\tnameIDPolicy.setAllowCreate(true); 17\tnameIDPolicy.setFormat(NameIDType.TRANSIENT); 18 19\treturn nameIDPolicy; 20} 21 22private static Issuer buildIssuer() { 23\tIssuer issuer = OpenSAMLUtils.buildSAMLObject(Issuer.class); 24\tissuer.setValue(SP_ISSUED_ID); 25 26\treturn issuer; 27} Resulting in the following AuthnRequest XML\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; 2\u0026lt;saml2p:AuthnRequest xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; 3\tAssertionConsumerServiceURL=\u0026#34;https://sp.example.com/assertionConsumerService\u0026#34; 4\tDestination=\u0026#34;https://idp.example.com/singleSingOnService\u0026#34; 5\tID=\u0026#34;_bba9213612c50821d391aa3f95462bad\u0026#34; 6\tIssueInstant=\u0026#34;2021-10-09T21:06:57.064Z\u0026#34; 7\tProtocolBinding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\u0026#34; Version=\u0026#34;2.0\u0026#34;\u0026gt; 8 \u0026lt;saml2:Issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 9 IssuerEntityId 10 \u0026lt;/saml2:Issuer\u0026gt; 11 \u0026lt;saml2p:NameIDPolicy 12 AllowCreate=\u0026#34;true\u0026#34; 13 Format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34;/\u0026gt; 14\u0026lt;/saml2p:AuthnRequest\u0026gt; Get it on Github! The full running sample is available on Github at https://github.com/rasmusson/OpenSAML-sample-code under getting-started-authnrequest\nJust check out, run and go nuts\n1git clone https://github.com/rasmusson/OpenSAML-sample-code/ 2cd OpenSAML-sample-code/getting-started-opensamlv3 3mvn compile exec:java -Dexec.mainClass=\u0026#34;com.samlsecurity.opensamlSamples.gettingStartedAuthnrequest.GenAuthnRequest\u0026#34; Summary In this post we have looked on the very basics.\nAdding OpenSAML to you project Initializing OpenSAML and, Producing your first SAML message This was a very simple, minimal first example on how to use OpenSAML. On this blog you will find lots of more examples and explanations on beginner level as well as more advanced fringe cases.\nNext step Check out The Big OpenSAML Guide with links pointing to all relevant article and resources you need to continue building the OpenSAML.\n","link":"https://blog.samlsecurity.com/post/getting-started-opensaml-v4/","section":"post","tags":["SAML","OpenSAML4"],"title":"Getting started with OpenSAML 4"},{"body":"","link":"https://blog.samlsecurity.com/tags/opensaml3/","section":"tags","tags":null,"title":"OpenSAML3"},{"body":"","link":"https://blog.samlsecurity.com/ads/","section":"ads","tags":null,"title":"Ads"},{"body":"Initial clarifications This privacy policy concerns the SAMLSecurity blog and products or services offered there.\nYour personal information Information we collect from you We process some or all of the following types of information from you when you visit and use the website: If you contact us, We may keep a record of that correspondence. website analytics data of your usage and problems on the website including, but not limited to, traffic data, location data, errors, usage patterns.\nIn case a product or service is purchased, we collect information needed to deliver the product or service and information required by authorities for book keeping If you choose to subscribe to our mailing list, we collect email address to fulfill this service.\nUses made off your information We process your data in order to provide you with you with the service or product you are using or have requested, improve our service and fulfill requirements from authorities.\nLawful basis for processing When you contact us by email, as mentioned in point 1 in the list above, our lawful basis for processing is \u0026quot;legitimate interest\u0026quot; and the legitimate interest is to respond to any enquiries you have made.\nFor collecting analytics information, as mentioned in point 2 in the list above, our lawful basis for processing is \u0026quot;legitimate interest\u0026quot; for analytics data concerning errors or problems in the website, the legitimate interest is to maintain the service and correct any problems and errors. Other analytics data including usage patterns and statistics are only collected if a consent is given and process on the lawful basis of “concent”.\nIf you purchase a product or service as mentioned in point 3, our lawful basis for processing collected information is “performance of a contract” to be able to provide you with the product or service you purchased. For some off the information we also rely on “legal requirements” for processing data required by authorities for bookkeeping.\nIf you choose to sign up for a mailing list, as mentioned in point 4, you give your consent while doing so. Our lawful basis for processing this data is “consent”\nPurposes of processing We use information collected in the following ways:\nTo allow you to make use of or get any service or product you have purchased or requested To answer enquiries you have made To provide you with information you have requested by signing up on a mailing list To comply with legal requirements To ensure that the application is working as intended and be able to improve it to the benefit of all users. To provide you with information and offers that you request from us or which We feel may interest you. We will not sell your data to third parties. Disclosure of your information We may disclose your personal data to third parties service providers, agents, subcontractors and other associated organisations for the purposes of completing tasks and providing services to you on our behalf (e.g. transport of data, hosting and processing of analytics data).\nWe may also disclose your personal data to third parties:\nin the event that We sell or buy any business or assets, in which case We may disclose your personal data to the prospective seller or buyer of such business or assets; or if We or substantially all of our assets are acquired by a third party, in which case personal data held by us about our customers will be one of the transferred assets; or if We are under a duty to disclose or share your personal data in order to comply with any legal obligation, or in order to enforce or apply our Terms and Conditions and other agreements; or Third party services The following services, used by us, may collect information about you to provide you with a service you have requested, products you have purchased or functionality you have consented to.\nGoogle analytics We use Google analytics to collect and process information about the usage of our website as described in the previous sections. If you want to know how Google protects this data and your privacy please visit the link below https://www.google.com/policies/privacy/partners/\nGoogle tag manager We use Google tag manager to deploy small pieces of code on our website to make Google Analytics and other services you consent to work. For more information visit the link below. https://support.google.com/tagmanager/answer/9323295\nPayhip We use Payhip to sell our books. Payhip manages payment and delivery of the books and collects information in order to do so. To learn more about what information Payhip collects and how they manage it, visit the link below. https://payhip.com/privacy\nProcessing of personal data Security We take appropriate measures to ensure that any personal data are kept secure.\nSecure transfer and access to the information collected. Limit access to information to personal that need it and to use this only in a manner needed for the purpose of processing. Keeping your personal data up to date If your personal details change you can request to update them by contacting us by sending a request by email to the contact details below. Data will only be updated if it does not break any legal requirements we might have. If you have any questions about how we use data collected which relates to you, please contact us by sending a request by email to the contact details below.\nHow long we keep your personal data Where you have contacted us via e-mail, We will hold your contact and enquiry details for up to 1 years.\nAnalytics data is saved for up to 5 years\nYour rights According to General Data Protection Regulation you have certain rights, including:\naccess to your personal data, require correction any incorrectness in your personal information held, require deletion of personal data in some cases, receive the personal data concerning you which you have provided, in a structured, commonly used and machine-readable format and may * share this data to an other parties in some cases, object at any time to direct marketing concerning you, object to automated decision making result in legal effects concerning you or significantly affect you, in some cases object to processing of your personal data, in some cases restrict processing of your personal data, claim compensation for damages resulting from us breaching data protection laws. For more information your user rights and the cases where they apply, see the Guidance from the UK Information Commissioner's Office (ICO) on individual's rights under the General Data Protection Regulation. If you would like to exercise any of those rights, please send a request by email to the contact details at the bottom of the policy Please include:\nInformation that can be used to identify you Proof of your identity and you ownership to the data concerned. What right you would like to exercise and on what data Use of cookies A cookie is a small file of letters and numbers that is stored on to your computer when you visit a website. For further information, visit allaboutcookies.org. Our website uses cookies to distinguish you from other users of our website. This helps us to improve the website for the good of all users.\nBelow the cookies we use are described in more detail.\nThe cookies We use are:\n\u0026quot;Analytical\u0026quot; cookies. They allow us to recognise visitors and to see how they use the website. This helps us to improve website works, for example, by ensuring that users are finding what they are looking for easily. “Targeting and advertising” cookies. They allow us to understand what services and products you might be interested in and provide advertisement on these. \u0026quot;Strictly necessary\u0026quot; cookies. These are cookies that are required for the operation of our website. They include, for example, cookies that save any consent you have made to analytics and marketing. And cookies used for tracking errors on the website. Please note that third parties affiliates may also use cookies, over which We have no control. How to manage cookies When you enter our website for the first time your are asked if you give your consent or not to allow the cookies above to be used to collect information.\nYou can choose to accept all, decline all but the strictly necessary or make your own custom choice of what to allow and not. This choice is saved using a cookie on your browser.\nIf you like you can change this consent at any time by clicking the consent settings link at the button of the website. There are also settings in your web browser and several browsers extensions that can be used to stop cookies from being used.\nPrivacy policies of other websites The Our Company website contains links to other websites. Our privacy policy applies only to our website, so if you click on a link to another website, you should read their privacy policy.\nChanges to this policy We reserve the right to modify this Policy at any time. The most current version of the policy is available on the SAMLSecurity.com website.\nContact Questions, comments and request can be directed to privacy@samlsecurity.com.\n","link":"https://blog.samlsecurity.com/privacy/","section":"","tags":null,"title":"Privacy and Cookie policy"},{"body":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","link":"https://blog.samlsecurity.com/2015/07/a-guide-to-opensaml.html","section":"redirect","tags":null,"title":""},{"body":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","link":"https://blog.samlsecurity.com/a-guide-to-opensamlv2.html","section":"redirect","tags":null,"title":""},{"body":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","link":"https://blog.samlsecurity.com/a-guide-to-opensamlv3.html","section":"redirect","tags":null,"title":""},{"body":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","link":"https://blog.samlsecurity.com/search/label/OpenSAML/","section":"redirect","tags":null,"title":""},{"body":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","link":"https://blog.samlsecurity.com/tags/opensamlv4/","section":"redirect","tags":null,"title":""},{"body":"CONTENT NOT RENDERED\nOnly insert details here if you want to enter any additional detail about the purpose of the redirect, otherwise you can just leave this portion of your file blank.\n","link":"https://blog.samlsecurity.com/search/label/SAML/","section":"redirect","tags":null,"title":""},{"body":"","link":"https://blog.samlsecurity.com/redirect/","section":"redirect","tags":null,"title":"Redirects"},{"body":"","link":"https://blog.samlsecurity.com/tags/opensaml/","section":"tags","tags":null,"title":"OpenSAML"},{"body":"This is the main page on the site where I guide you to all resources on OpenSAML. Here you will find all topics, from beginner to advanced that I have collected over the years.\nFirst, for you that are totally new to OpenSAML is a short introduction.\nWhat is OpenSAML? OpenSAML is a library to facilitate working with SAML messages. Below are some of the functions that OpenSAML provides:\nCreating SAML messages Parsing and exporting SAML objects as XML Signing and encryption Encoding and message transport Internet2 provides and supports the library. Shibboleth products, produced by internet2, are one of the examples of identity solutions that utilize the OpenSAML library.\nThe OpenSAML library is available in Java and C++, however; not all functions are provided in both versions. OpenSAML is licensed under Apache 2.0 and the latest version of OpenSAML supports SAML 2.0, 1.1 and 1.0.\nFor the beginner Getting started with OpenSAML 4 - This is a tutorial for getting started with OpenSAML 4, the most current version of the library. In this tutorial I will walk you through, the basics of OpenSAML, adding it to your project and building your first SAML message. It is a good starting point for anyone new to SAML.\nGetting started with OpenSAML 3 - This is a tutorial is similar to the one above but for OpenSAML version 3 instead of 4.\nThe SAML Web browser SSO flow Using HTTP Redirect to send and receive messages - This tutorial gives a simple example on how to send a authentication request message (AuthnRequest) using the HTTP Redirect binding. Using HTTP POST to send and receive messages - This tutorial gives a simple example on how to send a message using HTTP POST binding. A popular binding for sending SAML Responses, because of their large size . Resolve an artifact with OpenSAML - Here we look on the second step of the HTTP Artifact binding. When a HTTP Artifact is received, it is exchanged over SOAP to the real message. Often a SAML Response message. Single LogOut Single Log Out with OpenSAML - A post that shows how to build and send a SLO(Single LogOut) request using HTTP Redirect binding. Things needed here and there Convenience methods for OpenSAML - Collection of popular helper methods to ease the load of working with OpenSAML. For example creating and logging messages. Getting credentials in OpenSAML - It is not straight forward how to use private and public keys to do cryptographic operations in OpenSAML. This tutorial walks you through it. Signing with OpenSAML - Signing is the cryptographic way to ensure that a message has not been changed since sent by the sender. This article walk you through how to do this in OpenSAML. Verifying signatures with OpenSAML - Of course, it is not much use to have a signed message if you do not know how to check that the signature is valid. This article will show you how to do it in OpenSAML 4. Books on OpenSAML To dig deeper into OpenSAML and connecting all the dots I have written a book on the subject.\nA Guide to OpenSAML guides you through all steps of using OpenSAML including:\nA basic understanding of Single Sign-On with OpenSAML A migration guide for migrating from OpenSAML V2 to V3 Running sample code to try things out A walk though of steps needed to implement SSO in OpenSAML Usage of popular bindings and useful security features SAML 2.0: Designing secure identity federation is not really a book on OpenSAML but as you will understand when learning OpenSAML, you need a very good understanding of SAML to build something good and secure using OpenSAML.\nWalking through all topics from introduction to advanced you will learn\nTo fully understand SAML and identity federation Workings of the main building blocks like NameId, bindings and assertions How Single Single-On and Single Logout works in detail Different architectural choices and implementation alternatives Security best practices and considerations Previous security vulnerabilities and what can be learned from them The SAML specs As always, when working with SAML it pays of having the official SAML specs close at hand\nSAML Core Specs - The main spec for the SAML messages SAML Binding Spec - Specs for bindings used to transport the messages SAML Profiles Spec - The profiles showing how to use the SAML messages together for a use-case SAML Metadata Spec - Specification for SAML configuration data Other resource The official OpenSAML homepage - The official page from Internet2.\nJavadoc for OpenSAML - Very useful\n","link":"https://blog.samlsecurity.com/p/opensaml.html","section":"post","tags":["OpenSAML"],"title":"The Big OpenSAML Guide"},{"body":"","link":"https://blog.samlsecurity.com/tags/assertion/","section":"tags","tags":null,"title":"Assertion"},{"body":"As you probably should know at this point, the SAML Assertion contains the description of a authenticated user and how it was authenticated. The assertion is generally signed to prevent manipulation but there are also cases where you would want to encrypt the assertion to prevent someone to see the information within. For example the assertion can be used to communicate personal information about the user such as social security number and address.\nAs most people reading my blog seem to be on the SP side of SAML I will explain how to decrypt an assertion.\nThe general method of encryption and subsequent decryption of a assertion uses two keys, one symmetric and on asymmetric. The symmetric key is generated during encryption and used to encrypt the actual assertion data. An asymmetric key, generally a SP key contained in the metadata, is then used to encrypt the symmetric key which is then stored in the XML together with the encrypted assertion.\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;saml2p:response destination=\u0026#34;http://localhost:8080/webprofile-ref-project/sp/consumer\u0026#34; id=\u0026#34;_bd4528ed60f7b8142c39ee800625972f\u0026#34; issueinstant=\u0026#34;2017-05-20T21:26:14.955Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 3 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt;TestIDP\u0026lt;/saml2:issuer\u0026gt; 4 \u0026lt;saml2p:status\u0026gt; 5 \u0026lt;saml2p:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;/\u0026gt; 6 \u0026lt;/saml2p:status\u0026gt; 7 \u0026lt;saml2:encryptedassertion xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 8 \u0026lt;xenc:encrypteddata xmlns:xenc=\u0026#34;http://www.w3.org/2001/04/xmlenc#\u0026#34; id=\u0026#34;_2b077c659cdb0187fb617362135c3d63\u0026#34; type=\u0026#34;http://www.w3.org/2001/04/xmlenc#Element\u0026#34;\u0026gt; 9 \u0026lt;xenc:encryptionmethod algorithm=\u0026#34;http://www.w3.org/2001/04/xmlenc#aes128-cbc\u0026#34;\u0026gt; 10 \u0026lt;ds:keyinfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 11 \u0026lt;xenc:encryptedkey id=\u0026#34;_24266af2ae292a886ee40085790ec5c4\u0026#34;\u0026gt; 12 \u0026lt;xenc:encryptionmethod algorithm=\u0026#34;http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\u0026#34;\u0026gt; 13 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;/\u0026gt; 14 \u0026lt;/xenc:encryptionmethod\u0026gt; 15 \u0026lt;xenc:cipherdata\u0026gt; 16 \u0026lt;xenc:ciphervalue\u0026gt;THE ENCRYPTED SYMMETRIC KEY\u0026lt;/xenc:ciphervalue\u0026gt; 17 \u0026lt;/xenc:cipherdata\u0026gt; 18 \u0026lt;/xenc:encryptedkey\u0026gt; 19 \u0026lt;/ds:keyinfo\u0026gt; 20 \u0026lt;xenc:cipherdata\u0026gt; 21 \u0026lt;xenc:ciphervalue\u0026gt;THE ASSERTION ENCRYPTED USING THE SYMMETRIC KEY\u0026lt;/xenc:ciphervalue\u0026gt; 22 \u0026lt;/xenc:cipherdata\u0026gt; 23 \u0026lt;/xenc:encryptionmethod\u0026gt; 24 \u0026lt;/xenc:encrypteddata\u0026gt; 25 \u0026lt;/saml2:encryptedassertion\u0026gt; 26\u0026lt;/saml2p:response\u0026gt; To decrypt the reverse of this is done. The asymmetric is used to decrypt the symmetric key, which is then used to decrypt the assertion.\nAd Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nNow for the OpenSAML part.\nFirst we get the assertion from the XML. The assertion is stored in a EncryptedAssertion object and is retrieved with the method getEncryptedAssertions() on the response instead of getAssertions() which is used otherwise.\n1StaticKeyInfoCredentialResolver keyInfoCredentialResolver 2 = new StaticKeyInfoCredentialResolver(SPCredentials.getCredential()); 3 4Decrypter decrypter 5 = new Decrypter(null, keyInfoCredentialResolver, new InlineEncryptedKeyResolver()); 6decrypter.setRootInNewDocument(true); 7 8decrypter.decrypt(encryptedAssertion); In this example a StaticKeyInfoCredentialResolver is used to point out the key that is used for decryption, in this case I have stored it in the static class SPCredentials. The InlineEncryptedKeyResolver is used to tell the decrypter that the symmetric encryption key can be found in the XML next to the encrypted assertion.\nThe decrypter returns a decrypted Assertion object. 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;saml2:assertion xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; id=\u0026#34;_96a918c84ff41a98781133414a7c930e\u0026#34; issueinstant=\u0026#34;2017-05-20T21:26:14.956Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 3 \u0026lt;saml2:issuer\u0026gt;TestIDP\u0026lt;/saml2:issuer\u0026gt; 4 \u0026lt;ds:signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 5 \u0026lt;ds:signedinfo\u0026gt; 6 \u0026lt;ds:canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 7 \u0026lt;ds:signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 8 \u0026lt;ds:reference uri=\u0026#34;#_96a918c84ff41a98781133414a7c930e\u0026#34;\u0026gt; 9 \u0026lt;ds:transforms\u0026gt; 10 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 11 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 12 \u0026lt;ec:inclusivenamespaces xmlns:ec=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34; prefixlist=\u0026#34;xsd\u0026#34;\u0026gt;\u0026lt;/ec:inclusivenamespaces\u0026gt; 13 \u0026lt;/ds:transform\u0026gt; 14 \u0026lt;/ds:transform\u0026gt; 15 \u0026lt;/ds:transforms\u0026gt; 16 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2001/04/xmlenc#sha256\u0026#34;\u0026gt; 17 \u0026lt;ds:digestvalue\u0026gt;UDJ762cOSK14nBjbFCq9a47x3WgSCJ1qZpeBYKdy5s0=\u0026lt;/ds:digestvalue\u0026gt; 18 \u0026lt;/ds:digestmethod\u0026gt; 19 \u0026lt;/ds:reference\u0026gt; 20 \u0026lt;/ds:signaturemethod\u0026gt; 21 \u0026lt;/ds:canonicalizationmethod\u0026gt; 22 \u0026lt;/ds:signedinfo\u0026gt; 23 \u0026lt;ds:signaturevalue\u0026gt; 24syb20Rjh1pDJTc6CY1nN3x1v8WNlG9lRf71A5ik3i97/A+q0NZCvoJLEBVM73K/U8hxo/hbHOmBs 257KkF4g3yYLVunRlm/tapnTESKqZ8v8SJZQcbY4xMzi0PUxiUJKBugiho114ijDPAYs+U1UZhXGHL 26zyHVd7XJYoOATKVdh3U= 27\u0026lt;/ds:signaturevalue\u0026gt; 28 \u0026lt;/ds:signature\u0026gt; 29 \u0026lt;saml2:subject\u0026gt; 30 \u0026lt;saml2:nameid format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; namequalifier=\u0026#34;Name qualifier\u0026#34; spnamequalifier=\u0026#34;SP name qualifier\u0026#34;\u0026gt;Some NameID value\u0026lt;/saml2:nameid\u0026gt; 31 \u0026lt;saml2:subjectconfirmation method=\u0026#34;urn:oasis:names:tc:SAML:2.0:cm:bearer\u0026#34;\u0026gt; 32 \u0026lt;saml2:subjectconfirmationdata inresponseto=\u0026#34;Made up ID\u0026#34; notbefore=\u0026#34;2017-05-18T21:26:14.957Z\u0026#34; notonorafter=\u0026#34;2017-05-22T21:26:14.957Z\u0026#34; recipient=\u0026#34;http://localhost:8080/webprofile-ref-project/sp/consumer\u0026#34;\u0026gt;\u0026lt;/saml2:subjectconfirmationdata\u0026gt; 33 \u0026lt;/saml2:subjectconfirmation\u0026gt; 34 \u0026lt;/saml2:subject\u0026gt; 35 \u0026lt;saml2:conditions notbefore=\u0026#34;2017-05-18T21:26:14.958Z\u0026#34; notonorafter=\u0026#34;2017-05-22T21:26:14.958Z\u0026#34;\u0026gt; 36 \u0026lt;saml2:audiencerestriction\u0026gt; 37 \u0026lt;saml2:audience\u0026gt;http://localhost:8080/webprofile-ref-project/sp/consumer\u0026lt;/saml2:audience\u0026gt; 38 \u0026lt;/saml2:audiencerestriction\u0026gt; 39 \u0026lt;/saml2:conditions\u0026gt; 40 \u0026lt;saml2:attributestatement\u0026gt; 41 \u0026lt;saml2:attribute name=\u0026#34;username\u0026#34;\u0026gt; 42 \u0026lt;saml2:attributevalue xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:type=\u0026#34;xsd:string\u0026#34;\u0026gt;bob\u0026lt;/saml2:attributevalue\u0026gt; 43 \u0026lt;/saml2:attribute\u0026gt; 44 \u0026lt;saml2:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 45 \u0026lt;saml2:attributevalue xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:type=\u0026#34;xsd:string\u0026#34;\u0026gt;999999999\u0026lt;/saml2:attributevalue\u0026gt; 46 \u0026lt;/saml2:attribute\u0026gt; 47 \u0026lt;/saml2:attributestatement\u0026gt; 48 \u0026lt;saml2:authnstatement authninstant=\u0026#34;2017-05-20T21:26:14.962Z\u0026#34;\u0026gt; 49 \u0026lt;saml2:authncontext\u0026gt; 50 \u0026lt;saml2:authncontextclassref\u0026gt;urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard\u0026lt;/saml2:authncontextclassref\u0026gt; 51 \u0026lt;/saml2:authncontext\u0026gt; 52 \u0026lt;/saml2:authnstatement\u0026gt; 53\u0026lt;/saml2:assertion\u0026gt;\n","link":"https://blog.samlsecurity.com/2017/05/decrypting-saml-assertion-in-opensaml-v3.html","section":"post","tags":["SAML","OpenSAMLV3","Encryption","Assertion"],"title":"Decrypting a SAML Assertion in OpenSAML v3"},{"body":"","link":"https://blog.samlsecurity.com/tags/encryption/","section":"tags","tags":null,"title":"Encryption"},{"body":"","link":"https://blog.samlsecurity.com/tags/opensamlv3/","section":"tags","tags":null,"title":"OpenSAMLV3"},{"body":"","link":"https://blog.samlsecurity.com/tags/digital-signature/","section":"tags","tags":null,"title":"Digital Signature"},{"body":"This article discusses singing and sending in OpenSAML 3. If you're looking for an article on OpenSAML 4, you will find it here and if you're looking for an article on OpenSAML 2, you will find it here\nSigning and sending a AuthnRequest in OpenSAML V3 is fortunately not that different from how it was done in OpenSAML V2.\nAs described in this post on AuthnRequests OpenSAML V2, the AuthnRequest is the SAML request that starts a typical SSO authentication process. This is the SP requesting the IDP to authenticate a user.\nAs in V2 the HTTPRedirectDeflateEncoder is used to send messages using HTTP redirect, the main difference lays in the message context.\nOne of the major changes between V2 and V3 is the message contexts. In version 2, the message contexts where basically one object containing general properties about the message and its destination. In V3 the message context concept has been expanded to be more flexible contain more information. In the new context structure there is a context object per purpose.\nIn my book A Guide to OpenSAML V3 I cover the use of the new message contexts in detail.\nTo sign and send a AuthnRequest, three contexts are needed.\nThe main context is created and the AuthnRequest is set.\n1MessageContext context = new MessageContext(); 2context.setMessage(authnRequest); The SAMLPeerEntityContext and SAMLEndpointContext are created and configured to point to the endpoint of the message.\n1SAMLPeerEntityContext peerEntityContext = context.getSubcontext(SAMLPeerEntityContext.class, true); 2SAMLEndpointContext endpointContext = peerEntityContext.getSubcontext(SAMLEndpointContext.class, true); 3endpointContext.setEndpoint(idpEndpoint); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nNext, the security parameters context is created and populated with signing information\n1SignatureSigningParameters signatureSigningParameters = new SignatureSigningParameters(); 2signatureSigningParameters.setSigningCredential(SPCredentials.getCredential()); 3signatureSigningParameters.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256); 4context.getSubcontext(SecurityParametersContext.class, true).setSignatureSigningParameters(signatureSigningParameters); Next, the HTTPRedirectDeflateEncoder is created and populated with context and the http request object.\n1HTTPRedirectDeflateEncoder encoder = new HTTPRedirectDeflateEncoder(); 2encoder.setMessageContext(context); 3encoder.setHttpServletResponse(httpServletResponse); Lastly the encoder is initialized and the message is encoded\n1encoder.initialize(); 2encoder.encode(); ","link":"https://blog.samlsecurity.com/2016/08/signing-and-sending-authnrequests-in.html","section":"post","tags":["SAML","OpenSAMLV3","Digital signature"],"title":"Signing and Sending AuthnRequests in OpenSAML V3"},{"body":"Here is the happy news of the day. Verifying a signature in OpenSAML V3 is done almost identical to how it is done in V2, is still very much relevant and worth checking out.\nThe only difference between the two version is that the SignatureValidator is no longer instantiated. Instead the validate method of SignatureValidator is now static and takes both the credentials and the signature object.\nBelow is the code for verifying signatures in OpenSAML V3\n1SAMLSignatureProfileValidator profileValidator = new SAMLSignatureProfileValidator(); 2profileValidator.validate(assertion.getSignature()); 3SignatureValidator.validate(assertion.getSignature(), cred); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n","link":"https://blog.samlsecurity.com/2016/08/verifying-signatures-with-opensaml-v3.html","section":"post","tags":["SAML","OpenSAMLV3"],"title":"Verifying signatures with OpenSAML V3"},{"body":"As many of you know, version 2 of OpenSAML will officially reach its end of life at July 31 of 2016. This means that the library will not be receiving any new updates, not even critical security updates.\nBecause of this, everyone currently using version 2 of OpenSAML is strongly advised to migrate to OpenSAML version 3.\nIn light of this, I have done a fair amount of research on version 3 and am now releasing a new edition of A Guide to OpenSAML.\nThe new edition includes:\nSample project updated for V3 Updated code and explanatory text New chapters on message handlers and message contexts A rudimentary migration guide from V2 to V3 (based on changes needed in the sample project) For the convenience of those of you that have read my previous book and are just migrating to V3, I have provided a chapter in the beginning, summarizing all the changes since the last edition.\nHave a closer look and buy the book on Payhip!\n","link":"https://blog.samlsecurity.com/2016/06/new-book-release-opensaml-version-3.html","section":"post","tags":["SAML","OpenSAMLV3"],"title":"New book release: OpenSAML version 3"},{"body":"So, as those of you working with OpenSAML probably have noticed, the version 2 of the OpenSAML library is closing in on its end of life. After July 31st no more security maintenance will be done at this version. Those using is asked to move to version 3 of the library.\nI have had many questions on how to use the new version and unfortunately the documentation is not yet produced. I have started to dig into it and will post what I find out.\nThe first thing I noticed was a structure change in the maven setup. The library have been divided into many submodules as listed below. This makes the Javadoc a bit more hard to find but below are links the the javadoc for each module. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nI hope this is of help.\nopensaml-core\nopensaml-profile-api\nopensaml-profile-impl\nopensaml-soap-api\nopensaml-soap-impl\nopensaml-saml-api\nopensaml-saml-impl\nopensaml-xacml-api\nopensaml-xacml-impl\nopensaml-xacml-saml-api\nopensaml-xacml-saml-impl\nopensaml-messaging-api\nopensaml-messaging-impl\nopensaml-storage-api\nopensaml-storage-impl\nopensaml-security-api\nopensaml-security-impl\nopensaml-xmlsec-api\nopensaml-xmlsec-impl\nThe combined version Java doc is available here\nJava docs\n","link":"https://blog.samlsecurity.com/2016/04/opensaml-v3-javadocs.html","section":"post","tags":["SAML","OpenSAMLV3"],"title":"OpenSAML V3 Javadocs"},{"body":"I have been working with SAML for a while now and I have always used Firefox for debugging instead of my favorite browser, Chrome. Why? you ask. Because there is a plugin called SAML tracer on firefox that is excellent for viewing the SAML messages going across the browser. There have been no such plugin for Chrome.\nFinally I have decided to take things into my own hands and build one.\nAnd now it's done and here it is! SAML DevTools extension ss Feature summary The extension adds a panel to the Developer Tools Shows all network requests for the current window SAML requests are highlighted in green for usability Can filter out SAML requests Show request and response details Displays syntax highlighted SAML message Custom syntax highlighting for SAML to allow for easier reading ","link":"https://blog.samlsecurity.com/2015/10/saml-chrome-extension-published.html","section":"post","tags":["SAML"],"title":"SAML Chrome Extension Published!"},{"body":"When a message is signed with a private key, the receiving end will need to verify the message using the corresponding public key/certificate. But in order to do this, the receiving end must have the certificate.\nThe certificate is transported in encoded form in a KeyInfo element. Below is a example\n1\u0026lt;ds:keyinfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 2 \u0026lt;ds:x509data\u0026gt; 3 \u0026lt;ds:x509certificate\u0026gt; 4 MIICizCCAfQCCQCY8tKaMc0BMjANBgkqhkiG9w0BAQUFADCBiTELMAkGA1UEBhMCTk8x 5 EjAQBgNVBAgTCVRyb25kaGVpbTEQMA4GA1UEChMHVU5JTkVUVDEOMAwGA1UECxMFRmVp 6 ZGUxGTAXBgNVBAMTEG9wZW5pZHAuZmVpZGUubm8xKTAnBgkqhkiG9w0BCQEWGmFuZHJl 7 YXMuc29sYmVyZ0B1bmluZXR0Lm5vMB4XDTA4MDUwODA5MjI0OFoXDTM1MDkyMzA5MjI0 8 OFowgYkxCzAJBgNVBAYTAk5PMRIwEAYDVQQIEwlUcm9uZGhlaW0xEDAOBgNVBAoTB1VO 9 SU5FVFQxDjAMBgNVBAsTBUZlaWRlMRkwFwYDVQQDExBvcGVuaWRwLmZlaWRlLm5vMSkw 10 JwYJKoZIhvcNAQkBFhphbmRyZWFzLnNvbGJlcmdAdW5pbmV0dC5ubzCBnzANBgkqhkiG 11 9w0BAQEFAAOBjQAwgYkCgYEAt8jLoqI1VTlxAZ2axiDIThWcAOXdu8KkVUWaN/SooO9O 12 0QQ7KRUjSGKN9JK65AFRDXQkWPAu4HlnO4noYlFSLnYyDxI66LCr71x4lgFJjqLeAvB/ 13 GqBqFfIZ3YK/NrhnUqFwZu63nLrZjcUZxNaPjOOSRSDaXpv1kb5k3jOiSGECAwEAATAN 14 BgkqhkiG9w0BAQUFAAOBgQBQYj4cAafWaYfjBU2zi1ElwStIaJ5nyp/s/8B8SAPK2T79 15 McMyccP3wSW13LHkmM1jwKe3ACFXBvqGQN0IbcH49hu0FKhYFM/GPDJcIHFBsiyMBXCh 16 pye9vBaTNEBCtU3KjjyG0hRT2mAQ9h+bkPmOvlEo/aH0xR68Z9hw4PF13w== 17 \u0026lt;/ds:x509certificate\u0026gt; 18 \u0026lt;/ds:x509data\u0026gt; 19 \u0026lt;/ds:keyinfo\u0026gt; There are many ways to give the receiving end the certificate. Two common methods is metadata and in the message.\nWhen using the metadata method the KeyInfo object is embedded in the metadata inside the KeyDescriptor element. When attaching KeyInfo to the SAML message the element is embedded in the Signature object.\nAd Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nTo create and add a KeyInfo object and add it to a SAML message signature, add this call to SecurityHelper before generating the signature.\n1SecurityHelper.prepareSignatureParams(signature, IDPCredentials.getCredential(), 2 Configuration.getGlobalSecurityConfiguration(), null); This helper method does not only add a the key info but it also sets the\nSignature algorithm URI Canonicalization algorithm URI and HMAC output length (if applicable and a value is configured) Customizing the KeyInfo The above statement only uses the default configuration of for generating KeyInfo. To customize the KeyInfo you create your own instance of KeyInfoGeneratorFactory, set it up as preferred and use it in the statement.\nThe example below shows how to use a X509KeyInfoGeneratorFactory to create a KeyInfo with properties from the X509 certificate used as credential.\n1X509KeyInfoGeneratorFactory x509Factory = new X509KeyInfoGeneratorFactory(); 2x509Factory.setEmitEntityCertificate(true); 3x509Factory.setEmitEntityCertificateChain(true); 4x509Factory.setEmitX509IssuerSerial(true); 5x509Factory.setEmitX509SubjectName(true); 6 7Configuration.getGlobalSecurityConfiguration().getKeyInfoGeneratorManager().registerFactory(\u0026#34;x509emitingKeyInfoGenerator\u0026#34;, x509Factory); 8 9SecurityHelper.prepareSignatureParams(signature, SPCredentials.getCredential(), null, \u0026#34;x509emitingKeyInfoGenerator\u0026#34;); ","link":"https://blog.samlsecurity.com/2015/07/adding-keyinfo-to-saml-message.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Adding KeyInfo to a message in OpenSAML"},{"body":"If you are just starting out trying to understand SAML you will come across the term SAML Assertion quite quickly. In this post or tutorial, I will try to explain to you what a SAML Assertion is and give you some examples on how they could look. This post mainly looks at the SAML Assertion in the perspective of the SAML Web Browser Profile. If you don't know what that is, have a look on my post about exactly that\nWhat is a SAML Assertion? The SAML Assertion is the main piece in the SAML puzzle. This is the object that the rest of SAML is build to safely build, transport and use.\nA SAML Assertion is basically a package with security information about a entity.(e.g. A user) issued from the Identity Provider(IdP) to the Service Provider(SP). When the user has authenticated with the IdP a SAML Assertion is sent to the SP with the IdPs information about that user.\nAd Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nWhat does a SAML Assertion contain? The SAML Assertion contains some general information like, who sent it, what time it was sent and validity period of the assertion. The assertion also contains statements about a user. These come in three different types.\nAuthentication The authentication statement contains, not surprisingly, information about the authentication of the user. Mainly when and by what means the user was authenticated.\n1\u0026lt;saml:authnstatement 2 authninstant=\u0026#34;2010-11-04T14:04:30Z\u0026#34; 3 sessionindex=\u0026#34;s22428b07e56ce0dbd3f72237ce29c585541db5d01\u0026#34;\u0026gt; 4 \u0026lt;saml:authncontext\u0026gt; 5 \u0026lt;saml:authncontextclassref\u0026gt; 6 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 7 \u0026lt;/saml:authncontextclassref\u0026gt; 8 \u0026lt;/saml:authncontext\u0026gt; 9\u0026lt;/saml:authnstatement\u0026gt; Attribute The attribute statement can contain application specific attributes connected to the user, for example. Address, telephone number social security number.\n1\u0026lt;saml:attributestatement\u0026gt; 2 \u0026lt;saml:attribute name=\u0026#34;social\u0026#34;\u0026gt; 3 \u0026lt;saml:attributevalue 4 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 5 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 6 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 7 555501234 8 \u0026lt;/saml:attributevalue\u0026gt; 9 \u0026lt;/saml:attribute\u0026gt; 10 \u0026lt;saml:attribute name=\u0026#34;email\u0026#34;\u0026gt; 11 \u0026lt;saml:attributevalue 12 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 13 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 14 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 15 someone@example.com 16 \u0026lt;/saml:attributevalue\u0026gt; 17 \u0026lt;/saml:attribute\u0026gt; 18 \u0026lt;saml:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 19 \u0026lt;saml:attributevalue 20 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 21 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 22 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 23 546848134886 24 \u0026lt;/saml:attributevalue\u0026gt; 25 \u0026lt;/saml:attribute\u0026gt; 26\u0026lt;/saml:attributestatement\u0026gt; Authorization The authorization statement contains information about the users access rights to different resources. This statement can be used for basic authorization. For more advanced authorization cases I recommend taking a look at the XACML standard\n1\u0026lt;saml:authorizationdecisionstatement 2 decision=\u0026#34;Permit\u0026#34; 3 resource=\u0026#34;http://www.example.org/customers/getCustomers\u0026#34;\u0026gt; 4 \u0026lt;saml:action\u0026gt;Read\u0026lt;/saml:action\u0026gt; 5\u0026lt;/saml:authorizationdecisionstatement\u0026gt; What does a SAML Assertion look like? Here is an example on what a whole can look like.\n1\u0026lt;saml:assertion 2 id=\u0026#34;s2365479533bf942f8eaaa2c267f9bd4ff679ebc1f\u0026#34; 3 issueinstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 4 version=\u0026#34;2.0\u0026#34; 5 xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 6 \u0026lt;saml:issuer\u0026gt;IDP-alias\u0026lt;/saml:issuer\u0026gt; 7 \u0026lt;saml:subject\u0026gt; 8 \u0026lt;saml:nameid 9 format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; 10 namequalifier=\u0026#34;IDP-alias\u0026#34; 11 spnamequalifier=\u0026#34;my-alias\u0026#34;\u0026gt; 12 5VkzP/MZ1PMJ62o45/7DdFms9y7K 13 \u0026lt;/saml:nameid\u0026gt; 14 \u0026lt;saml:subjectconfirmation method=\u0026#34;urn:oasis:names:tc:SAML:2.0:cm:bearer\u0026#34;\u0026gt; 15 \u0026lt;saml:subjectconfirmationdata 16 inresponseto=\u0026#34;_bba7e8a2f7a7c51e339d614b2c2d1178\u0026#34; 17 notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34; 18 recipient=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34;\u0026gt; 19 \u0026lt;/saml:subjectconfirmationdata\u0026gt; 20 \u0026lt;/saml:subjectconfirmation\u0026gt; 21 \u0026lt;/saml:subject\u0026gt; 22 \u0026lt;saml:conditions notbefore=\u0026#34;2011-01-24T08:37:50Z\u0026#34; notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34;\u0026gt; 23 \u0026lt;saml:audiencerestriction\u0026gt; 24 \u0026lt;saml:audience\u0026gt;my-alias\u0026lt;/saml:audience\u0026gt; 25 \u0026lt;/saml:audiencerestriction\u0026gt; 26 \u0026lt;/saml:conditions\u0026gt; 27 \u0026lt;saml:authnstatement 28 authninstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 29 sessionindex=\u0026#34;s212cd7811734a92405b6ef8308a1b1a98e32e6f01\u0026#34;\u0026gt; 30 \u0026lt;saml:authncontext\u0026gt; 31 \u0026lt;saml:authncontextclassref\u0026gt; 32 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 33 \u0026lt;/saml:authncontextclassref\u0026gt; 34 \u0026lt;/saml:authncontext\u0026gt; 35 \u0026lt;/saml:authnstatement\u0026gt; 36 \u0026lt;saml:attributestatement\u0026gt; 37 \u0026lt;saml:attribute name=\u0026#34;social\u0026#34;\u0026gt; 38 \u0026lt;saml:attributevalue 39 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 40 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 41 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 42 555501234 43 \u0026lt;/saml:attributevalue\u0026gt; 44 \u0026lt;/saml:attribute\u0026gt; 45 \u0026lt;saml:attribute name=\u0026#34;email\u0026#34;\u0026gt; 46 \u0026lt;saml:attributevalue 47 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 48 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 49 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 50 someone@example.com 51 \u0026lt;/saml:attributevalue\u0026gt; 52 \u0026lt;/saml:attribute\u0026gt; 53 \u0026lt;saml:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 54 \u0026lt;saml:attributevalue 55 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 56 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 57 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 58 546848134886 59 \u0026lt;/saml:attributevalue\u0026gt; 60 \u0026lt;/saml:attribute\u0026gt; 61 \u0026lt;/saml:attributestatement\u0026gt; 62\u0026lt;/saml:assertion\u0026gt; ","link":"https://blog.samlsecurity.com/2015/07/what-is-saml-assertion.html","section":"post","tags":["SAML"],"title":"What is a SAML Assertion?"},{"body":"After many late nights and tedious editing, I have finished my book on OpenSAML, based on my experiences working with the OpenSAML library. A Guide to OpenSAML is a short book that introduces SAML, the SAML Web Browser Profile and the use of OpenSAML.\nBuy the book on Payhip! The book has three parts, the first of which introduces SAML, SAML Web Browser Profile and OpenSAML. The next part goes deeper into explaining the Web Browser Profile more in detail and shows an example on how to implement it using OpenSAML. The last part explains and shows examples on how to use some of the security functions in OpenSAML, like signatures and encryption.\nThe SAML Web Browser Profile is flexible and can be used in many different ways. The book shows the SAML Web Browser Profile with the following configurations:\nSP initiated Single Sign-On Authentication request using HTTP Redirect Binding Assertion transported using HTTP Artifact Binding SAML Artifact transported using HTTP Redirect Binding Artifact resolution using SOAP Binding The book explains the interaction from the Service Provider’s point of view. The implementation of the Identity Provider is not covered in this book.\nThe package contains the book in PDF format, three different e-reader formats(EPUB, MOBI, AZW3) and a sample project showing OpenSAML in action.\n","link":"https://blog.samlsecurity.com/2014/09/opensaml-book-release.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"OpenSAML book release!"},{"body":"org.opensaml.xml.validation.ValidationException: Apache xmlsec IdResolver could not resolve the Element for id reference:\nThis is an example of a common exception that can be thrown when verifying a signature after decryption an object.\nTo avoid this, it is often enough to configure your Decrypter using the following setting before decrypting.\n1decrypter.setRootInNewDocument(true); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n","link":"https://blog.samlsecurity.com/2014/05/exception-apache-xmlsec-idresolver.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Exception: Apache xmlsec IdResolver could not resolve the Element for id reference while decrypting"},{"body":"This is a common exception to beginners in using OpenSAML. A common mistake when starting to use the OpenSAML library is to not initialize the library. OpenSAML needs a couple of configuration files in order to work. The library is provided with a default set of these files that is sufficient for most uses. Before starting the use the library the configurations must be loaded.\nOpenSAML v2 In OpenSAML v2 initialization of the library is done using the bootstrap function.\n1try { 2 DefaultBootstrap.bootstrap(); 3} catch (ConfigurationException e) { 4 throw new RuntimeException(\u0026#34;Bootstrapping failed\u0026#34;); 5} If you do not do this before you start using the library, you might run into exceptions like. 1Exception in thread \u0026#34;main\u0026#34; java.lang.NullPointerException 2 at no.steras.opensaml.Main.main(Main.java:25) 3 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 4 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 5 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 6 at java.lang.reflect.Method.invoke(Method.java:601) 7 at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nOpenSAML v3 and v4 In OpenSAML v3 and v4 initialization of the library some more functions calls are needed as below.\n1try { 2 XMLObjectProviderRegistry registry = new XMLObjectProviderRegistry(); 3 ConfigurationService.register(XMLObjectProviderRegistry.class, registry); 4 5 InitializationService.initialize(); 6} catch (InitializationException e) { 7 throw new RuntimeException(\u0026#34;Initialization failed\u0026#34;); 8} If you do not do this before you start using the library, you might run into exceptions like. 1java.lang.NullPointerException: Cannot invoke \u0026#34;org.opensaml.core.xml.config.XMLObjectProviderRegistry.getBuilderFactory()\u0026#34; because the return value of \u0026#34;org.opensaml.core.config.ConfigurationService.get(java.lang.Class)\u0026#34; is null 2 at org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport.getBuilderFactory (XMLObjectProviderRegistrySupport.java:107) 3 at no.steras.opensamlSamples.nobootstrap.v4.OpenSAMLUtils.buildSAMLObject (OpenSAMLUtils.java:33) 4 at no.steras.opensamlSamples.nobootstrap.v4.NoBootstrap.buildAuthnRequest (NoBootstrap.java:54) 5 at no.steras.opensamlSamples.nobootstrap.v4.NoBootstrap.main (NoBootstrap.java:30) 6 at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:254) 7 at java.lang.Thread.run (Thread.java:840)\nExample code Examples on the exception and correct initialization is available on Github at https://github.com/rasmusson/OpenSAML-sample-code under no-bootstraping-opensaml-v3 and no-bootstraping-opensaml-v4\nhttps://github.com/rasmusson/OpenSAML-sample-code/tree/main/no-bootstraping-opensaml-v3 https://github.com/rasmusson/OpenSAML-sample-code/tree/main/no-bootstraping-opensaml-v4\n","link":"https://blog.samlsecurity.com/2014/05/nullpointer-exception-in-opensaml.html","section":"post","tags":["SAML","OpenSAMLV2","OpenSAMLV3","OpenSAMLV4"],"title":"Nullpointer exception in OpenSAML"},{"body":"","link":"https://blog.samlsecurity.com/tags/opensamlv4/","section":"tags","tags":null,"title":"OpenSAMLV4"},{"body":"When exchanging information with SAML it is highly recommended to sign and verify signatures on all messages. This to ensure the the sender really is how he says he is and that the information sent has not been manipulated during transport.\nEvery SAML object that implements the SignableXMLObject interface can be signed.\nThe signing of a SAML message is done in three steps. First, all the properties for the signature is put in a Signature object. Properties that can be set include singing credentials, algorithm and optionally a KeyInfo object. The KeyInfo object identifies what key should be used to verify the signature.\n1signature.setSigningCredential(credential); 2signature.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1); 3signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS); The Signature object is then added to the SAML object using the setSignature method. entityDescriptor.setSignature(signature); The second step is to marshal the object. This must be done before signing or else you will get a message like this. 1SEVERE: Unable to compute signature, Signature XMLObject does not have the XMLSignature created during marshalling.\n1Element element = Configuration 2 .getMarshallerFactory() 3 .getMarshaller(entityDescriptor) 4 .marshall(entityDescriptor); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nThe third step is to perform the actual signing to produce a cryptographic signature, this is done with the Signer class.\n1Signer.signObject(signature); Here is how the signed object might look after signing and marshalling.\n1\u0026lt;md:entitiesdescriptor xmlns:md=\u0026#34;urn:oasis:names:tc:SAML:2.0:metadata\u0026#34;\u0026gt; 2 \u0026lt;ds:signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 3 \u0026lt;ds:signedinfo\u0026gt; 4 \u0026lt;ds:canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 5 \u0026lt;ds:signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 6 \u0026lt;ds:reference uri=\u0026#34;\u0026#34;\u0026gt; 7 \u0026lt;ds:transforms\u0026gt; 8 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 9 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 10 \u0026lt;/ds:transform\u0026gt; 11 \u0026lt;/ds:transform\u0026gt; 12 \u0026lt;/ds:transforms\u0026gt; 13 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;\u0026gt; 14 \u0026lt;ds:digestvalue\u0026gt;a3HbFE7e2n/x2yqDTKyXrQNaDHs=\u0026lt;/ds:digestvalue\u0026gt; 15 \u0026lt;/ds:digestmethod\u0026gt; 16 \u0026lt;/ds:reference\u0026gt; 17 \u0026lt;/ds:signaturemethod\u0026gt; 18 \u0026lt;/ds:canonicalizationmethod\u0026gt; 19 \u0026lt;/ds:signedinfo\u0026gt; 20 \u0026lt;ds:signaturevalue\u0026gt;b8cPqphGwZIvBy1DuEWoS/lhreiMp7WtcukC2TkXl2nRwuJ5i1TN+ifefxvsjs9ocQ4XAL6EVrXXaJvyRMkepuDYAFqYYGle4iPkl5XZpCDeMjTEt/T45f3etOdn5EGmNgA5MwUQxFTnERYkdNiN//r8BYuNfEKFNd+BqyVRjRWBbgywWRfSBBz8u1m4aysyeYcz9M72pI9YhC4QqRtXG7cght78Lt3JLUMDHKZMg9itvs1rPwItLFCzaJr57Q/V+nQ8uIb0bCUUrXZw9hGl5b3SYIuJLdHI0IDPt8YGpNa/yzVqnKOk5FvhASmMQur3/CbdCvRKr8yTpalW3zDgfw==\u0026lt;/ds:signaturevalue\u0026gt; 21\u0026lt;/ds:signature\u0026gt; 22\u0026lt;/md:entitiesdescriptor\u0026gt; ","link":"https://blog.samlsecurity.com/2012/11/signing-with-opensaml.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Signing with OpenSAML"},{"body":"One of my visitor found this public source code. The project a Danish project that implements a service provider using OpenSAML.\noiosaml\nThanks to Rholdan Ortiz!\nThere is also the Norwegian electronic voting system. This also implements a service provider.\nEvalg Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\n","link":"https://blog.samlsecurity.com/2012/11/opensaml-sample-code.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"OpenSAML sample code"},{"body":"What is it? The SAML Web Browser SSO Profile is one of the profiles defined in the SAML specification. As described in my introductory post on SAML, profiles describes how to fulfill a specific use-case using SAML.\nIn the realm of user authentication using SAML, the Web Browser Profile is very frequently used.\nThe use-case being described in the Web Browser Profile is how to authenticate a user that is using a web browser.\nHow does it work? Below is a description and figure of the flow in the profile. As always when using SAML, things can be done in a number of different ways. In the flow below I describe one common way, using the HTTP-Redirect binding for sending the AuthnRequest and the Artifact binding for sending the SAML Assertion.\nThe authentication process could be said to involve five steps\nUser tries to get access - The process begins with a not authenticated user trying to get access to a protected part of the application (SP). Some form of filter is put in place to catch the user. The user is redirected to the Identity Provider(IdP) -When the filter detects a user who is not authenticated, the user is sent to the IdP using HTTP-Redirect. The user is authenticated - This step does not involve any interaction with the SP. The IdP has full responsibility for authenticating the user in a secure way. Authenticated user is sent back to the SP - When the authentication is successfully completed the user is sent back to the SP together with a SAML Artifact. The artifact is more or less a pointer to the user information at the IdP. The reason for using this method could be that it is considered to insecure to send the assertion via the browser. Request user information - When the SP receives the artifact it uses a web service at the IdP to exchange the artifact for a SAML Assertion. This is the actual proof of authentication This is how the federation with SAML web profile works on a low level. This can be good to know when working with identity federation and especially when debugging.\nUsually when you set up a identity federation this is done with one of the many application available for this purpose, for example. OpenAM, OpenSAML and Oracle Access Manager.\n","link":"https://blog.samlsecurity.com/2012/05/saml-web-profile.html","section":"post","tags":["SAML"],"title":"SAML Web Browser Profile"},{"body":"OpenSAML can be used to generate metadata. As with reading metadata, the library is pretty straight forward in relation to the metadata XML.\nThis is an example for generating a SP metadata file\nWe start by creating the EntityDescriptor, setting the EntityId and building the SSO descriptor.\n1EntityDescriptor spEntityDescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(EntityDescriptor.class); 2spEntityDescriptor.setEntityID(entityID); 3SPSSODescriptor spSSODescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(SPSSODescriptor.class); In the SSO descriptor we request how we want the communication signed and encrypted\n1spSSODescriptor.setWantAssertionsSigned(true); spSSODescriptor.setAuthnRequestsSigned(true); And what certificates we want to use\n1X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory(); 2keyInfoGeneratorFactory.setEmitEntityCertificate(true); 3KeyInfoGenerator keyInfoGenerator = keyInfoGeneratorFactory.newInstance(); 4 5 6KeyDescriptor encKeyDescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(KeyDescriptor.class); 7 8encKeyDescriptor.setUse(UsageType.ENCRYPTION); //Set usage 9 10// Generating key info. The element will contain the public key. The key is used to by the IDP to encrypt data 11try { 12 encKeyDescriptor.setKeyInfo(keyInfoGenerator.generate(X509Credential)); 13} catch (SecurityException e) { 14 log.error(e.getMessage(), e); 15} 16 17spSSODescriptor.getKeyDescriptors().add(encKeyDescriptor); 18 19KeyDescriptor signKeyDescriptor = SAMLUtil.buildSAMLObjectWithDefaultName(KeyDescriptor.class); 20 21signKeyDescriptor.setUse(UsageType.SIGNING); //Set usage 22 23// Generating key info. The element will contain the public key. The key is used to by the IDP to verify signatures 24try { 25 signKeyDescriptor.setKeyInfo(keyInfoGenerator.generate(X509Credential)); 26} catch (SecurityException e) { 27 log.error(e.getMessage(), e); 28} 29 30spSSODescriptor.getKeyDescriptors().add(signKeyDescriptor); The keyInfoGenerator uses a X509Credential to generate the key info object with the public key. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nSetting what type of pseudonym federation we want with the IDP.\n1// Request transient pseudonym 2NameIDFormat nameIDFormat = SAMLUtil.buildSAMLObjectWithDefaultName(NameIDFormat.class); 3nameIDFormat.setFormat(\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34;); 4spSSODescriptor.getNameIDFormats().add(nameIDFormat); Setting location of services\n1AssertionConsumerService assertionConsumerService = SAMLUtil.buildSAMLObjectWithDefaultName(AssertionConsumerService.class); 2assertionConsumerService.setIndex(0); 3assertionConsumerService.setBinding(SAMLConstants.SAML2_ARTIFACT_BINDING_URI); 4 5// Setting address for our AssertionConsumerService 6assertionConsumerService.setLocation(assertionConsumerServiceURL); 7spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService); And finally we set SAML as supported protocol and generate the XML 1spSSODescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS); 2 3spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor); 4 5DocumentBuilder builder; 6DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 7 8builder = factory.newDocumentBuilder(); 9Document document = builder.newDocument(); 10Marshaller out = Configuration.getMarshallerFactory().getMarshaller(spEntityDescriptor); 11out.marshall(spEntityDescriptor, document); 12 13Transformer transformer = TransformerFactory.newInstance().newTransformer(); 14StringWriter stringWriter = new StringWriter(); 15StreamResult streamResult = new StreamResult(stringWriter); 16DOMSource source = new DOMSource(document); 17transformer.transform(source, streamResult); 18stringWriter.close(); 19String metadataXML = stringWriter.toString();\n","link":"https://blog.samlsecurity.com/2012/02/generating-metadata-with-opensaml.html","section":"post","tags":["SAML","OpenSAMLV3"],"title":"Generating metadata with OpenSAML"},{"body":"OpenSAML have several methods for reading and parsings SAML metadata.\nMeta data is loaded using providers. For example\nFilesystemMetadataProvider - Used to load data from a file on the filesystem HTTPMetadataProvider - Used to load data from an Internet address\nHere is an example on how to load meta data using the FilesystemMetadataProvider.\n1FilesystemMetadataProvider idpMetaDataProvider = new FilesystemMetadataProvider(new File(\u0026#34;path to file\u0026#34;)); 2idpMetaDataProvider.setRequireValidMetadata(true); 3idpMetaDataProvider.setParserPool(new BasicParserPool()); 4idpMetaDataProvider.initialize(); 5EntityDescriptor idpEntityDescriptor = idpMetaDataProvider.getEntityDescriptor(\u0026#34;Some entity id\u0026#34;); The EntityDescriptor can then be used to extract data from the metadata. Here are some examples on how to use it. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nSSO services 1SingleSignOnService redirectEndpoint = null; 2for (SingleSignOnService sss : idpEntityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleSignOnServices()) { 3 if (sss.getBinding().equals(SAMLConstants.SAML2_REDIRECT_BINDING_URI)) { 4 redirectEndpoint = sss; 5 } 6} ArtifactResolutionService 1for (ArtifactResolutionService ars : idpEntityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS) 2 .getArtifactResolutionServices()) { 3 if (ars.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 4 artifactResolutionServiceURL = ars.getLocation(); 5 } 6} The objects of OpenSAML metadata follows the structure of the metadata XML, so if you look at the XML it pretty easy to figure out how to read it with OpenSAML.\n","link":"https://blog.samlsecurity.com/2012/02/reading-metadata-with-opensaml.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Reading metadata with OpenSAML"},{"body":"Metadata is information used in the SAML protocol to expose the configuration of a SAML entity, like a SP or IdP. Metadata define things like what service is available, addresses and certificates. Metadata is defined in XML. A SP uses the Metadata to know how to communicate with the IdP and vise versa.\nMetadata is exchanged between the SP and the IDP. There is no protocol how the exchange is done, but there are no secret information in the metadata so the XML can be freely distributed by mail or published in clear text on the Internet. It is however highly recommended that the metadata is protected from unauthorized modification, this could be a good start on a Man-In-The-Middle attack. The integrity of the Metadata could be protected using for example digital signatures or by transporting the metadata using some secure channel(USB, VPN etc) Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nA metadata file for a SAML Web Browser SSO Profile IdP could for example contain the following.\nLocation of its Single Sing On service, Artifact Resolution Service and Single Logout Service. An ID identifying the provider. Signature of the metadata and public keys for verifying and encrypting further communication. The file usually include information about if the IdP want the communication signed or encrypted.\nA metadata file for the SP would contain pretty much the same but instead of Artifact Resolution Service have the location of its Assertion Consumer Service.\nMetadata could contain lots of other information. For a full description have a look at the SAML specifications\nHere is an example of metadata from IdP and SP. Usually these files can be generated by the application handling the SAML communication.\nIdP 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;md:EntityDescriptor 3 xmlns:md=\u0026#34;urn:oasis:names:tc:SAML:2.0:metadata\u0026#34; 4 validUntil=\u0026#34;2021-05-14T14:40:17Z\u0026#34; 5 cacheDuration=\u0026#34;PT1621435217S\u0026#34; 6 entityID=\u0026#34;exampleidp\u0026#34; 7 ID=\u0026#34;pfx15f5264e-2c11-4717-9e15-b301b1d6bfd9\u0026#34;\u0026gt; 8 \u0026lt;ds:Signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 9 \u0026lt;ds:SignedInfo\u0026gt; 10 \u0026lt;ds:CanonicalizationMethod Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 11 \u0026lt;ds:SignatureMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;/\u0026gt; 12 \u0026lt;ds:Reference URI=\u0026#34;#pfx15f5264e-2c11-4717-9e15-b301b1d6bfd9\u0026#34;\u0026gt; 13 \u0026lt;ds:Transforms\u0026gt; 14 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;/\u0026gt; 15 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 16 \u0026lt;/ds:Transforms\u0026gt; 17 \u0026lt;ds:DigestMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;/\u0026gt; 18 \u0026lt;ds:DigestValue\u0026gt;GNLMMU8+ofuHdjn7Lef7drkEnNk=\u0026lt;/ds:DigestValue\u0026gt; 19 \u0026lt;/ds:Reference\u0026gt; 20 \u0026lt;/ds:SignedInfo\u0026gt; 21 \u0026lt;ds:SignatureValue\u0026gt; 22=============== Meta data signature ============= 23 \u0026lt;/ds:SignatureValue\u0026gt; 24 \u0026lt;ds:KeyInfo\u0026gt; 25 \u0026lt;ds:X509Data\u0026gt; 26 \u0026lt;ds:X509Certificate\u0026gt; 27=============== Public certificate for meta data signature ============= 28 \u0026lt;/ds:X509Certificate\u0026gt; 29 \u0026lt;/ds:X509Data\u0026gt; 30 \u0026lt;/ds:KeyInfo\u0026gt; 31 \u0026lt;/ds:Signature\u0026gt; 32 \u0026lt;md:IDPSSODescriptor 33 WantAuthnRequestsSigned=\u0026#34;false\u0026#34; 34 protocolSupportEnumeration=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 35 \u0026lt;md:KeyDescriptor use=\u0026#34;signing\u0026#34;\u0026gt; 36 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 37 \u0026lt;ds:X509Data\u0026gt; 38 \u0026lt;ds:X509Certificate\u0026gt; 39=============== SP public certificate for verifying signatures ============= 40 \u0026lt;/ds:X509Certificate\u0026gt; 41 \u0026lt;/ds:X509Data\u0026gt; 42 \u0026lt;/ds:KeyInfo\u0026gt; 43 \u0026lt;/md:KeyDescriptor\u0026gt; 44 \u0026lt;md:KeyDescriptor use=\u0026#34;encryption\u0026#34;\u0026gt; 45 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 46 \u0026lt;ds:X509Data\u0026gt; 47 \u0026lt;ds:X509Certificate\u0026gt; 48=============== SP public certificate for encrypting ============= 49 \u0026lt;/ds:X509Certificate\u0026gt; 50 \u0026lt;/ds:X509Data\u0026gt; 51 \u0026lt;/ds:KeyInfo\u0026gt; 52 \u0026lt;/md:KeyDescriptor\u0026gt; 53 \u0026lt;md:SingleLogoutService 54 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026#34; 55 Location=\u0026#34;https://exampleidp.com/idp/singleSignOnService\u0026#34;/\u0026gt; 56 \u0026lt;md:NameIDFormat\u0026gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\u0026lt;/md:NameIDFormat\u0026gt; 57 \u0026lt;md:SingleSignOnService 58 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026#34; 59 Location=\u0026#34;https://exampleidp.com/idp/singleSignOnService\u0026#34;/\u0026gt; 60 \u0026lt;/md:IDPSSODescriptor\u0026gt; 61\u0026lt;/md:EntityDescriptor\u0026gt; SP 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;md:EntityDescriptor 3 xmlns:md=\u0026#34;urn:oasis:names:tc:SAML:2.0:metadata\u0026#34; 4 validUntil=\u0026#34;2021-05-14T15:02:56Z\u0026#34; 5 cacheDuration=\u0026#34;PT604800S\u0026#34; 6 entityID=\u0026#34;TestSP\u0026#34; 7 ID=\u0026#34;pfx92d25019-cd26-c6ff-465b-0751318a302b\u0026#34;\u0026gt; 8 \u0026lt;ds:Signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 9 \u0026lt;ds:SignedInfo\u0026gt; 10 \u0026lt;ds:CanonicalizationMethod Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 11 \u0026lt;ds:SignatureMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;/\u0026gt; 12 \u0026lt;ds:Reference URI=\u0026#34;#pfx92d25019-cd26-c6ff-465b-0751318a302b\u0026#34;\u0026gt; 13 \u0026lt;ds:Transforms\u0026gt; 14 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;/\u0026gt; 15 \u0026lt;ds:Transform Algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;/\u0026gt; 16 \u0026lt;/ds:Transforms\u0026gt; 17 \u0026lt;ds:DigestMethod Algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;/\u0026gt; 18 \u0026lt;ds:DigestValue\u0026gt; 19=============== Meta data signature digest ============= 20 \u0026lt;/ds:DigestValue\u0026gt; 21 \u0026lt;/ds:Reference\u0026gt; 22 \u0026lt;/ds:SignedInfo\u0026gt; 23 \u0026lt;ds:SignatureValue\u0026gt; 24=============== Meta data signature ============= 25 \u0026lt;/ds:SignatureValue\u0026gt; 26 \u0026lt;ds:KeyInfo\u0026gt; 27 \u0026lt;ds:X509Data\u0026gt; 28 \u0026lt;ds:X509Certificate\u0026gt; 29=============== Public certificate for meta data signature ============= 30 \u0026lt;/ds:X509Certificate\u0026gt; 31 \u0026lt;/ds:X509Data\u0026gt; 32 \u0026lt;/ds:KeyInfo\u0026gt; 33 \u0026lt;/ds:Signature\u0026gt; 34 \u0026lt;md:SPSSODescriptor 35 AuthnRequestsSigned=\u0026#34;true\u0026#34; 36 WantAssertionsSigned=\u0026#34;true\u0026#34; 37 protocolSupportEnumeration=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 38 \u0026lt;md:KeyDescriptor use=\u0026#34;signing\u0026#34;\u0026gt; 39 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 40 \u0026lt;ds:X509Data\u0026gt; 41 \u0026lt;ds:X509Certificate\u0026gt; 42=============== IdP public certificate for verifying signatures ============= 43 \u0026lt;/ds:X509Certificate\u0026gt; 44 \u0026lt;/ds:X509Data\u0026gt; 45 \u0026lt;/ds:KeyInfo\u0026gt; 46 \u0026lt;/md:KeyDescriptor\u0026gt; 47 \u0026lt;md:KeyDescriptor use=\u0026#34;encryption\u0026#34;\u0026gt; 48 \u0026lt;ds:KeyInfo xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 49 \u0026lt;ds:X509Data\u0026gt; 50 \u0026lt;ds:X509Certificate\u0026gt; 51=============== IdP public certificate for encrypting ============= 52 \u0026lt;/ds:X509Certificate\u0026gt; 53 \u0026lt;/ds:X509Data\u0026gt; 54 \u0026lt;/ds:KeyInfo\u0026gt; 55 \u0026lt;/md:KeyDescriptor\u0026gt; 56 \u0026lt;md:SingleLogoutService 57 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026#34; 58 Location=\u0026#34;https://examplesp.com/sp/artifactConsumer\u0026#34;/\u0026gt; 59 \u0026lt;md:NameIDFormat\u0026gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\u0026lt;/md:NameIDFormat\u0026gt; 60 \u0026lt;md:AssertionConsumerService 61 Binding=\u0026#34;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\u0026#34; 62 Location=\u0026#34;https://examplesp.com/sp/artifactConsumer\u0026#34; 63 index=\u0026#34;1\u0026#34;/\u0026gt; 64 \u0026lt;/md:SPSSODescriptor\u0026gt; 65\u0026lt;/md:EntityDescriptor\u0026gt; ","link":"https://blog.samlsecurity.com/2012/02/saml-metadata.html","section":"post","tags":["SAML"],"title":"SAML metadata"},{"body":"During my work with OpenSAML I have created a few helper methods to make it easier to do common things in OpenSAML such as object creation and logging of SAML XML. I my code samples I keep this in the SAMLUtil class.\nCreating SAML objects OpenSAML has a bit complex way of creating SAML objects using a factory pattern.\nThe normal way to create a SAML object is like this.\n1XMLObjectBuilderFactory builderFactory = Configuration.getBuilderFactory(); 2 3Assertion assertion = (Assertion)builderFactory 4 .getBuilder(Assertion.DEFAULT_ELEMENT_NAME) 5 .buildObject(Assertion.DEFAULT_ELEMENT_NAME); Normally the default name of the class is used so it seams redundant to write this out all the time. With generics in JavaSE6 we can make this a lot easier.\n1public static \u0026lt;T\u0026gt; T createSAMLObject(final Class\u0026lt;T\u0026gt; clazz) { 2 XMLObjectBuilderFactory builderFactory = Configuration.getBuilderFactory(); 3 4 QName defaultElementName = (QName)clazz.getDeclaredField(\u0026#34;DEFAULT_ELEMENT_NAME\u0026#34;).get(null); 5 T object = (T)builderFactory.getBuilder(defaultElementName).buildObject(defaultElementName); 6 7return object; 8} By putting something like this in a utility class we can now create our SAML objects like this\n1Assertion assertion = UtilityClass.createSAMLObject(Assertion.class); Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nLogging The ability to in a nice way log the raw SAML messages i also very important, so I created my own logging method in a utility class. But after using it for a while I learned that I don't have to.\nThe ability to log the raw SAML messages turns out to be very important for debugging and understanding what messages are flowing. The OpenSAML library uses the log4j logging framework. By setting the threshold level, of the OpenSAML package to debug in the log4j properties file, you get all of the SAML messages to and from your application in your log file. You also get other useful information, so log4j is a good way to go.\nIf you would like to log just some SAML messages in you code. I have created a message to pretty print SAML elements as XML.\n1public static void logSAMLObject(final XMLObject object) { 2 3 Element element = null; 4 if (object instanceof SignableSAMLObject \u0026amp;\u0026amp; ((SignableSAMLObject) object).isSigned() 5 \u0026amp;\u0026amp; object.getDOM() != null) { 6 element = object.getDOM(); 7 } else { 8 try { 9 Marshaller out = XMLObjectProviderRegistrySupport.getMarshallerFactory().getMarshaller(object); 10 out.marshall(object); 11 element = object.getDOM(); 12 } catch (MarshallingException e) { 13 logger.error(e.getMessage(), e); 14 } 15 } 16 String xmlString = SerializeSupport.prettyPrintXML(element); 17 logger.info(xmlString); 18} ","link":"https://blog.samlsecurity.com/2011/04/convenience-methods-for-opensaml.html","section":"post","tags":["SAML","OpenSAML4"],"title":"Helper methods for OpenSAML"},{"body":"For all cryptographic functions OpenSAML requires a Credential which is a basically a cryptographic key wrapped in an object. The Credential can contain either an symmetric key or an asymmetric key not both. The Credential can be created manually with BasicX509Credential and BasicCredential classes and then populated with the setters. But the preferred way is to use one of the many CredentialResolvers to create the credential for you. I will now show some examples of how creating credentials using the basic classes and two different resolvers.\nThe Basic classes has methods like SetPublicKey SetSecretKey SetEntityCertificate SetPrivateKey\nBy setting this you can manually create credentials\n1BasicCredential credential = new BasicCredential(); 2credential.setPublicKey(myJCEPublicKey); 3credential.setPrivateKey(myJCEPrivateKey); 4credential.setUsageType(UsageType.SIGNING); And now you have a credential to use with signing. Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nThe credential resolvers can do things easier for you by helping to extract the keys from for example a java key store(JKS) or metadata.\n1KeyStore keystore; 2keystore = KeyStore.getInstance(KeyStore.getDefaultType()); 3FileInputStream inputStream = new FileInputStream(\u0026#34;/path/to/my/JKS\u0026#34;); 4keystore.load(inputStream, \u0026#34;MyKeystorePassword\u0026#34;.toCharArray()); 5inputStream.close(); 6 7Map\u0026lt;String, String\u0026gt; passwordMap = new HashMap\u0026lt;String, String\u0026gt;(); 8passwordMap.put(\u0026#34;MyEntryID\u0026#34;), \u0026#34;MyEntryPassword\u0026#34;); 9KeyStoreCredentialResolver resolver = new KeyStoreCredentialResolver(keystore, passwordMap); 10 11Criteria criteria = new EntityIDCriteria(\u0026#34;MyEntryID\u0026#34;); 12CriteriaSet criteriaSet = new CriteriaSet(criteria); 13 14X509Credential credential = (X509Credential)resolver.resolveSingle(criteriaSet); ","link":"https://blog.samlsecurity.com/2011/03/getting-credentials-in-opensaml.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Getting credentials in OpenSAML"},{"body":"In my case the, after the sign on at the IdP is completed, the user is redirected to my `Assertion Consumer Service URL defined in meta data. The IdP sends an artifact back as a parameter.The artifact is a label pointing to the actual user data/login information(the assertion) at the IdP. The user data is not sent in the HTTP request of security reasons. Instead the consumer servlet send a Artifact Resolve Request over a SOAP back channel to get the data.\nHere is an example of a servlet sending ArtifactResolveRequest and receiving an ArtifactResolveResponse.\n1private Envelope sendArtifactResolve(final ArtifactResolve artifactResolve) throws SOAPException, SecurityException, CertificateEncodingException, 2 MarshallingException, SignatureException, IllegalAccessException { 3 Envelope envelope = SAMLUtil.wrapInSOAPEnvelope(artifactResolve); 4 5 BasicSOAPMessageContext soapContext = new BasicSOAPMessageContext(); 6 soapContext.setOutboundMessage(envelope); 7 HttpClientBuilder clientBuilder = new HttpClientBuilder(); 8 HttpSOAPClient soapClient = new HttpSOAPClient(clientBuilder.buildClient(), new BasicParserPool()); 9 10 String artifactResolutionServiceURL = null; 11 for (ArtifactResolutionService ars : SAMLMetaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS) 12 .getArtifactResolutionServices()) { 13 if (ars.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 14 artifactResolutionServiceURL = ars.getLocation(); 15 } 16 } 17 18 soapClient.send(artifactResolutionServiceURL, soapContext); 19 20 return (Envelope)soapContext.getInboundMessage(); 21} 22 23private ArtifactResolve generateArtifactResolve(final String artifactString) throws CertificateEncodingException, MarshallingException, SignatureException, IllegalArgumentException, java.lang.SecurityException, IllegalAccessException { 24 ArtifactResolve artifactResolve = SAMLUtil.buildSAMLObjectWithDefaultName(ArtifactResolve.class); 25 26 Issuer issuer = SAMLUtil.buildSAMLObjectWithDefaultName(Issuer.class); 27 issuer.setValue(EvoteProperties.getProperty(\u0026#34;SPEntityId\u0026#34;)); 28 artifactResolve.setIssuer(issuer); 29 artifactResolve.setIssueInstant(new DateTime()); 30 31 artifactResolveId = SAMLUtil.getSecureRandomIdentifier(); 32 artifactResolve.setID(artifactResolveId); 33 34 for (ArtifactResolutionService sss : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getArtifactResolutionServices()) { 35 if (sss.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 36 artifactResolve.setDestination(sss.getLocation()); 37 } 38 } 39 40 Artifact artifact = SAMLUtil.buildSAMLObjectWithDefaultName(Artifact.class); 41 artifact.setArtifact(artifactString); 42 artifactResolve.setArtifact(artifact); 43 44 return artifactResolve; 45 } Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nArtifactResolveRequest sent: 1\u0026lt;saml2p:artifactresolve 2 destination=\u0026#34;http://myIDP.test.com:80/opensso/ArtifactResolver/metaAlias/idp1\u0026#34; 3 id=\u0026#34;_586f2345b514f6214b511f389e30ef60\u0026#34; 4 issueinstant=\u0026#34;2011-01-24T08:47:52.895Z\u0026#34; 5 version=\u0026#34;2.0\u0026#34; 6 xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 7 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 8 my-alias 9 \u0026lt;/saml2:issuer\u0026gt; 10 \u0026lt;saml2p:artifact\u0026gt; 11 AAQAAKHWNqF94IiJ1SjFRLxjyBBxq3RIkRN7/tJdnT2sFDU1tUtBRKJQMDE= 12 \u0026lt;/saml2p:artifact\u0026gt; 13\u0026lt;/saml2p:artifactresolve\u0026gt; This is the resulting ArtifactResponse in my case: 1\u0026lt;samlp:artifactresponse 2 destination=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34; 3 id=\u0026#34;s2df8548d497d8c779a1abddfad72adda2f06eefdd\u0026#34; 4 inresponseto=\u0026#34;_586f2345b514f6214b511f389e30ef60\u0026#34; 5 issueinstant=\u0026#34;2011-01-24T08:47:53Z\u0026#34; 6 version=\u0026#34;2.0\u0026#34; 7 xmlns:samlp=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; 8 \u0026lt;saml:issuer xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 9 IDP-alias 10 \u0026lt;/saml:issuer\u0026gt; 11 \u0026lt;samlp:status\u0026gt; 12 \u0026lt;samlp:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;\u0026gt; 13 \u0026lt;/samlp:statuscode\u0026gt; 14 \u0026lt;/samlp:status\u0026gt; 15 \u0026lt;samlp:response 16 destination=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34; 17 id=\u0026#34;s23a356af812e879b3bfbbded4b62f000c7c8c27bb\u0026#34; 18 inresponseto=\u0026#34;_bba7e8a2f7a7c51e339d614b2c2d1178\u0026#34; 19 issueinstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 20 version=\u0026#34;2.0\u0026#34;\u0026gt; 21 \u0026lt;saml:issuer xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 22 IDP-alias 23 \u0026lt;/saml:issuer\u0026gt; 24 \u0026lt;samlp:status\u0026gt; 25 \u0026lt;samlp:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;\u0026gt; 26 \u0026lt;/samlp:statuscode\u0026gt; 27 \u0026lt;/samlp:status\u0026gt; 28 \u0026lt;saml:assertion 29 id=\u0026#34;s2365479533bf942f8eaaa2c267f9bd4ff679ebc1f\u0026#34; 30 issueinstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 31 version=\u0026#34;2.0\u0026#34; 32 xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; 33 \u0026lt;saml:issuer\u0026gt; 34 IDP-alias 35 \u0026lt;/saml:issuer\u0026gt; 36 \u0026lt;saml:subject\u0026gt; 37 \u0026lt;saml:nameid 38 format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; 39 namequalifier=\u0026#34;IDP-alias\u0026#34; 40 spnamequalifier=\u0026#34;my-alias\u0026#34;\u0026gt; 41 5VkzP/MZ1PMJ62o45/7DdFms9y7K 42 \u0026lt;/saml:nameid\u0026gt; 43 \u0026lt;saml:subjectconfirmation method=\u0026#34;urn:oasis:names:tc:SAML:2.0:cm:bearer\u0026#34;\u0026gt; 44 \u0026lt;saml:subjectconfirmationdata 45 inresponseto=\u0026#34;_bba7e8a2f7a7c51e339d614b2c2d1178\u0026#34; 46 notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34; 47 recipient=\u0026#34;https://myIDP.test.com/saml/consumer\u0026#34;\u0026gt; 48 \u0026lt;/saml:subjectconfirmationdata\u0026gt; 49 \u0026lt;/saml:subjectconfirmation\u0026gt; 50 \u0026lt;/saml:subject\u0026gt; 51 \u0026lt;saml:conditions 52 notbefore=\u0026#34;2011-01-24T08:37:50Z\u0026#34; 53 notonorafter=\u0026#34;2011-01-24T08:57:50Z\u0026#34;\u0026gt; 54 \u0026lt;saml:audiencerestriction\u0026gt; 55 \u0026lt;saml:audience\u0026gt; 56 my-alias 57 \u0026lt;/saml:audience\u0026gt; 58 \u0026lt;/saml:audiencerestriction\u0026gt; 59 \u0026lt;/saml:conditions\u0026gt; 60 \u0026lt;saml:authnstatement 61 authninstant=\u0026#34;2011-01-24T08:47:50Z\u0026#34; 62 sessionindex=\u0026#34;s212cd7811734a92405b6ef8308a1b1a98e32e6f01\u0026#34;\u0026gt; 63 \u0026lt;saml:authncontext\u0026gt; 64 \u0026lt;saml:authncontextclassref\u0026gt; 65 urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 66 \u0026lt;/saml:authncontextclassref\u0026gt; 67 \u0026lt;/saml:authncontext\u0026gt; 68 \u0026lt;/saml:authnstatement\u0026gt; 69 \u0026lt;saml:attributestatement\u0026gt; 70 \u0026lt;saml:attribute name=\u0026#34;uid\u0026#34;\u0026gt; 71 \u0026lt;saml:attributevalue 72 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 73 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 74 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 75 03011700143 76 \u0026lt;/saml:attributevalue\u0026gt; 77 \u0026lt;/saml:attribute\u0026gt; 78 \u0026lt;saml:attribute name=\u0026#34;mail\u0026#34;\u0026gt; 79 \u0026lt;saml:attributevalue 80 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 81 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 82 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 83 something@test.com 84 \u0026lt;/saml:attributevalue\u0026gt; 85 \u0026lt;/saml:attribute\u0026gt; 86 \u0026lt;saml:attribute name=\u0026#34;telephone\u0026#34;\u0026gt; 87 \u0026lt;saml:attributevalue 88 xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; 89 xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; 90 xsi:type=\u0026#34;xs:string\u0026#34;\u0026gt; 91 546848134886 92 \u0026lt;/saml:attributevalue\u0026gt; 93 \u0026lt;/saml:attribute\u0026gt; 94 \u0026lt;/saml:attributestatement\u0026gt; 95 \u0026lt;/saml:assertion\u0026gt; 96 \u0026lt;/samlp:response\u0026gt; 97\u0026lt;/samlp:artifactresponse\u0026gt;\n","link":"https://blog.samlsecurity.com/2011/02/resolve-artifact-with-opensaml.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Resolve an artifact with OpenSAML"},{"body":"To logout an user from the SP an LogoutRequest is sent. The data needed about the user is the SessionIndex and NameID from the data received at login. I my case in the Assertion in the Artifact Resolve Response.\n1//IPR Ergogroup AS 2public static void doSynchronousLogout(final HttpSession sessionToLogout, final SAMLMetaData metaData) throws SOAPException, SecurityException, ValidationException, IllegalArgumentException, java.lang.SecurityException, IllegalAccessException, MarshallingException, SignatureException { 3 NameID nameId = (NameID)sessionToLogout.getAttribute(\u0026#34;SAMLNameID\u0026#34;); 4 String sessionIndex = (String)sessionToLogout.getAttribute(\u0026#34;SAMLSessionIndex\u0026#34;); 5 6 Body body = buildSAMLObjectWithDefaultName(Body.class); 7 8 LogoutRequest logoutRequest = genererateLogoutRequest(nameId, sessionIndex, metaData); 9 signLogoutRequest(logoutRequest); 10 body.getUnknownXMLObjects().add(logoutRequest); 11 nameId.detach(); 12 Envelope envelope = buildSAMLObjectWithDefaultName(Envelope.class); 13 envelope.setBody(body); 14 15 SAMLUtil.logSAMLObject(envelope); 16 17 BasicSOAPMessageContext soapContext = new BasicSOAPMessageContext(); 18 19 soapContext.setOutboundMessage(envelope); 20 21 HttpClientBuilder clientBuilder = new HttpClientBuilder(); 22 23 HttpSOAPClient soapClient = new HttpSOAPClient(clientBuilder.buildClient(), new BasicParserPool()); 24 25 String sloServiceURL = null; 26 for (SingleLogoutService sls : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices()) { 27 if (sls.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 28 sloServiceURL = sls.getLocation(); 29 } 30 } 31 soapClient.send(sloServiceURL, soapContext); 32 33 Envelope soapResponse = (Envelope)soapContext.getInboundMessage(); 34 35 SAMLUtil.logSAMLObject(soapResponse); 36 37 validateSLOResponse(soapResponse, logoutRequest.getID()); 38 verifySLOResponseSignature(soapResponse); 39 processSLOResponse(soapResponse); 40 41} 42 43 44private static LogoutRequest genererateLogoutRequest(final NameID nameId, final String sessionIndex, final SAMLMetaData metaData) throws IllegalArgumentException, java.lang.SecurityException, IllegalAccessException { 45 LogoutRequest logoutRequest = buildSAMLObjectWithDefaultName(LogoutRequest.class); 46 47 logoutRequest.setID(SAMLUtil.getSecureRandomIdentifier()); 48 49 for (SingleLogoutService sls : metaData.getIdpEntityDescriptor().getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices()) { 50 if (sls.getBinding().equals(SAMLConstants.SAML2_SOAP11_BINDING_URI)) { 51 logoutRequest.setDestination(sls.getLocation()); 52 } 53 } 54 55 logoutRequest.setIssueInstant(new DateTime()); 56 57 Issuer issuer = buildSAMLObjectWithDefaultName(Issuer.class); 58 issuer.setValue(EvoteProperties.getProperty(\u0026#34;SPEntityId\u0026#34;)); 59 logoutRequest.setIssuer(issuer); 60 61 SessionIndex sessionIndexElement = buildSAMLObjectWithDefaultName(SessionIndex.class); 62 63 sessionIndexElement.setSessionIndex(sessionIndex); 64 logoutRequest.getSessionIndexes().add(sessionIndexElement); 65 66 logoutRequest.setNameID(nameId); 67 return logoutRequest; 68} Ad Want to quickly learn and understand OpenSAML?\nHave a look on the book A guide to OpenSAML!\nLogoutRequest sent:\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;saml2p:logoutrequest xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; destination=\u0026#34;http://myIDP.test.com:80/opensso/IDPSloSoap/metaAlias/idp1\u0026#34; id=\u0026#34;_b39909314c537670d58b60136d98ce5f\u0026#34; issueinstant=\u0026#34;2011-01-20T18:57:09.144Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 3 \u0026lt;saml2:issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt;my-alias 4\u0026lt;/saml2:issuer\u0026gt; 5 \u0026lt;ds:signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 6 \u0026lt;ds:signedinfo\u0026gt; 7 \u0026lt;ds:canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 8 \u0026lt;ds:signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 9 \u0026lt;ds:reference uri=\u0026#34;#_b39909314c537670d58b60136d98ce5f\u0026#34;\u0026gt; 10 \u0026lt;ds:transforms\u0026gt; 11 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 12 \u0026lt;ds:transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 13\t\u0026lt;/ds:transform\u0026gt; 14 \u0026lt;/ds:transform\u0026gt; 15 \u0026lt;/ds:transforms\u0026gt; 16 \u0026lt;ds:digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;\u0026gt; 17 \u0026lt;ds:digestvalue\u0026gt;Sn7qX8Yf4Pcs6SLl4Yn0NyEx6P0=\u0026lt;/ds:digestvalue\u0026gt; 18 \u0026lt;/ds:digestmethod\u0026gt; 19 \u0026lt;/ds:reference\u0026gt; 20 \u0026lt;/ds:signaturemethod\u0026gt; 21 \u0026lt;/ds:canonicalizationmethod\u0026gt; 22 \u0026lt;/ds:signedinfo\u0026gt; 23 \u0026lt;ds:signaturevalue\u0026gt;cE3wgjeM+45uk/XVNQl+1NZKeRwRzFnJN9xaL/36vnXqu6eLBqs8eqdQ2a+yY9UkZz0gU1NrTqUMQgIANw1WfkL2a+sxQqqu2p4ggXKNwHiMWbyfPEUkxQM4wSwr3ECObjyVqrgPDA+4TiDyqPj2NBtZGo8WU3fvpOGQkQN19f0=\u0026lt;/ds:signaturevalue\u0026gt; 24 \u0026lt;ds:keyinfo xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemalocation=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 25 \u0026lt;ds:x509data\u0026gt; 26 \u0026lt;ds:x509certificate\u0026gt;CERT/ds:x509certificate\u0026gt; 27 \u0026lt;/ds:x509data\u0026gt; 28 \u0026lt;/ds:keyinfo\u0026gt; 29 \u0026lt;/ds:signature\u0026gt; 30 \u0026lt;saml:nameid xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026#34; namequalifier=\u0026#34;idporten\u0026#34; spnamequalifier=\u0026#34;steras-idporten\u0026#34;\u0026gt;puEYi51x6aylfgXbBJTLSTTxOqck\u0026lt;/saml:nameid\u0026gt; 31 \u0026lt;saml2p:sessionindex\u0026gt;s2ce6f528812bbf545358af381cc864c575e9cb901\u0026lt;/saml2p:sessionindex\u0026gt; 32\u0026lt;/saml2p:logoutrequest\u0026gt; This is the resulting LogoutResponse in my case:\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 2\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; 3\u0026lt;samlp:logoutresponse xmlns:samlp=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; id=\u0026#34;sbf42f25f0d38af69316533b7b3ea46d509585e32\u0026#34; inresponseto=\u0026#34;_b39909314c537670d58b60136d98ce5f\u0026#34; issueinstant=\u0026#34;2011-01-20T18:57:09Z\u0026#34; version=\u0026#34;2.0\u0026#34;\u0026gt; 4 \u0026lt;saml:issuer xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt;idp-alias 5\u0026lt;/saml:issuer\u0026gt; 6 \u0026lt;signature xmlns=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; 7 \u0026lt;signedinfo\u0026gt; 8 \u0026lt;canonicalizationmethod algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 9 \u0026lt;signaturemethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#rsa-sha1\u0026#34;\u0026gt; 10 \u0026lt;reference uri=\u0026#34;#sbf42f25f0d38af69316533b7b3ea46d509585e32\u0026#34;\u0026gt; 11 \u0026lt;transforms\u0026gt; 12 \u0026lt;transform algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#enveloped-signature\u0026#34;\u0026gt; 13 \u0026lt;transform algorithm=\u0026#34;http://www.w3.org/2001/10/xml-exc-c14n#\u0026#34;\u0026gt; 14\t\u0026lt;/transform\u0026gt; 15 \u0026lt;/transform\u0026gt; 16 \u0026lt;/transforms\u0026gt; 17 \u0026lt;digestmethod algorithm=\u0026#34;http://www.w3.org/2000/09/xmldsig#sha1\u0026#34;\u0026gt; 18 \u0026lt;digestvalue\u0026gt;CDFFLlD2FX8fjlPJLKpJZRusnx0=\u0026lt;/digestvalue\u0026gt; 19 \u0026lt;/digestmethod\u0026gt; 20 \u0026lt;/reference\u0026gt; 21 \u0026lt;/signaturemethod\u0026gt; 22 \u0026lt;/canonicalizationmethod\u0026gt; 23 \u0026lt;/signedinfo\u0026gt; 24 \u0026lt;signaturevalue\u0026gt; 25cKgVEfLR48x7urpH+TV+V1gHYnVhc/ErkMhwp17rjAMfjHKHk0EPgH2+aOV7Z83udbfr0RPKF5Zd 26Mg0zq1KIm29RsqUsUYNKKNiYPlEkBIoHPcc2AhftpA/VNRjea7q2W9+y6XV2YWjzGnArrfflv1KM 271t5C89Vz/VB0jQdJvMU= 28\u0026lt;/signaturevalue\u0026gt; 29 \u0026lt;/signature\u0026gt; 30 \u0026lt;samlp:status\u0026gt; 31 \u0026lt;samlp:statuscode value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34;\u0026gt; 32\u0026lt;/samlp:statuscode\u0026gt; 33 \u0026lt;samlp:statusmessage\u0026gt; 34Request is done successfully 35\u0026lt;/samlp:statusmessage\u0026gt; 36 \u0026lt;/samlp:status\u0026gt; 37\u0026lt;/samlp:logoutresponse\u0026gt; ","link":"https://blog.samlsecurity.com/2011/02/single-log-out-with-opensaml.html","section":"post","tags":["SAML","OpenSAMLV2"],"title":"Single Log Out with OpenSAML"},{"body":"The past few weeks I’ve been trying to understand how the SAML protocol works. I’m planing to write a couple of posts about SAML in the future so first, here is a short introduction in SAML.\nSAML is “an XML framework for exchanging authentication and authorization information.”\nSo basically its a big XML schema.\nSAML is built up of four main specifications. Assertions, protocols, bindings and profiles.\nAssertions, the information This is the actual information being sent, such as credentials, profile information and authorization decisions.\n1\u0026lt;saml:Assertion xmlns:saml=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; ID=\u0026#34;560f83e350ff2cabfa02345ee59153ba\u0026#34; IssueInstant=\u0026#34;2010-11-22T14:30:30.728Z\u0026#34; Version=\u0026#34;2.0\u0026#34;\u0026gt; 2 \u0026lt;saml:Issuer\u0026gt;me\u0026lt;/saml:Issuer\u0026gt; 3 \u0026lt;saml:Subject\u0026gt; 4 \u0026lt;saml:NameID\u0026gt;harold_dt\u0026lt;/saml:NameID\u0026gt; 5 \u0026lt;/saml:Subject\u0026gt; 6 \u0026lt;saml:AuthnStatement AuthnInstant=\u0026#34;2010-11-04T14:04:30Z\u0026#34; SessionIndex=\u0026#34;s22428b07e56ce0dbd3f72237ce29c585541db5d01\u0026#34;\u0026gt; 7 \u0026lt;saml:AuthnContext\u0026gt; 8 \u0026lt;saml:AuthnContextClassRef\u0026gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport 9 \u0026lt;/saml:AuthnContextClassRef\u0026gt; 10 \u0026lt;/saml:AuthnContext\u0026gt; 11 \u0026lt;/saml:AuthnStatement\u0026gt; 12\u0026lt;/saml:Assertion\u0026gt; \u0026lt;saml:Issuer\u0026gt; The entity sending the assertion. \u0026lt;saml:Subject\u0026gt; The identity the assertion is about \u0026lt;saml:NameID\u0026gt; The identities unique identifier \u0026lt;saml:AuthnStatement\u0026gt; Authentication information, here only authentication method, PasswordProtectedTransport. Aka login was don with username and password.\nAd Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nProtocol, processing Is a packaging of the assertions that defines how the assertion should be creates and processed\nBinding, the transport Defines how the messages are transported in a standard communication protocol for example SOAP, ie wrapping an assertion in a SOAP envelope.\n1\u0026lt;soap-env:Envelope xmlns:soap-env=\u0026#34;http://schemas.xmlsoap.org/soap/envelope/\u0026#34;\u0026gt; 2 \u0026lt;soap-env:Body\u0026gt; 3 \u0026lt;!-- Assertion --\u0026gt; 4 \u0026lt;/soap-env:Body\u0026gt; 5\u0026lt;/soap-env:Envelope\u0026gt; Profiles, putting it together The profiles define describes on a higher level how the different parts should be used to solve a task. For example the Web browser profile describes how authentications is done from a web browser.\nFor detailed information on the SAML protocol have a look at the different documents from OASIS here\nThe management and technical overviews are good next steps\nManagement Overview\nTechnical Overview\nTo really dig in deep have a look at the raw SAML specs here\n","link":"https://blog.samlsecurity.com/2010/11/short-introduction-to-saml.html","section":"post","tags":["SAML"],"title":"SAML explained"},{"body":"start\n","link":"https://blog.samlsecurity.com/book/","section":"book","tags":null,"title":""},{"body":"This is my latest book on the subject of OpenSAML. It will guide you trough the basics of Single Sing-on with SAML and how to set up a Service Provider using OpenSAML.\nThis book will give you\nA basic understanding of Single Sign-On with OpenSAML A migration guide for migrating from OpenSAML V2 to V3 Running sample code to try things out A walk though of steps needed to implement SSO in OpenSAML Usage of popular bindings and useful security features If you are looking for my previous book on OpenSAML V2 you will find it here.\n","link":"","section":"book","tags":null,"title":"A Guide to OpenSAML V3"},{"body":"Anyone taking a first look at SAML will see that is complex. As well as being a good tool to implement Single Sign-On ease organizational pain and improve security, it can also be a source to critical security vulnerabilities if design or implemented incorrectly.\nSAML 2.0: Designing secure identity federation demystifies the concepts of SAML and gives beginners, as well as experience architects, a good understanding of the otherwise complex subject of SAML.\nWalking through all topics from introduction to advanced you will learn\nTo fully understand SAML and identity federation Workings of the main building blocks like NameId, bindings and assertions How Single Single-On and Single Logout works in detail Different architectural choices and implementation alternatives Security best practices and considerations Previous security vulnerabilities and what can be learned from them ","link":"","section":"book","tags":null,"title":"SAML 2.0: Designing secure identity federation"},{"body":"","link":"https://blog.samlsecurity.com/series/","section":"series","tags":null,"title":"Series"},{"body":"In most example around the web, PySAML is used with the configuration attribute allow_unsolicited=True. This disables a, even though optional, security feature of SAML, allowing unsolicited responses to be received and considered valid. Obviously this should not be done in production implementations.\nIn this article I will show you what solicited responses are and how you can validate that a response is solicited in PySAML.\nSolicited and unsolicited responses So what is a solicited or unsolicited response? Simply put, a solicited response is a response you asked for, as opposed to a unsolicited response that arrives without you asking for it.\nIn the context of SAML, a un solicited response is a SAML authentication response received from the IdP without the SP first having sent an authentication request.\nThis is allowed in SAML and is also known as IdP initiated authentication, as opposed to SP initiated authentication, when the SP initiated authenticate by sending the authentication request.\nIn order to keep track of this in SAML, when the SP sends a request to the IdP, SP saves the Id of the request. When the IdP send the authentication response back includes the id for the request it responds to in a an attribute, InResponseTo\n1\u0026lt;samlp:Response xmlns:samlp=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; 2 ID=\u0026#34;de8b79c37092487aa7f9c5cb6c5a542a\u0026#34; 3 InResponseTo=\u0026#34;id-5PGmWNaR9dLIoTGOf\u0026#34; 4 Version=\u0026#34;2.0\u0026#34; 5 IssueInstant=\u0026#34;2023-12-02T13:17:14.765Z\u0026#34; 6 Destination=\u0026#34;http://localhost:5000/acs\u0026#34;\u0026gt; 7... 8\u0026lt;/samlp:Response\u0026gt; When the SP receives the response it verifies that the InResponseTo id in the response is the same as the request it sent, ensuring that the response is actually an response to the request that was sent.\nThis is a topic a dive deep into in my book on SAML. Ad Need a complete understanding of SAML 2.0?\nHave a look on the book SAML 2.0: Designing secure identity federation!\nCode The prepare_for_authenticate function in PySAML client returns in addition to the authentication request also the request id for this purpose. Lets store this as key in a dictionary. The value of the entry should be the target for the user was heading to before starting authentication. I the case below we just hard code it to simplify. The dictionary is stored on the HTTP session of the user\n1request_id, authn_request = sp.prepare_for_authenticate() 2session[\u0026#39;saml2_outstanding_requests\u0026#39;] = {request_id: \u0026#34;/success\u0026#34;} Next when we receive the response we parse it using the parse_authn_request_response function of the PySAML client. This function also verifies the InResponseTo id and takes the dictionary we made earlier as a argument of ids of sent requests.\n1authn_response = sp.parse_authn_request_response(request.form[\u0026#39;SAMLResponse\u0026#39;], saml_config.BINDING_HTTP_POST, session[\u0026#39;saml2_outstanding_requests\u0026#39;]) Get it on Github and try it out! The full sample code is available on Github at https://github.com/rasmusson/pysaml-samples under solicited_responses/\nJust clone it, run it, go nuts!\n1apt-get install xmlsec1 2pip install flask 3pip install pysaml2 4 5git clone https://github.com/rasmusson/pysaml-samples.git 6cd intro 7 8python sample.py ","link":"https://blog.samlsecurity.com/post/pysaml-unsolicited-response/","section":"post","tags":["SAML","pySAML"],"title":"Verifying solicited responses in PySAML"}]