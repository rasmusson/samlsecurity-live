<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SAML on SAMLSecurity</title>
    <link>https://blog.samlsecurity.com/categories/saml/</link>
    <description>Recent content in SAML on SAMLSecurity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Stefan Rasmusson</copyright>
    <lastBuildDate>Thu, 20 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.samlsecurity.com/categories/saml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solicited and unsolicited responses in SAML</title>
      <link>https://blog.samlsecurity.com/post/unsolicited-response/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/post/unsolicited-response/</guid>
      <description>
        
          
            In this post we look on the login flow called IdP initiated Authentication or unsolicited responses
          
          
        
      </description>
    </item>
    
    <item>
      <title>Quick first introduction to PySAML</title>
      <link>https://blog.samlsecurity.com/post/pysaml-intro/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/post/pysaml-intro/</guid>
      <description>
        
          
            PySAML2 is a powerful Python library designed to streamline the integration of the Security Assertion Markup Language (SAML) protocol into Python applications. As a widely used standard for exchanging authentication and authorization data between parties, SAML ensures secure and seamless user authentication across disparate systems.
In this quick tutorial we will look at the how to set up a simple SAML Service provider using PySAML to talk to mocksaml.dev as IdP.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Disabling &#34;Update account information&#34; dialog when brokering using Keycloak</title>
      <link>https://blog.samlsecurity.com/post/keycloak-transparent/</link>
      <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/post/keycloak-transparent/</guid>
      <description>
        
          
            Building on my blog on using SAML in a SPA lets dig into a problem many seem to encounter when using keycloak and which to have i more or less like a transparent broker or proxy for authentication.
The setup Lets take the setup in the post Authenticating a React SPA towards a SAML IdP as any example. This sets up a simple integration between a React Javascript SPA and a ADFS SAML IdP.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Authenticating a React SPA towards a SAML IdP</title>
      <link>https://blog.samlsecurity.com/post/saml-for-react-spa/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/post/saml-for-react-spa/</guid>
      <description>
        
          
            In this tutorial we will look at how to authenticate user from a typical SPA in React using a SAML IdP, in this case ADFS. This is done using a Keycloak server to act as a broker and translate between OIDC and SAML. I will show the necessary configuration needed and as a cherry on top show you how to automate the whole setup.
The problem with SAML in SPA in browser application “No, you can’t use SAML in a Single Page Application.
          
          
        
      </description>
    </item>
    
    <item>
      <title>SAML Chrome Extension Published!</title>
      <link>https://blog.samlsecurity.com/2015/10/saml-chrome-extension-published.html</link>
      <pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/2015/10/saml-chrome-extension-published.html</guid>
      <description>
        
          
            I have been working with SAML for a while now and I have always used Firefox for debugging instead of my favorite browser, Chrome. Why? you ask. Because there is a plugin called SAML tracer on firefox that is excellent for viewing the SAML messages going across the browser. There have been no such plugin for Chrome.
Finally I have decided to take things into my own hands and build one.
          
          
        
      </description>
    </item>
    
    <item>
      <title>What is a SAML Assertion?</title>
      <link>https://blog.samlsecurity.com/2015/07/what-is-saml-assertion.html</link>
      <pubDate>Thu, 02 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/2015/07/what-is-saml-assertion.html</guid>
      <description>
        
          
            If you are just starting out trying to understand SAML you will come across the term SAML Assertion quite quickly. In this post or tutorial, I will try to explain to you what a SAML Assertion is and give you some examples on how they could look. This post mainly looks at the SAML Assertion in the perspective of the SAML Web Browser Profile. If you don&#39;t know what that is, have a look on my post about exactly that
          
          
        
      </description>
    </item>
    
    <item>
      <title>SAML Web Browser Profile</title>
      <link>https://blog.samlsecurity.com/2012/05/saml-web-profile.html</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/2012/05/saml-web-profile.html</guid>
      <description>
        
          
            What is it? The SAML Web Browser SSO Profile is one of the profiles defined in the SAML specification. As described in my introductory post on SAML, profiles describes how to fulfill a specific use-case using SAML.
In the realm of user authentication using SAML, the Web Browser Profile is very frequently used.
The use-case being described in the Web Browser Profile is how to authenticate a user that is using a web browser.
          
          
        
      </description>
    </item>
    
    <item>
      <title>SAML metadata</title>
      <link>https://blog.samlsecurity.com/2012/02/saml-metadata.html</link>
      <pubDate>Wed, 22 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/2012/02/saml-metadata.html</guid>
      <description>
        
          
            Meta data is essential to set up a integration between two parties in SAML. But what is it? How does it work? How do you exchange it and where does this create a trust? All these questions will be answered!
          
          
        
      </description>
    </item>
    
    <item>
      <title>SAML explained</title>
      <link>https://blog.samlsecurity.com/2010/11/short-introduction-to-saml.html</link>
      <pubDate>Mon, 22 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/2010/11/short-introduction-to-saml.html</guid>
      <description>
        
          
            Information and example on how to sign and send authnrequests in OpenSAML
          
          
        
      </description>
    </item>
    
    <item>
      <title>Verifying solicited responses in PySAML</title>
      <link>https://blog.samlsecurity.com/post/pysaml-unsolicited-response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.samlsecurity.com/post/pysaml-unsolicited-response/</guid>
      <description>
        
          
            In most example around the web, PySAML is used with the configuration attribute allow_unsolicited=True. This disables a, even though optional, security feature of SAML, allowing unsolicited responses to be received and considered valid. Obviously this should not be done in production implementations.
In this article I will show you what solicited responses are and how you can validate that a response is solicited in PySAML.
Solicited and unsolicited responses So what is a solicited or unsolicited response?
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
